BASH(1)                     General Commands Manual                    BASH(1)



NNAAMMEE
       bash - GNU Bourne-Again SHell (GNU 命令解释程序 “Bourne二世”)

概概述述((SSYYNNOOPPSSIISS))
       bbaasshh [options] [file]

版版权权所所有有((CCOOPPYYRRIIGGHHTT))
       Bash is Copyright (C) 1989-2002 by the Free Software Foundation, Inc.

描描述述((DDEESSCCRRIIPPTTIIOONN))
       BBaasshh                             是一个与                            _s_h
       兼容的命令解释程序，可以执行从标准输入或者文件中读取的命令。       BBaasshh
       也整合了 _K_o_r_n 和 _C _S_h_e_l_l (kksshh 和 ccsshh) 中的优秀特性。

       BBaasshh  的目标是成为遵循  IEEE  POSIX Shell and Tools specification (IEEE
       Working Group 1003.2，可移植操作系统规约： shell 和工具) 的实现。

选选项项((OOPPTTIIOONNSS))
       除了在   sseett   内建命令的文档中讲述的单字符选项   (option)   之外，bbaasshh
       在启动时还解释下列选项。

       --cc _s_t_r_i_n_g 如果有   --cc  选项，那么命令将从  _s_t_r_i_n_g  中读取。如果  _s_t_r_i_n_g
                 后面有参数    (argument)，它们将用于给位置参数    (positional
                 parameter，以 $$00 起始) 赋值。
       --ii        如果有 --ii 选项，shell 将交互地执行 ( _i_n_t_e_r_a_c_t_i_v_e )。
       --ll        选项使得  bbaasshh  以类似登录  shell  (login  shell)  的方式启动
                 (参见下面的 启启动动((IINNVVOOCCAATTIIOONN)) 章节)。
       --rr        如果有 --rr 选项，shell 成为受限的 ( _r_e_s_t_r_i_c_t_e_d  )  (参见下面的
                 受受限限的的sshheellll((RREESSTTRRIICCTTEEDD SSHHEELLLL)) 章节)。
       --ss        如果有                                                     --ss
                 选项，或者如果选项处理完以后，没有参数剩余，那么命令将从标准输入读取。
                 这个选项允许在启动一个交互 shell 时可以设置位置参数。
       --DD        向标准输出打印一个以  $$  为前导的，以双引号引用的字符串列表。
                 这是在当前语言环境不是          CC          或           PPOOSSIIXX
                 时，脚本中需要翻译的字符串。         这个选项隐含了        --nn
                 选项；不会执行命令。
       [[--++]]OO [[_s_h_o_p_t___o_p_t_i_o_n]]
                 _s_h_o_p_t___o_p_t_i_o_n 是一个  sshhoopptt  内建命令可接受的选项  (参见下面的
                 sshheellll   内内建建命命令令((SSHHEELLLL   BBUUIILLTTIINN   CCOOMMMMAANNDDSS))  章节)。  如果有
                 _s_h_o_p_t___o_p_t_i_o_n，--OO    将设置那个选项的取值；    ++OO     取消它。
                 如果没有给出                              _s_h_o_p_t___o_p_t_i_o_n，sshhoopptt
                 将在标准输出上打印设为允许的选项的名称和值。   如果启动选项是
                 ++OO，输出将以一种可以重用为输入的格式显示。
       ----        ----         标志选项的结束，禁止其余的选项处理。任何        ----
                 之后的参数将作为文件名和参数对待。参数 -- 与此等价。

       BBaasshh
       也解释一些多字节的选项。在命令行中，这些选项必须置于需要被识别的单字符参数之前。

       ----dduummpp--ppoo--ssttrriinnggss
              等价于 --DD，但是输出是 GNU _g_e_t_t_e_x_t ppoo (可移植对象) 文件格式
       ----dduummpp--ssttrriinnggss
              等价于 --DD
       ----hheellpp 在标准输出显示用法信息并成功退出
       ----iinniitt--ffiillee _f_i_l_e
       ----rrccffiillee _f_i_l_e
              如果            shell            是交互的，执行             _f_i_l_e
              中的命令，而不是标准的个人初始化文件    _~_/_._b_a_s_h_r_c    (参见下面的
              启启动动((IINNVVOOCCAATTIIOONN)) 章节)

       ----llooggiinn
              等价于 --ll

       ----nnooeeddiittiinngg
              如果 shell 是交互的，不使用 GNU rreeaaddlliinnee 库来读命令行

       ----nnoopprrooffiillee
              不读取系统范围的启动文件   _/_e_t_c_/_p_r_o_f_i_l_e   或者任何个人初始化文件
              _~_/_._b_a_s_h___p_r_o_f_i_l_e,  _~_/_._b_a_s_h___l_o_g_i_n,  或  _~_/_._p_r_o_f_i_l_e  。默认情况下，
              bbaasshh 在作为登录 shell 启动时读取这些文件 (参见下面的  启启动动((IINNVVOO‐‐
              CCAATTIIOONN)) 章节)

       ----nnoorrcc 如果    shell    是交互的，不读取/执行个人初始化文件   _~_/_._b_a_s_h_r_c
              这个选项在 shell 以 sshh 命令启动时是默认启用的

       ----ppoossiixx
              如果默认操作与    POSIX    1003.2    标准不同的话，改变     bbaasshh
              的行为来符合标准 (_p_o_s_i_x _m_o_d_e)

       ----rreessttrriicctteedd
              shell 成为受限的 (参见下面的 受受限限的的sshheellll((RREESSTTRRIICCTTEEDD SSHHEELLLL)) 章节)

       ----rrppmm--rreeqquuiirreess
              产生一个为使脚本运行，需要的文件的列表。    这个选项包含了    --nn
              选项。 它是为了避免进行编译期错误检测时的限制－－ Backticks,  []
              tests,  还有 evals 不会被解释，一些依赖关系可能丢失

       ----vveerrbboossee
              等价于 --vv

       ----vveerrssiioonn
              在标准输出显示此 bbaasshh 的版本信息并成功退出。

参参数数((AARRGGUUMMEENNTTSS))
       如果选项处理之后仍有参数剩余，并且没有指定       --cc        或       --ss
       选项，第一个参数将假定为一个包含  shell  命令的文件的名字。  如果  bbaasshh
       是以这种方式启动的，                                                 $$00
       将设置为这个文件的名字，位置参数将设置为剩余的其他参数。           BBaasshh
       从这个文件中读取并执行命令，然后退出。                             BBaasshh
       的退出状态是脚本中执行的最后一个命令的退出状态。
       如果没有执行命令，退出状态是0。
       尝试的步骤是先试图打开在当前目录中的这个文件，接下来，
       如果没有找到，shell 将搜索脚本的 PPAATTHH 环境变量中的路径。

启启动动((IINNVVOOCCAATTIIOONN))
       _l_o_g_i_n   _s_h_e_l_l  登录  shell，参数零的第一个字符是  --  ，或者启动时指定了
       ----llooggiinn 选项的 shell。

       _i_n_t_e_r_a_c_t_i_v_e                                                      交互的
       shell，是一个启动时没有指定非选项的参数，并且没有指定                --cc
       选项，标准输出和标准输入都连接到了终端    (在     _i_s_a_t_t_y(3)     中判定)
       的shell，或者启动时指定了  --ii  选项的  shell。如果  bbaasshh 是交互的， PPSS11
       环境变量将被设置，并且     $$--     包含     ii      ，允许一个      shell
       脚本或者一个启动文件来检测这一状态。

       下列段落描述了                                                     bbaasshh
       如何执行它的启动文件。如果这些启动文件中的任一个存在但是不可读取， bbaasshh
       将报告一个错误。文件名中的波浪号  (~,tilde) 将像 EEXXPPAANNSSIIOONN 章节中 TTiillddee
       EExxppaannssiioonn 段描述的那样展开。

       当  bbaasshh  是作为交互的登录   shell   启动的，或者是一个非交互的   shell
       但是指定了     ----llooggiinn     选项，     它首先读取并执行     _/_e_t_c_/_p_r_o_f_i_l_e
       中的命令，只要那个文件存在。       读取那个文件之后，它以如下的顺序查找
       _~_/_._b_a_s_h___p_r_o_f_i_l_e,          _~_/_._b_a_s_h___l_o_g_i_n,         和         _~_/_._p_r_o_f_i_l_e,
       从存在并且可读的第一个文件中读取并执行其中的命令。          ----nnoopprrooffiillee
       选项可以用来在 shell 启动时阻止它这样做。

       当一个登录    shell   退出时，   bbaasshh   读取并执行文件   _~_/_._b_a_s_h___l_o_g_o_u_t
       中的命令，只要它存在。

       当一个交互的 shell 但不是登录  shell  启动时，  bbaasshh  从文件  _~_/_._b_a_s_h_r_c
       中读取并执行命令，只要它存在。可以用     ----nnoorrcc    选项来阻止它这样做。
       ----rrccffiillee _f_i_l_e  选项将强制  bbaasshh  读取并执行文件  _f_i_l_e  中的命令，而不是
       _~_/_._b_a_s_h_r_c 中的。

       当        bbaasshh        以非交互的方式启动时，例如在运行一个        shell
       脚本时，它在环境中查找变量                                     BBAASSHH__EENNVV
       ，如果它存在则将它的值展开，使用展开的值作为一个文件的名称，读取并执行。
       BBaasshh 运作的过程就如同执行了下列命令：
              if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi
       但是没有使用 PPAATTHH 变量的值来搜索那个文件名。

       如果     bbaasshh     以名称     sshh     启动，它试图模仿     (mimic)     sshh
       历史版本的启动过程，尽可能地相似，同时也遵循        POSIX        标准。
       当作为交互式登录   shell   启动时,或者是非交互但使用了   ----llooggiinn   选项
       启动的时候,它首先尝试读取并执行文件    _/_e_t_c_/_p_r_o_f_i_l_e    和   _~_/_._p_r_o_f_i_l_e,
       中的命令.     选项    ----nnoopprrooffiillee    用于避免这种行为.当使用命令     sshh
       来启动一个交互式的     shell     时,     bbaasshh     查找环境变量     EENNVV,
       如果有定义的话就扩展它的值,然后使用扩展后的值作为要读取和执行的文件
       的名称.由于使用  sshh  启动的 shell 不会读取和执行任何其他的启动文件,选项
       ----rrccffiillee      没有意义.使用名称      sshh      启动的非交互的       shell
       不会读取任何其他启动文件.当以  sshh  启动时,  bbaasshh 在读取启动文件之后进入
       _p_o_s_i_x 模式.

       当 bbaasshh 以 _p_o_s_i_x 模式启动时,(和使用 ----ppoossiixx  命令行参数效果相同),它遵循
       POSIX       标准.       这种模式下,交互式      shell      扩展      EENNVV
       环境变量的值,读取并执行以扩展后值为文件名的配置文件.  不会读取其他文件.

       BBaasshh 试着检测它是不是由远程 shell 守护程序,通常为 _r_s_h_d 启动的.如果 bbaasshh
       发现它是由    _r_s_h_d    启动的,它将读取并执行   _~_/_._b_a_s_h_r_c   文件中的命令,
       只要这个文件存在并且可读.如果以 sshh 命令启动,它不会这样做.  选项  ----nnoorrcc
       可以用来阻止这种行为,选项 ----rrccffiillee 用来强制读取另一个文件,但是通常 _r_s_h_d
       不会允许它们, 或者用它们来启动 shell.

       如果  shell  是以与真实用户(组)  id  不同的有效用户(组)  id   来启动的,
       并且没有  -- 选项,那么它不会读取启动文件, 也不会从环境中继承 shell 函数.
       环境变量中如果出现 SSHHEELLLLOOPPTTSS，， 它将被忽略.有效用户 id  将设置为真实用户
       id.                          如果启动时给出了                         --
       选项,那么启动时的行为是类似的, 但是不会重置有效用户 id.

定定义义((DDEEFFIINNIITTIIOONNSS))
       下列定义在文档余下部分中通用.
       bbllaannkk 空空白白
              一个空格或是 tab .
       wwoorrdd 词词
              一个字符序列,    shell    将它们视为一个结构单元.     也称为一个
              ttookkeenn片段。
       nnaammee 名名称称
              一个只由字母,数字和下划线构成的词,并且以字符或下划线起始.
              也称为一个 _w_o_r_d iiddeennttiiffiieerr标识符.
       mmeettaacchhaarraacctteerr 元元字字符符
              一个字符, 如果不是引用的话, 将成为词的分隔符. 它是如下字符之一:
              ||  && ;; (( )) << >> ssppaaccee ttaabb
       ccoonnttrrooll ooppeerraattoorr 控控制制操操作作符符
              一个 _t_o_k_e_n(标识), 拥有控制功能. 它是如下符号之一:
              |||| && &&&& ;; ;;;; (( )) || <<nneewwlliinnee>>

保保留留字字((""RREESSEERRVVEEDD WWOORRDDSS""))
       _R_e_s_e_r_v_e_d      _w_o_r_d_s(保留字)      是对       shell       有特殊意义的词.
       下列词被识别为保留的,     如果不是引用,    并且不是一个简单命令的起始词
       (参见下面的  sshheellll语语法法((""SSHHEELLLL  GGRRAAMMMMAARR""))  ),  也不是  ccaassee   或者   ffoorr
       命令的第三个词:

       !!  ccaassee  ddoo ddoonnee eelliiff eellssee eessaacc ffii ffoorr ffuunnccttiioonn iiff iinn sseelleecctt tthheenn uunnttiill
       wwhhiillee {{ }} ttiimmee [[[[ ]]]]

sshheellll语语法法((""SSHHEELLLL GGRRAAMMMMAARR""))
   SSiimmppllee CCoommmmaannddss 简简单单命命令令
       _s_i_m_p_l_e _c_o_m_m_a_n_d(简单命令) 是(可选的)一系列变量赋值, 紧接着是 bbllaannkk(空格)
       分隔的词和重定向,      然后以一个      _c_o_n_t_r_o_l      _o_p_e_r_a_t_o_r      结束.
       第一个词指明了要执行的命令,        它被作为第         0         个参数.
       其余词被作为这个命令的参数.

       _s_i_m_p_l_e  _c_o_m_m_a_n_d  简单命令的返回值是它的退出状态, 或是 128+_n, 如果命令被
       signal(信号) _n 结束的话.

   PPiippeelliinneess 管管道道
       _p_i_p_e_l_i_n_e(管道) 是一个或多个命令的序列，用字符 || 分隔。管道的格式是这样:

              [ttiimmee [--pp]] [ ! ] _c_o_m_m_a_n_d [ || _c_o_m_m_a_n_d_2 ... ]

       命令        _c_o_m_m_a_n_d        的标准输出通过管道连接到命令        _c_o_m_m_a_n_d_2
       的标准输入。连接是在命令指定的任何重定向之前进行的(参见下面的 RREEDDIIRREECCTT‐‐
       IIOONN 重重定定向向))。。

       如果保留字                                                            !!
       作为管道前缀，管道的退出状态将是最后一个命令的退出状态的逻辑非值。
       否则，管道的退出状态就是最后一个命令的。                          shell
       在返回退出状态值之前，等待管道中的所有命令返回。

       如果保留字                                                         ttiimmee
       作为管道前缀，管道中止后将给出执行管道耗费的用户和系统时间。  选项   --pp
       将使输出符合      POSIX      指定的格式。      环境变量      TTIIMMEEFFOORRMMAATT
       可以设置为一个格式字符串，指定时间信息应当如何显示；参见下面的    SShheellll
       VVaarriiaabblleess 环环境境变变量量 中 TTIIMMEEFFOORRMMAATT 的讲述。

       管道中的每个命令都作为单独的进程来执行(即，在一个子 shell 中启动)。

   LLiissttss 序序列列
       _l_i_s_t(序列)是一个或多个管道，用操作符   ;;,  &&,  &&&&,  或  ⎪⎪⎪⎪  分隔的序列,
       并且可以选择用 ;;, &&, 或 <<nneewwlliinnee>>新行符结束.

       这些序列操作符中，   &&&&   和   ⎪⎪⎪⎪   优先级相同，其次是    ;;    和    &&,,
       它们的优先级是相同的。

       序列中可以有一个或多个新行符来分隔命令，而不是使用分号分隔。

       如果一个命令是由控制操作符   &&   结束的,   shell   将在后台的子   shell
       中执行这个命令。 shell 不会等待命令执行结束，返回状态总是  0。以分号  ;;
       分隔的命令会被顺序执行；shell
       会等待每个命令依次结束。返回状态是最后执行的命令的返回状态。

       控制操作符 &&&& 和 ⎪⎪⎪⎪ 分别代表 AND 和 OR 序列。一个 AND 序列的形式是

              _c_o_m_m_a_n_d_1 &&&& _c_o_m_m_a_n_d_2

       _c_o_m_m_a_n_d_2 只有在 _c_o_m_m_a_n_d_1 返回 0 时才被执行。

       一个 OR 序列的形式是

              _c_o_m_m_a_n_d_1 ⎪⎪⎪⎪ _c_o_m_m_a_n_d_2

       _c_o_m_m_a_n_d_2  只有在  _c_o_m_m_a_n_d_1   返回非   0   状态时才被执行。AND   和   OR
       序列的返回状态是序列中最后执行的命令的返回状态。

   CCoommppoouunndd CCoommmmaannddss 复复合合命命令令
       _c_o_m_p_o_u_n_d _c_o_m_m_a_n_d(复合命令) 是如下情况之一：

       (_l_i_s_t) _l_i_s_t    序列将在一个子    shell   中执行。变量赋值和影响   shell
              环境变量的内建命令在命令结束后不会再起作用。
              返回值是序列的返回值。

       { _l_i_s_t; }
              _l_i_s_t                      序列将在当前                     shell
              环境中执行。序列必须以一个新行符或分号结束。      这种做法也称为
              _g_r_o_u_p  _c_o_m_m_a_n_d(命令组)。返回值是序列的返回值。注意与元字符 (( 和
              不同，        {{         和         }}         是         _r_e_s_e_r_v_e_d
              _w_o_r_d_s(保留字)，必须出现在能够识别保留字的场合。
              由于它们不会产生断词(cause                a                 word
              break)，它们和序列之间必须用空格分开。

       ((_e_x_p_r_e_s_s_i_o_n))
              表达式  _e_x_p_r_e_s_s_i_o_n  将被求值。求值规则在下面的  算算术术求求值值 ((AARRIITTHH‐‐
              MMEETTIICC   EEVVAALLUUAATTIIOONN))   章节中描述。如果表达式的值非零，返回值就是
              0；否则返回值是 1。这种做法和 lleett ""_e_x_p_r_e_s_s_i_o_n"" 等价。

       [[[[ _e_x_p_r_e_s_s_i_o_n ]]]]
              返回    0   或   1，取决于条件表达式   _e_x_p_r_e_s_s_i_o_n   求值的情况。
              表达式是由下面      CCOONNDDIITTIIOONNAALL      EEXXPPRREESSSSIIOONNSS      条条件件表表达达式式
              章节中描述的原语(primaries)       组成。      [[[[      和      ]]]]
              中的词不会进行词的拆分和路径的扩展处理；                 而tilde
              扩展，参数和变量扩展，算术扩展，命令替换，函数替换和引用的去除则都将进行。

              当使用                 ====                 和                  !!==
              操作符时，操作符右边的字符串被认为是一个模式，根据下面   PPaatttteerrnn
              MMaattcchhiinngg(模式匹配)   章节中的规则进行匹配。   如果匹配则返回值是
              0，否则返回
              1。模式的任何部分可以被引用，强制使它作为一个字符串而被匹配。

              表达式可以用下列操作符结合起来。根据优先级的降序列出如下：

              (( _e_x_p_r_e_s_s_i_o_n ))
                     返回表达式                                     _e_x_p_r_e_s_s_i_o_n
                     的值。括号可以用来提升操作符的优先级。
              !! _e_x_p_r_e_s_s_i_o_n
                     返回真，如果表达式 _e_x_p_r_e_s_s_i_o_n 返回假。
              _e_x_p_r_e_s_s_i_o_n_1 &&&& _e_x_p_r_e_s_s_i_o_n_2
                     返回真，如果表达式 _e_x_p_r_e_s_s_i_o_n_1 和 _e_x_p_r_e_s_s_i_o_n_2 都返回真。
              _e_x_p_r_e_s_s_i_o_n_1 |||| _e_x_p_r_e_s_s_i_o_n_2
                     返回真，如果表达式     _e_x_p_r_e_s_s_i_o_n_1    或者    _e_x_p_r_e_s_s_i_o_n_2
                     二者之一返回真。

              &&&&(与) 和 |||| 操作符不会对表达式 _e_x_p_r_e_s_s_i_o_n_2  求值，如果  _e_x_p_r_e_s_‐
              _s_i_o_n_1 可以决定整个条件表达式的返回值的话。

       ffoorr _n_a_m_e [ iinn _w_o_r_d ] ; ddoo _l_i_s_t ; ddoonnee
              iinn      之后的一系列词会被扩展，产生一个项目列表。变量      _n_a_m_e
              被依次赋以这个列表中的每个元素， 序列 _l_i_s_t 每次都被执行。如果 iinn
              _w_o_r_d   被忽略，那么   ffoorr  命令遍历  已设置的位置参数(positional
              parameter，参见下面的  PPAARRAAMMEETTEERRSS  参参数数))，，  为每一个执行一次序列
              _l_i_s_t。           返回值是最后一个命令的返回值。如果           iinn
              之后的词扩展的结果是空列表，就不会执行任何命令，返回值是 0。

       ffoorr (( _e_x_p_r_1 ; _e_x_p_r_2 ; _e_x_p_r_3 )) ; ddoo _l_i_s_t ; ddoonnee
              首先，算术表达式 _e_x_p_r_1 被根据下面 算算术术求求值值  ((AARRIITTHHMMEETTIICC  EEVVAALLUUAA‐‐
              TTIIOONN))        中的规则进行求值。       然后算术表达式       _e_x_p_r_2
              被循环求值，直到它等于  0。每次  _e_x_p_r_2   结果非零时，序列   _l_i_s_t
              都被执行，                    算术表达式                   _e_x_p_r_3
              被求值。如果任何表达式被忽略，将被视为执行结果是             1。
              返回值是序列     _l_i_s_t     中被执行的最后一个命令的返回值；或者是
              false，如果任何表达式非法的话。

       sseelleecctt _n_a_m_e [ iinn _w_o_r_d ] ; ddoo _l_i_s_t ; ddoonnee
              iinn
              之后的一系列词会被扩展，产生一个项目列表。这个扩展后的词集合被输出到标准错误上，每个前面
              加上一个数字。如果 iinn  _w_o_r_d  被忽略，将输出位置参数  (参见下面的
              PPAARRAAMMEETTEERRSS              参参数数             章节)。             PPSS33
              提示符将被显示出来，等待从标准输入得到一行输入。如果
              输入是一个数字且显示中有对应的词，那么变量                  _n_a_m_e
              的值将设置为这个词。如果输入一个空行，那么词和提示符将再次显示出来。如果读入了一个
              EOF，命令就结束。            任何其他值将设置变量           _n_a_m_e
              为空。读入的行保存为变量        RREEPPLLYY.         序列         _l_i_s_t
              在每次选择之后都会执行，直到执行了一个   bbrreeaakk   命令。   sseelleecctt
              的退出状态是序列                                            _l_i_s_t
              中执行的最后一个命令的退出状态，如果没有执行命令就是 0。

       ccaassee _w_o_r_d iinn [ [(] _p_a_t_t_e_r_n [ || _p_a_t_t_e_r_n ] ... ) _l_i_s_t ;; ] ... eessaacc
              ccaassee  命令首先扩展  _w_o_r_d,  然后依次试着用每个 _p_a_t_t_e_r_n 来匹配它，
              使用与路径扩展相同的匹配规则(参见下面的    PPaatthhnnaammee    EExxppaannssiioonn
              路路径径扩扩展展
              章节)。如果找到一个匹配，相应的序列将被执行。找到一个匹配之后，不会再尝试其后的匹配。
              如果没有模式可以匹配，返回值是
              0。否则，返回序列中最后执行的命令的返回值。

       iiff _l_i_s_t; tthheenn _l_i_s_t_; [ eelliiff _l_i_s_t; tthheenn _l_i_s_t; ] ... [ eellssee _l_i_s_t; ] ffii
              序列    iiff    _l_i_s_t    被执行。如果退出状态是    0，tthheenn     _l_i_s_t
              将被执行。否则，每个 eelliiff 将被一次执行，如果退出状态是 0，相应的
              tthheenn     _l_i_s_t     将被执行，命令结束。      否则，eellssee      _l_i_s_t
              将被执行，如果存在的话。
              退出状态是最后执行的命令的退出状态，或者是
              0，如果所有条件都不满足。

       wwhhiillee _l_i_s_t; ddoo _l_i_s_t; ddoonnee
       uunnttiill _l_i_s_t; ddoo _l_i_s_t; ddoonnee
              wwhhiillee 命令不断地执行序列 ddoo _l_i_s_t，直到序列中最后一个命令返回 0。
              uunnttiill 命令和 wwhhiillee  命令等价，除了对条件的测试恰好相反；序列  ddoo
              _l_i_s_t  执行直到序列中最后一个命令返回非零状态值。  wwhhiillee 和 uunnttiill
              命令的退出状态是序列 ddoo _l_i_s_t  中最后一个命令的退出状态，  或者是
              0，如果没有执行任何命令。

       [ ffuunnccttiioonn ] _n_a_m_e () { _l_i_s_t; }
              这样可以定义一个名为  _n_a_m_e  的函数。函数体  _b_o_d_y 是包含在 { 和 }
              之间的命令序列          _l_i_s_t。           在指定将           _n_a_m_e
              作为一个命令运行的场合，这个序列将被执行。
              函数的退出状态是函数体最后执行的命令的退出状态(参见下面的  FFUUNNCC‐‐
              TTIIOONNSS 函函数数 章节)。

注注释释((CCOOMMMMEENNTTSS))
       在非交互的  shell  中或者使用内建命令 sshhoopptt 启用了 iinntteerraaccttiivvee__ccoommmmeennttss
       选项的交互的               shell                中，以                ##
       起始的词使得这个词和所有同一行上所有剩余的字符都被忽略。没有启用 iinntteerr‐‐
       aaccttiivvee__ccoommmmeennttss  选项的交互式  shell   不允许出现注释。这个选项在交互式
       shell 中是默认启用的 (参见下面的 sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS))
       章节)。

引引用用((QQUUOOTTIINNGG))
       引用                                                            _Q_u_o_t_i_n_g
       用来去掉特定字符或词的特殊意义。引用可以用来禁止对特殊字符的处理，
       阻止保留字被识别，还用来阻止参数的扩展。

       上面在 DDEEFFIINNIITTIIOONNSS 定定义义 中列出的每个元字符  _m_e_t_a_c_h_a_r_a_c_t_e_r_s  对于  shell
       都有特殊意义。如果要表达它的本义，必须引用它。

       在使用命令行历史扩展功能时，_h_i_s_t_o_r_y        _e_x_p_a_n_s_i_o_n       字符，通常是
       !!，必须被引用，才不会进行历史扩展。

       有三种引用机制：转义字符 _(_e_s_c_a_p_e _c_h_a_r_a_c_t_e_r_), 单引号和双引号。

       一个未被引用的反斜杠     (\\)     是转义字符     _e_s_c_a_p_e      _c_h_a_r_a_c_t_e_r。
       它保留其后下一个字符的字面意义，除非那是一个新行符。       如果       \\
       和新行符成对出现，并且反斜杠自身没有被引用，那么             \\<newline>
       被视为续行标志 (意思是，它被从输入流中删除并忽略了)。

       将字符放在单引号之中，将保留引用中所有字符的字面意义。单引号不能包含在单引号引用之中，即使前面加上了反斜杠。

       将字符放在双引号中，同样保留所有字符的字面意义，例外的情况是 $$,  ``,  和
       \\。               字符               $$               和               ``
       在双引号中仍然具有特殊意义。反斜杠只有后面是下列字符时才有特殊意义： $$,
       ``,              "",             \\,             或             <<nneewwlliinnee>>.
       双引号可以包含在双引号引用中，但要在前面加上一个反斜杠。

       特殊的参数  **  和  @@  在双引号中有特殊意义(参见下面的  PPAARRAAMMEETTEERRSS  参参数数
       章节)。

       形式为              $$'_s_t_r_i_n_g'              的词会被特殊处理。它被扩展为
       _s_t_r_i_n_g，其中的反斜杠转义字符          被替换为          ANSI          C
       标准中规定的字符。反斜杠转义序列，如果存在的话，将做如下转换：
              \\aa     alert (bell) 响铃
              \\bb     backspace 回退
              \\ee     an escape character 字符 Esc
              \\ff     form feed 进纸
              \\nn     new line 新行符
              \\rr     carriage return 回车
              \\tt     horizontal tab 水平跳格
              \\vv     vertical tab 竖直跳格
              \\\\     backslash 反斜杠
              \\''     single quote 单引号
              \\_n_n_n   一个八比特字符，它的值是八进制值 _n_n_n (一到三个数字)。
              \\xx_H_H   一个八比特字符，它的值是十六进制值                     _H_H
                     (一到两个十六进制数字)。
              \\cc_x    一个 ctrl-_x 字符

       扩展结果是单引号引用的，就好像 $ 符号不存在一样。

       双引号引用字符串前面加上一个  $$  符号将使得这个字符串被根据当前语言环境
       (locale)  来翻译。  如果当前语言环境是 CC 或者 PPOOSSIIXX，这个符号将被忽略。
       如果这个字符串被翻译并替换了，那么替换结果是双引号引用的。

参参数数((PPAARRAAMMEETTEERRSS))
       一个参数    _p_a_r_a_m_e_t_e_r    是一个储存值的实体。它可以是一个名称     _n_a_m_e,
       一个数字或者是下面          SSppeecciiaall         PPaarraammeetteerrss         特特殊殊参参数数
       章节中列出的特殊字符之一。从   shell   的角度来看，一个变量    _v_a_r_i_a_b_l_e
       是一个由名称 _n_a_m_e 代表的参数。一个变量有一个值 _v_a_l_u_e 以及零个或多个属性
       _a_t_t_i_b_u_t_e_s。属性可以使用内建命令    ddeeccllaarree    来设置(参见下面     sshheellll
       内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节中对 ddeeccllaarree 的描述)。

       如果给一个参数赋值，那么它就被定义了。空字符串是有效的值。一旦一个变量被定义了，它只能用内建命令
       uunnsseett 来取消(参见下面 sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节).

       一个变量 _v_a_r_i_a_b_l_e 可以用这样的语句形式来赋值：

              _n_a_m_e=[_v_a_l_u_e]

       如果没有给出值     _v_a_l_u_e_，     变量就被赋为空字符串。所有值      _v_a_l_u_e_s
       都经过了波浪线扩展，参数和变量扩展，命令替换，算术扩展和引用的删除(参见下面的
       EEXXPPAANNSSIIOONN 扩扩展展 章节)。如果变量设置了 iinntteeggeerr  整整数数  属性，那么值  _v_a_l_u_e
       将进行算术扩展，即使没有应用   $((...))   扩展  (参见下面的  AArriitthhmmeettiicc
       EExxppaannssiioonn 算算术术扩扩展展 章节)。 不会进行词的拆分，除非是下面 SSppeecciiaall PPaarraammee‐‐
       tteerrss               特特殊殊参参数数               中提到的               ""$$@@""。
       不会进行路径的扩展。赋值语句也出现在下列内建命令中，作为它们的参数：
       ddeeccllaarree, ttyyppeesseett, eexxppoorrtt, rreeaaddoonnllyy, 和 llooccaall 。

   PPoossiittiioonnaall PPaarraammeetteerrss 位位置置参参数数
       位置参数    _p_o_s_i_t_i_o_n_a_l    _p_a_r_a_m_e_t_e_r    是以一或多个数字代表的参数，除了
       0。位置参数是在 shell  启动时，根据它的参数来赋值的，  也可以用内建命令
       sseett        来重新赋值。位置参数不能用赋值语句来赋值。在一个       shell
       函数被执行的时候，位置参数会被暂时地替换掉 (参见下面的  FFUUNNCCTTIIOONNSS  函函数数
       章节)。

       当位置参数由两个以上的数字构成时，它必须放在括号内  (参见下面的  EEXXPPAANN‐‐
       SSIIOONN 扩扩展展 章节)。

   SSppeecciiaall PPaarraammeetteerrss 特特殊殊参参数数
       shell 对一些参数做特殊处理。这些参数只能被引用而不能被赋值。
       **      扩展为位置参数，从                                             1
              开始。如果扩展发生在双引号中，它扩展为一个词，值是各个参数，以特殊变量
              IIFFSS 的第一个字符分隔。也就是说，"$$**" 等价于 "$$11_c$$22_c......"，这里  _c
              是变量        IIFFSS        的第一个字符。如果没有设置        IIFFSS，，
              那么参数将用空格分隔。 IIFFSS
       @@      扩展为位置参数，从                                             1
              开始。如果扩展发生在双引号中，每个参数都将扩展为一个词。也就是说，
              "$$@@"  等价于  "$$11"  "$$22"  ...   如果位置参数不存在，"$$@@"  和  $$@@
              扩展为空 (即，它们被删除了)。
       ##      扩展为位置参数的个数，以十进制表示。
       ??      扩展为最近执行的前台管道的状态。
       --      扩展为当前选项标志。标志是在启动时或以内建命令               sseett
              指定的，或者是 shell 自身设置的 (例如选项 --ii )。
       $$      扩展为 shell 的进程  ID。在一个  ()  子  shell  中，它扩展为当前
              shell 的 进程 ID 而不是子 shell 的。
       !!      扩展为最近一次执行的后台 (异步) 命令的进程号。
       00      扩展为   shell   或者   shell   脚本的名称。这个变量是在   shell
              初始化时设置的。如果    bbaasshh     是执行脚本文件时启动的，     $$00
              将设置为那个文件的名称。如果  bbaasshh 启动时的参数包含 --cc，， 那么 $$00
              被设置为启动命令行被执行后的第一个参数，如果有的话。否则，它被设置为用来启动
              bbaasshh 的文件名，就是参数 0。
       __      shell     启动时，设置为     shell     或参数中被执行的    shell
              脚本的绝对路径名。
              然后，在扩展时扩展为上一个命令的最后一个参数。它也被设置为被执行的每个命令的文件全名并且
              被设置到这个命令执行的环境当中。当检查邮件时，这个参数保存着正在检查的邮件文件的名称。

   SShheellll VVaarriiaabblleess 变变量量
       shell 定义了下列变量：

       BBAASSHH   扩展为用来启动当前 bbaasshh 实例的文件全名。
       BBAASSHH__VVEERRSSIINNFFOO
              一个只读数组变量，成员保存着当前                            bbaasshh
              实例的版本信息。赋予数组元素的值是如下这些：
              BBAASSHH__VVEERRSSIINNFFOO[[0]]        主版本号 (_r_e_l_e_a_s_e).
              BBAASSHH__VVEERRSSIINNFFOO[[1]]        次版本号 (_v_e_r_s_i_o_n).
              BBAASSHH__VVEERRSSIINNFFOO[[2]]        补丁版本
              BBAASSHH__VVEERRSSIINNFFOO[[3]]        编译信息
              BBAASSHH__VVEERRSSIINNFFOO[[4]]        发布时的状态 (例如, _b_e_t_a_1).
              BBAASSHH__VVEERRSSIINNFFOO[[5]]        MMAACCHHTTYYPPEE 平台类型

       BBAASSHH__VVEERRSSIIOONN
              扩展为一个字符串，描述了这个 bbaasshh.  实例的版本。

       CCOOMMPP__CCWWOORRDD
              $${{CCOOMMPP__WWOORRDDSS}}                 的索引，指向当前光标位置所在的词。
              这个变量只有在被可编程补全功能  (参见下面的 PPrrooggrraammmmaabbllee CCoommppllee‐‐
              ttiioonn 章节) 调用的 shell 函数中才可用。

       CCOOMMPP__LLIINNEE
              当前命令行。这个变量只有在被命令补全功能调用的             shell
              函数和外部命令中才可用。

       CCOOMMPP__PPOOIINNTT
              相对于当前命令起始处的当前光标位置。如果当前光标位置是当前命令的末端，
              它的值就和                 $${{##CCOOMMPP__LLIINNEE}}                  相等。
              这个变量只有在被命令补全功能调用的                         shell
              函数和外部命令中才可用。

       CCOOMMPP__WWOORRDDSS
              一个数组变量                                         (参见下面的
              AArrrraayyss(数组)一节)，由当前命令行的各个单词构成。
              这个变量只有在被命令补全功能调用的 shell 函数中才可用。

       DDIIRRSSTTAACCKK
              一个数组变量，包含当前目录栈的内容。栈中的目录排列的顺序就是用内建命令
              ddiirrss
              显示时的顺序。对这个数组变量的成员赋值可以用来修改栈中已有的目录，但是要添加和删除目录就必须使用
              内建命令  ppuusshhdd  和  ppooppdd。。 对它赋值不会改变当前目录。如果取消了
              DDIIRRSSTTAACCKK 的定义，它就失去了它的特殊意义，即使后来重新定义它。

       EEUUIIDD   扩展为当前用户的有效用户 ID。它在 shell 启动时设置。它是只读的。

       FFUUNNCCNNAAMMEE
              当前执行的    shell     函数名。这个变量只有在执行一个     shell
              函数时存在。向 FFUUNNCCNNAAMMEE 赋值没有效果并且返回一个错误。如果取消了
              FFUUNNCCNNAAMMEE 的定义，它就失去了特殊的意义，即使后来重新定义它。

       GGRROOUUPPSS 一个数组变量，包含当前用户所属的组的列表。向              GGRROOUUPPSS
              赋值没有效果并且返回一个错误。如果取消了                  GGRROOUUPPSS
              的定义，它就失去了特殊的意义，即使后来重新定义它。

       HHIISSTTCCMMDD
              当前命令的历史编号，或者历史列表中的索引。如果取消了     HHIISSTTCCMMDD
              的定义，它就失去了特殊的意义，即使后来重新定义它。

       HHOOSSTTNNAAMMEE
              自动设置为当前的主机名。

       HHOOSSTTTTYYPPEE
              自动设置为一个字符串，唯一地标识着正在运行                  bbaasshh
              的机器类型。默认值是系统相关的。

       LLIINNEENNOO 每次引用这个参数时，shell
              将它替换为一个指示在脚本或函数中当前行号的十进制数字(从        1
              开始)。
              如果不是在脚本或函数中，替换得到的值不一定有意义。如果取消了
              LLIINNEENNOO 的定义，它就失去了特殊的意义，即使后来重新定义它。

       MMAACCHHTTYYPPEE
              自动设置为一个字符串，完整的描述了正在运行                  bbaasshh
              的系统类型，格式是标准的          GNU         _c_p_u_-_c_o_m_p_a_n_y_-_s_y_s_t_e_m
              格式。默认值是系统相关的。

       OOLLDDPPWWDD 上一次命令 ccdd 设置的工作目录。

       OOPPTTAARRGG 内建命令  ggeettooppttss  处理的最后一个选项参数值  (参见下面的   sshheellll
              内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节)。

       OOPPTTIINNDD 内建命令   ggeettooppttss  将处理的下一个参数的索引  (参见下面的  sshheellll
              内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节)。

       OOSSTTYYPPEE 自动设置的一个字符串，描述了正在运行                        bbaasshh
              的操作系统。默认值是系统相关的。

       PPIIPPEESSTTAATTUUSS
              一个数组变量           (参见下面的          AArrrraayyss          数数组组
              章节)，包含最近执行的前台管道中的进程(可能只包含一个命令)的退出状态。

       PPPPIIDD   shell 的父进程的进程号。这个变量是只读的。

       PPWWDD    由 ccdd 命令设置的当前工作目录。

       RRAANNDDOOMM 每次引用这个参数时，都会产生一个        0        到        32767
              之间的随机整数。可以通过向                                RRAANNDDOOMM
              赋值来初始化随机数序列。如果取消了                        RRAANNDDOOMM
              的定义，它就失去了特殊的意义，即使后来重新定义它。

       RREEPPLLYY  变量的值将作为内建命令 rreeaadd 的输入，如果命令没有参数的话。

       SSEECCOONNDDSS
              每次引用这个参数时，返回 shell 自运行以来的秒数。如果向  SSEECCOONNDDSS
              赋值，此后对它的引用将返回自赋值时起的秒数加上所赋予的值。如果取消
              SSEECCOONNDDSS 的定义，它就失去了特殊的意义，即使后来重新定义它。

       SSHHEELLLLOOPPTTSS
              一个冒号分隔的被允许的 shell  选项列表。列表中每个词都是内置命令
              sseett  的  --oo  选项的有效参数。  SSHHEELLLLOOPPTTSS 中出现的选项也是 sseett --oo
              显示为             _o_n             的选项。如果              bbaasshh
              启动时从环境中找到这个变量，那么在读取任何配置文件之前，列表中的每个选项都将被设置。这个变量是只读的。

       SSHHLLVVLL  每次启动一个 bbaasshh 的实例时都会增加。

       UUIIDD    扩展为当前用户的 ID，在启动时初始化。这个变量是只读的。

       下列变量被              shell              使用。有时              bbaasshh
       会为变量赋默认值；这些情况在下面会标出。

       BBAASSHH__EENNVV
              如果              bbaasshh              在执行一个             shell
              脚本时设定了这个变量，它的值将被解释为一个文件名，  包含着初始化
              shell     用到的命令，就像     _~_/_._b_a_s_h_r_c    中一样。    BBAASSHH__EENNVV
              的值在被解释为一个文件名之前要经过参数扩展，命令替换和算术扩展。不会使用
              PPAATTHH 来查找结果文件名。
       CCDDPPAATTHH 命令  ccdd  的搜索路径。这是一个冒号分隔的目录列表，shell 从中查找
              ccdd 命令的目标目录。可以是这样： ".:~:/usr".
       CCOOLLUUMMNNSS
              用在内建命令   sseelleecctt   当中，用来判断输出选择列表时的终端宽度。
              自动根据 SIGWINCH 信号来设置。
       CCOOMMPPRREEPPLLYY
              一个数组变量，bbaasshh                      从中读取可能的命令补全。
              它是由命令补全功能调用的 shell 函数产生的。
       FFCCEEDDIITT 内建命令 ffcc 默认的编辑器。
       FFIIGGNNOORREE
              一个冒号分隔的后缀名列表，在进行文件名补全时被忽略   (参见下面的
              RREEAADDLLIINNEE
              章节)。一个后缀满足其中之一的文件名被排除在匹配的文件名之外。可以是这样：
              ".o:~".
       GGLLOOBBIIGGNNOORREE
              一个冒号分隔的模式列表，定义了路径名扩展时要忽略的文件名集合。
              如果一个文件名与路径扩展模式匹配，同时匹配            GGLLOOBBIIGGNNOORREE
              中的一个模式时，它被从匹配列表中删除。
       HHIISSTTCCOONNTTRROOLL
              如果设置为            _i_g_n_o_r_e_s_p_a_c_e,            以           ssppaaccee
              开头的行将不会插入到历史列表中。如果设置为           _i_g_n_o_r_e_d_u_p_s,
              匹配上一次历史记录的行将不会插入。设置为              _i_g_n_o_r_e_b_o_t_h
              会结合这两种选项。如果没有定义，或者设置为其他值，所有解释器读取的行都将存入历史列表，
              但还要经过   HHIISSTTIIGGNNOORREE   处理。这个变量的作用可以被  HHIISSTTIIGGNNOORREE
              替代。多行的组合命令的第二和其余行都不会被检测，不管 HHIISSTTCCOONNTTRROOLL
              是什么，都会加入到历史中。
       HHIISSTTFFIILLEE
              保存命令历史的文件名  (参见下面的  HHIISSTTOORRYY  历历史史 章节)。默认值是
              _~_/_._b_a_s_h___h_i_s_t_o_r_y。如果取消定义，在交互式       shell       退出时
              命令历史将不会保存。
       HHIISSTTFFIILLEESSIIZZEE
              历史文件中包含的最大行数。当为这个变量赋值时，如果需要的话，历史文件将被截断
              来容纳不超过这个值的行。默认值是   500。历史文件在交互式   shell
              退出时 也会被截断到这个值。
       HHIISSTTIIGGNNOORREE
              一个冒号分隔的模式列表，用来判断那个命令行应当保存在历史列表中。每个模式
              都定位于行首，必须匹配整行  (没有假定添加  `**')。在  HHIISSTTCCOONNTTRROOLL
              指定的测试结束后，这里的每个模式都要被测试。除了平常的     shell
              模式匹配字符，             `&&'             匹配上一个历史行。`&&'
              可以使用反斜杠来转义；反斜杠在
              尝试匹配之前将被删除。多行的组合命令的第二行以及后续行都不会被测试，不管
              HHIISSTTIIGGNNOORREE 是什么，都将加入到历史中。
       HHIISSTTSSIIZZEE
              命令历史中保存的历史数量      (参见下面的      HHIISSTTOORRYY      历历史史
              章节)。默认值是 500。
       HHOOMMEE   当前用户的个人目录；内建命令                                  ccdd
              的默认参数。在执行波浪线扩展时也用到这个变量。
       HHOOSSTTFFIILLEE
              包含一个格式和       _/_e_t_c_/_h_o_s_t_s      相同的文件名，当      shell
              需要补全主机名时要读取它。shell                       运行过程中
              可以改变可能的主机名补全列表；改变之后下一次需要主机名补全时
              bbaasshh     会将新文件的内容添加到旧列表中。如果定义了     HHOOSSTTFFIILLEE
              但是没有赋值，bbaasshh             将尝试读取             _/_e_t_c_/_h_o_s_t_s
              文件来获得可能的主机名补全列表。当取消                  HHOOSSTTFFIILLEE
              的定义时，主机名列表将清空。
       IIFFSS    内部字段分隔符          _I_n_t_e_r_n_a_l         _F_i_e_l_d         _S_e_p_a_r_a_t_o_r
              用来在扩展之后进行分词，使用内部命令 rreeaadd 将行划分成词。默认值是
              ``<space><tab><newline>''。
       IIGGNNOORREEEEOOFF
              控制交互式           shell           接受到唯一一个          EEOOFF
              字符时的行为。如果有定义，值是需要在一行的开始连续输入       EEOOFF
              字符，直到可以使                                            bbaasshh
              退出的字符个数。如果这个变量存在，但是值不是一个数字或者没有赋值，默认值是
              10。 如果变量没有定义， EEOOFF 标志着输入的结束。
       IINNPPUUTTRRCC
              rreeaaddlliinnee   的启动配置文件，而不是默认的  _~_/_._i_n_p_u_t_r_c  (参见下面的
              RREEAADDLLIINNEE 章节)。
       LLAANNGG   用来决定没有特地用 LLCC__ 变量指定的语言环境项。
       LLCC__AALLLL 这个变量超越了 LLAANNGG 和所有其他指定语言环境项的 LLCC__ 变量。
       LLCC__CCOOLLLLAATTEE
              这个变量决定了为路径扩展的结果排序时的字母顺序，决定了范围表达式的行为，
              等价类，和路径扩展中的归并顺序以及模式匹配。
       LLCC__CCTTYYPPEE
              这个变量决定了字符的解释和路径扩展以及模式匹配中字符类的行为。
       LLCC__MMEESSSSAAGGEESS
              这个变量决定了翻译以 $$ 前导的双引号字符串时的语言环境。
       LLCC__NNUUMMEERRIICC
              这个变量决定了格式化数字时的语言环境分类。
       LLIINNEESS  内建命令  sseelleecctt  用它来判断输出选择列表时的列宽度。在收到  SIG‐
              WINCH 信号时自动设置。
       MMAAIILL   如果这个参数设置为一个文件名，并且没有设置环境变量      MMAAIILLPPAATTHH
              的话， bbaasshh 将在这个文件中通知用户有邮件到达。
       MMAAIILLCCHHEECCKK
              指定    bbaasshh    检查邮件的频率是多少，以秒为单位。默认值是    60
              秒。需要检查邮件的时候，shell       在显示提示符之前将进行检查。
              如果取消它的定义，或者设置为并非大于等于零的数值，shell
              将禁止邮件检查。
       MMAAIILLPPAATTHH
              一个冒号分隔的文件名列表，从中检查邮件。当邮件到达某个特殊文件中时，输出的特定消息可以
              通过将文件名与消息以    `?'    分隔来指定。   在消息的文本中，$$__
              扩展为当前邮件文件的文件名。例如：
              MMAAIILLPPAATTHH='/var/mail/bfox?"You  have  mail":~/shell-mail?"$_  has
              mail!"'
              BBaasshh
              为这个变量提供默认值，但是它使用的用户邮件文件的位置是系统相关的
              (例如，/var/mail/$$UUSSEERR)。
       OOPPTTEERRRR 如果设置为   1，   bbaasshh   显示内建命令   ggeettooppttss  产生的错误消息
              (参见下面的 sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN  CCOOMMMMAANNDDSS))  章节)。每次
              shell 启动时或者一个 shell 脚本被执行时 OOPPTTEERRRR 被初始化为 1。
       PPAATTHH   搜索命令的路径。它是一个冒号分割的目录列表，shell   从中搜索命令
              (参见下面的             命命令令执执行行((CCOOMMMMAANNDD              EEXXEECCUUTTIIOONN))
              段落)。默认的路径是系统相关的，是由安装                     bbaasshh
              的系统管理员设置的。通常它的值是
              ``/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin:.''。
       PPOOSSIIXXLLYY__CCOORRRREECCTT
              如果  bbaasshh  启动环境中有这个变量，它将在读取启动配置文件之前进入
              _p_o_s_i_x  _m_o_d_e，就好像提供了   ----ppoossiixx   启动参数一样。如果   shell
              运行过程中设置了它，bbaasshh  就启用 _p_o_s_i_x _m_o_d_e，就好像执行了 _s_e_t _-_o
              _p_o_s_i_x 命令一样。
       PPRROOMMPPTT__CCOOMMMMAANNDD
              如果有定义，它的值将作为一个命令，每次显示主提示符之前都会执行。
       PPSS11    这个参数的值被扩展      (参见下面的       PPRROOMMPPTTIINNGG       提提示示符符
              段落)，用作主提示符字符串。默认值是 ``\\ss--\\vv\\$$ ''。
       PPSS22    这个参数的值同  PPSS11 一起被扩展，用作次提示符字符串。默认值是 ``>>
              ''。
       PPSS33    这个参数的值被用作内建命令  sseelleecctt  的提示符  (参见上面的  SSHHEELLLL
              GGRRAAMMMMAARR 语语法法 章节)。
       PPSS44    这个参数的值同      PPSS11      一起被扩展，在执行跟踪中在     bbaasshh
              显示每个命令之前显示。需要的话，                             PPSS44
              的第一个字符会被复制多次，来指示   indirection  的层数。默认值是
              ``++ ''。
       TTIIMMEEFFOORRMMAATT
              在前缀     time     保留字的管道中，这个参数的值用作格式字符串，
              指定计时信息如何显示。字符    %%   引入的转义序列，被扩展为时间值
              或其他信息。转义序列和它们的含义如下所示；括号中是可选的成分。
              %%%%        一个字面上的 %%。
              %%[[_p]][[ll]]RR  经历的时间，以秒计算。
              %%[[_p]][[ll]]UU  CPU 在用户模式下执行的秒数。
              %%[[_p]][[ll]]SS  CPU 在系统模式下执行的秒数。
              %%PP        CPU 使用率，算法是 (%U + %S) / %R。

              可选的  _p  是指定精度  (小数点后数字位数)  的数值。   如果是   0
              就不输出小数点或小数值。最多指定到小数点后三位；  如果  _p 大于 3
              就会被改为 3。如果没有指定 _p，默认使用 3。

              可选的   ll    指定了长格式，包含分钟，格式是    _M_Mm_S_S._F_Fs。    _p
              的值决定了是不是包含小数位。

              如果没有设置这个值，bbaasshh                            假定它的值是
              $$''\\nnrreeaall\\tt%%33llRR\\nnuusseerr\\tt%%33llUU\\nnssyyss%%33llSS''。
              如果它是空值，就不会显示计时信息。显示格式字符串的时候，会加上
              一个前导的新行符。

       TTMMOOUUTT  如果设置为大于  0  的值，TTMMOOUUTT  被当作内建命令  rreeaadd  的默认超时
              等待时间。如果等待终端输入时， TTMMOOUUTT 秒之后仍然没有输入， sseelleecctt
              命令将终止。在交互的       shell        中，它的值被解释为显示了
              主提示符之后等待输入的秒数。如果经过这个秒数之后仍然没有输入，
              BBaasshh 将退出。

       aauuttoo__rreessuummee
              这个变量控制了                                             shell
              如何与用户和作业控制交互。如果设置了这个变量，
              一个不包含重定向的单个词的简单命令，将作为恢复被中断的作业的指示。
              不允许出现模棱两可的情况；如果有多个作业都以这个词起始，将恢复最近运行
              的作业。在这种情形下，被中断的作业的                        _n_a_m_e
              是用于启动它的命令行。如果值设置为                       _e_x_a_c_t_，
              给出的字符串必须精确匹配被中断的作业名；如果设置为   _s_u_b_s_t_r_i_n_g，
              给出的字符串需要匹配被中断的作业名的子串。值           _s_u_b_s_t_r_i_n_g
              的功能与作业标识符 %%??  功能类似 (参见下面的 JJOOBB CCOONNTTRROOLL 作作业业控控制制
              章节)。如果设置为任何其他值，给出的字符串必须是被中断的作业的前缀；
              这样做与作业标识符 %% 功能类似。

       hhiissttcchhaarrss
              两到三个字符，控制着历史扩展和分段     (tokenization，参见下面的
              HHIISSTTOORRYY  EEXXPPAANNSSIIOONN  历历史史扩扩展展  章节)。第一个字符是 _h_i_s_t_o_r_y _e_x_p_a_n_‐
              _s_i_o_n(历史扩展) 字符， 这个字符表明了历史扩展的开始，通常是 `!!'。
              第二个字符是       _q_u_i_c_k      _s_u_b_s_t_i_t_u_t_i_o_n(快速替换)      字符，
              它是重新运行上次输入的命令，但将命令中的字符串替换为另一个的简写，
              默认是     `^^'。可选的第三个字符是指示如果作为一个词的开始，那么
              一行中剩余字符是注释。通常这个字符是       `##'。历史注释字符使得
              对一行中剩余字符在历史替换中被跳过。它不一定使   shell  解释器将
              这一行的剩余部分当作注释。

   AArrrraayyss
       BBaasshh  提供了一维数组变量。任何变量都可以作为一个数组；内建命令  ddeeccllaarree
       可以显式地定义数组。数组的大小没有上限，也没有限制在连续对成员引用和
       赋值时有什么要求。数组以整数为下标，从 0 开始。

       如果变量赋值时使用语法  _n_a_m_e[_s_u_b_s_c_r_i_p_t]=_v_a_l_u_e，  那么就会自动创建数组。
       _s_u_b_s_c_r_i_p_t           被当作一个算术表达式，结果必须是大于等于          0
       的值。要显式地定义一个数组，使用  ddeeccllaarree  --aa  _n_a_m_e  (参见下面的  sshheellll
       内内建建命命令令((SSHHEELLLL  BBUUIILLTTIINN  CCOOMMMMAANNDDSS)) 章节)。也可以用 ddeeccllaarree --aa _n_a_m_e[[_s_u_b_‐
       _s_c_r_i_p_t]] 这时  _s_u_b_s_c_r_i_p_t 被忽略。数组变量的属性可以用内建命令 ddeeccllaarree 和
       rreeaaddoonnllyy 来指定。每个属性对于所有数组元素都有效。

       数组赋值可以使用复合赋值的方式，形式是     _n_a_m_e=((value_1     ...    val‐
       ue_n))，这里每个     _v_a_l_u_e     的形式都是      [_s_u_b_s_c_r_i_p_t]=_s_t_r_i_n_g。_s_t_r_i_n_g
       必须出现。如果出现了可选的括号和下标，将为这个下标赋值，否则
       被赋值的元素的下标是语句中上一次赋值的下标加一。下标从     0     开始。
       这个语法也被内建命令 ddeeccllaarree 所接受。单独的数组元素可以用上面介绍的语法
       _n_a_m_e[_s_u_b_s_c_r_i_p_t]=_v_a_l_u_e 来赋值。

       数组的任何元素都可以用           ${_n_a_m_e[_s_u_b_s_c_r_i_p_t]}            来引用。
       花括号是必须的，以避免和路径扩展冲突。如果    _s_u_b_s_c_r_i_p_t   是   @@   或是
       **，它扩展为                      _n_a_m_e                      的所有成员。
       这两种下标只有在双引号中才不同。在双引号中，${_n_a_m_e[*]}   扩展为一个词，
       由所有数组成员的值组成，用特殊变量 IIFFSS 的第一个字符分隔；${_n_a_m_e[@]}  将
       _n_a_m_e        的每个成员扩展为一个词。       如果数组没有成员，${_n_a_m_e[@]}
       扩展为空串。这种不同类似于特殊参数 ** 和 @@  的扩展  (参见上面的  SSppeecciiaall
       PPaarraammeetteerrss    段落)。${#_n_a_m_e[_s_u_b_s_c_r_i_p_t]}    扩展为   ${_n_a_m_e[_s_u_b_s_c_r_i_p_t]}
       的长度。如果          _s_u_b_s_c_r_i_p_t          是          **           或者是
       @@，扩展结果是数组中元素的个数。引用没有下标数组变量等价于 引用元素 0。

       内建命令  uunnsseett  用于销毁数组。uunnsseett  _n_a_m_e[_s_u_b_s_c_r_i_p_t] 将销毁下标是 _s_u_b_‐
       _s_c_r_i_p_t 的元素。 uunnsseett _n_a_m_e, 这里 _n_a_m_e 是一个数组，或者 uunnsseett  _n_a_m_e[_s_u_b_‐
       _s_c_r_i_p_t], 这里 _s_u_b_s_c_r_i_p_t 是 ** 或者是 @@，将销毁整个数组。

       内建命令     ddeeccllaarree,     llooccaall,     和     rreeaaddoonnllyy     都能接受    --aa
       选项，从而指定一个数组。内建命令        rreeaadd        可以接受         --aa
       选项，从标准输入读入一列词来为数组赋值。内建命令    sseett    和   ddeeccllaarree
       使用一种可以重用为输入的格式来显示数组元素。

扩扩展展((EEXXPPAANNSSIIOONN))
       命令行的扩展是在拆分成词之后进行的。有七种类型的扩展：   _b_r_a_c_e   _e_x_p_a_n_‐
       _s_i_o_n(花括号扩展),  _t_i_l_d_e  _e_x_p_a_n_s_i_o_n(波浪线扩展), _p_a_r_a_m_e_t_e_r _a_n_d _v_a_r_i_a_b_l_e
       _e_x_p_a_n_s_i_o_n(参数和变量扩展), _c_o_m_m_a_n_d  _s_u_b_s_t_i_t_u_t_i_o_n(命令替换),  _a_r_i_t_h_m_e_t_i_c
       _e_x_p_a_n_s_i_o_n(算术扩展),   _w_o_r_d  _s_p_l_i_t_t_i_n_g(词的拆分),  和  _p_a_t_h_n_a_m_e  _e_x_p_a_n_‐
       _s_i_o_n(路径扩展).

       扩展的顺序是：brace expansion, tilde expansion, parameter, variable  和
       arithmetic  expansion  还有  command substitution (按照从左到右的顺序),
       word splitting, 最后是 pathname expansion.

       还有一种附加的扩展：_p_r_o_c_e_s_s   _s_u_b_t_i_t_u_t_i_o_n    (进程替换)    只有在支持它
       的系统中有效。

       只有   brace   expansion,   word   splitting,   和  pathname  expansion
       在扩展前后的词数会发生改变；其他扩展总是将一个词扩展为一个词。
       唯一的例外是上面提到的 "$$@@" 和 "$${{_n_a_m_e[[@@]]}}" (参见 PPAARRAAMMEETTEERRSS参数)。

   BBrraaccee EExxppaannssiioonn
       _B_r_a_c_e _e_x_p_a_n_s_i_o_n 是一种可能产生任意字符串的机制。这种机制类似于 _p_a_t_h_n_a_m_e
       _e_x_p_a_n_s_i_o_n,  但是并不需要存在相应的文件。   花括号扩展的模式是一个可选的
       _p_r_e_a_m_b_l_e(前导字符),
       后面跟着一系列逗号分隔的字符串，包含在一对花括号中， 再后面是一个可选的
       _p_o_s_t_s_c_r_i_p_t(附言)。
       前导被添加到花括号中的每个字符串前面，附言被附加到每个结果字符串之后，
       从左到右进行扩展。

       花括号扩展可以嵌套。扩展字符串的结果没有排序；而是保留了从左到右的顺序。
       例如， a{{d,c,b}}e 扩展为 `ade ace abe'。

       花括号扩展是在任何其他扩展之前进行的，任何对其他扩展有特殊意义的字符
       都保留在结果中。它是严格字面上的。                                 BBaasshh
       不会对扩展的上下文或花括号中的文本做任何语义上的解释。

       正确的花括号扩展必须包含没有引用的左括号和右括号，以及至少一个没有
       引用的逗号。任何不正确的表达式都不会被改变。可以用反斜杠来引用  {{  或 ,,
       来阻止将它们识别为花括号表达式的一部分。 为了避免与参数扩展冲突，字符串
       $${{ 不被认为有效的组合。

       这种结构通常用来简写字符串的公共前缀远比上例中为长的情况，例如：

              mkdir /usr/local/src/bash/{old,new,dist,bugs}
       或者：
              chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}

       花括号扩展导致了与历史版本的                                         sshh
       的一点不兼容。在左括号或右括号作为词的一部分出现时，                 sshh
       不会对它们进行特殊处理，会在输出中保留它们。                       BBaasshh
       将括号从花括号扩展结果的词中删除。例如，向    sshh     输入     _f_i_l_e_{_1_,_2_}
       会导致不变的输出。同样的输入在  bbaasshh 进行扩展之后，会输出 _f_i_l_e_1 _f_i_l_e_2 _.
       如果需要同   sshh   严格地保持兼容，需要在启动   bbaasshh    的时候使用    ++BB
       选项，或者使用  sseett  命令加上 ++BB 选项来禁用花括号扩展 (参见下面的 sshheellll
       内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节)。

   TTiillddee EExxppaannssiioonn
       如果一个词以没有引用的波浪线字符            (`~~')            开始，所有
       在第一个没有引用的斜线   (`/')   之前的字符   (或者是这个词的所有字符，
       如果没有没引用的斜线的话)  都被认为是  _t_i_l_d_e_-_p_r_e_f_i_x(波浪线前缀)。  如果
       tilde-prefix  中没有被引用的字符，那么波浪线之后的字符串 被认为是 _l_o_g_i_n
       _n_a_m_e(登录名)。如果登录名是空字符串，波浪线将 被替换为 shell  参数  HHOOMMEE
       的值。如果没有定义          HHOOMMEE，，         将替换为执行此         shell
       的用户的个人目录。否则，tilde-prefix                           被替换为
       与指定登录名相联系的个人目录。

       如果  tilde-prefix  是  `~+'，将使用  shell  变量  PPWWDD 的值来替换。如果
       tilde-prefix     是     `~-'，并且设置了     shell     变量     OOLLDDPPWWDD,
       将使用这个变量值来替换。如果在    tilde-prefix   中，波浪线之后的字符串
       由一个数字  _N  组成，前缀可选的   `+'   或者   `-'，那么   tilde-prefix
       将被替换为目录栈中相应的元素，就是将  tilde-prefix 作为参数执行内建命令
       ddiirrss                   显示的结果。如果                    tilde-prefix
       中波浪线之后的字符是一个数字，没有前缀， 那么就假定有一个 `+'。

       如果登录名不合法，或者波浪线扩展失败，这个词将不会变化。

       在变量赋值中，对于 :: 或 == 之后的字符串会立即检查未引用的 tilde-prefix。
       这种情况下，仍然会进行波浪线扩展。因此，可以使用带波浪线的文件名来为
       PPAATTHH, MMAAIILLPPAATTHH, 和 CCDDPPAATTHH 赋值，shell 将赋予扩展之后的值。

   PPaarraammeetteerr EExxppaannssiioonn
       字符    `$$'    引入了参数扩展，命令替换和算术扩展。要扩展的参数名或符号
       可能包含在花括号中，花括号可选的，但是可以使得要扩展的变量不会与紧随其后
       的字符合并，成为新的名称。

       使用花括号的时候，匹配的右括号是第一个      `}}'，并且它没有被反斜杠引用
       或包含在一个引用的字符串中，也没有包含在一个嵌入的算术扩展，命令替换
       或是参数扩展中。

       ${_p_a_r_a_m_e_t_e_r}
              被替换为          _p_a_r_a_m_e_t_e_r         的值。如果         _p_a_r_a_m_e_t_e_r
              是一个位置参数，并且数字多于一位时；或者当紧随         _p_a_r_a_m_e_t_e_r
              之后有不属于名称一部分的字符时，都必须加上花括号。

       如果   _p_a_r_a_m_e_t_e_r   的第一个字符是一个感叹号，将引进一层间接变量。  bbaasshh
       使用以        _p_a_r_a_m_e_t_e_r        的其余部分为名的变量的值作为变量的名称；
       接下来新的变量被扩展，它的值用在随后的替换当中，而不是使用    _p_a_r_a_m_e_t_e_r
       自身的值。这也称为 _i_n_d_i_r_e_c_t _e_x_p_a_n_s_i_o_n(间接扩展).   例外情况是下面讲到的
       ${!_p_r_e_f_i_x*}。

       下面的每种情况中，_w_o_r_d         都要经过波浪线扩展，参数扩展，命令替换和
       算术扩展。如果不进行子字符串扩展，bbaasshh       测试一个没有定义或值为空的
       参数；忽略冒号的结果是只测试未定义的参数。

       ${_p_a_r_a_m_e_t_e_r::--_w_o_r_d}
              UUssee       DDeeffaauulltt       VVaalluueess(使用默认值)。如果       _p_a_r_a_m_e_t_e_r
              未定义或值为空，将替换为 _w_o_r_d  的扩展。否则，将替换为  _p_a_r_a_m_e_t_e_r
              的值。
       ${_p_a_r_a_m_e_t_e_r::==_w_o_r_d}
              AAssssiiggnn DDeeffaauulltt VVaalluueess(赋默认值)。如果 _p_a_r_a_m_e_t_e_r 未定义或值为空，
              _w_o_r_d         的扩展将赋予         _p_a_r_a_m_e_t_e_r.           _p_a_r_a_m_e_t_e_r
              的值将被替换。位置参数和特殊参数不能用这种方式赋值。
       ${_p_a_r_a_m_e_t_e_r::??_w_o_r_d}
              DDiissppllaayy           EErrrroorr           iiff           NNuullll           oorr
              UUnnsseett(显示错误，如果未定义或值为空)。如果              _p_a_r_a_m_e_t_e_r
              未定义或值为空，_w_o_r_d      (或一条信息，如果     _w_o_r_d     不存在)
              的扩展将写入到标准错误；shell   如果不是交互的，则将退出。否则，
              _p_a_r_a_m_e_t_e_r 的值将被替换。
       ${_p_a_r_a_m_e_t_e_r::++_w_o_r_d}
              UUssee       AAlltteerrnnaattee       VVaalluuee(使用可选值)。如果      _p_a_r_a_m_e_t_e_r
              未定义或值为空，不会进行替换；否则将替换为 _w_o_r_d 扩展后的值。
       ${_p_a_r_a_m_e_t_e_r::_o_f_f_s_e_t}
       ${_p_a_r_a_m_e_t_e_r::_o_f_f_s_e_t::_l_e_n_g_t_h}
              SSuubbssttrriinngg   EExxppaannssiioonn(子字符串扩展)。   扩展为_p_a_r_a_m_e_t_e_r   的最多
              _l_e_n_g_t_h      个字符，从     _o_f_f_s_e_t     指定的字符开始。如果忽略了
              _l_e_n_g_t_h，扩展为     _p_a_r_a_m_e_t_e_r     的子字符串，     从      _o_f_f_s_e_t
              指定的字符串开始。_l_e_n_g_t_h   和  _o_f_f_s_e_t  是算术表达式  (参见下面的
              AARRIITTHHMMEETTIICC EEVVAALLUUAATTIIOONN 算算术术求求值值 段落)。 _l_e_n_g_t_h 必须是一个大于等于
              0  的数值。如果  _o_f_f_s_e_t  求值结果小于  0，  值将当作从 _p_a_r_a_m_e_t_e_r
              的值的末尾算起的偏移量。如果  _p_a_r_a_m_e_t_e_r  是   @@，结果是   _l_e_n_g_t_h
              个位置参数，从  _o_f_f_s_e_t  开始。 如果 _p_a_r_a_m_e_t_e_r 是一个数组名，以 @
              或 * 索引，结果是数组的 _l_e_n_g_t_h  个成员，从  ${_p_a_r_a_m_e_t_e_r[_o_f_f_s_e_t]}
              开始。 子字符串的下标是从 0 开始的，除非使用位置参数时，下标从 1
              开始。

       ${!!_p_r_e_f_i_x**}
              扩展为名称以      _p_r_e_f_i_x      开始的变量名，以特殊变量       IIFFSS
              的第一个字符分隔。

       ${##_p_a_r_a_m_e_t_e_r}
              替换为  _p_a_r_a_m_e_t_e_r  的值的长度  (字符数目)。如果  _p_a_r_a_m_e_t_e_r  是 **
              或者是     @@,      替换的值是位置参数的个数。如果      _p_a_r_a_m_e_t_e_r
              是一个数组名，下标是 ** 或者是 @@, 替换的值是数组中元素的个数。

       ${_p_a_r_a_m_e_t_e_r##_w_o_r_d}
       ${_p_a_r_a_m_e_t_e_r####_w_o_r_d}
              _w_o_r_d      被扩展为一个模式，就像路径扩展中一样。如果这个模式匹配
              _p_a_r_a_m_e_t_e_r        的值的起始，那么扩展的结果是将        _p_a_r_a_m_e_t_e_r
              扩展后的值中，最短的匹配     (``##''    的情况)    或者最长的匹配
              (``####''的情况)  删除的结果。如果  _p_a_r_a_m_e_t_e_r  是  @@   或者是   **,
              则模式删除操作将依次施用于每个位置参数，最后扩展为结果的列表。如果
              _p_a_r_a_m_e_t_e_r      是一个数组变量，下标是      @@      或者是      **,
              模式删除将依次施用于数组中的每个成员，最后扩展为结果的列表。

       ${_p_a_r_a_m_e_t_e_r%%_w_o_r_d}
       ${_p_a_r_a_m_e_t_e_r%%%%_w_o_r_d}
              _w_o_r_d      被扩展为一个模式，就像路径扩展中一样。如果这个模式匹配
              _p_a_r_a_m_e_t_e_r     扩展后的值的尾部，那么扩展的结果是将     _p_a_r_a_m_e_t_e_r
              扩展后的值中，最短的匹配     (``%%''    的情况)    或者最长的匹配
              (``%%%%''的情况)  删除的结果。如果  _p_a_r_a_m_e_t_e_r  是  @@   或者是   **,
              则模式删除操作将依次施用于每个位置参数，最后扩展为结果的列表。如果
              _p_a_r_a_m_e_t_e_r      是一个数组变量，下标是      @@      或者是      **,
              模式删除将依次施用于数组中的每个成员，最后扩展为结果的列表。

       ${_p_a_r_a_m_e_t_e_r//_p_a_t_t_e_r_n//_s_t_r_i_n_g}
       ${_p_a_r_a_m_e_t_e_r////_p_a_t_t_e_r_n//_s_t_r_i_n_g}
              _p_a_t_t_e_r_m          被扩展为一个模式，就像路径扩展中一样。_p_a_r_a_m_e_t_e_r
              被扩展，其值中最长的匹配   _p_a_t_t_e_r_n    的内容被替换为    _s_t_r_i_n_g。
              在第一种形式中，只有第一个匹配被替换。第二种形式使得     _p_a_t_t_e_r_n
              中所有匹配都被替换为 _s_t_r_i_n_g。 如果 _p_a_t_t_e_r_n 以 ## 开始，它必须匹配
              _p_a_r_a_m_e_t_e_r  扩展后  值的首部。如果  _p_a_t_t_e_r_n 以 %% 开始，它必须匹配
              _p_a_r_a_m_e_t_e_r    扩展后值的尾部。如果     _s_t_r_i_n_g     是空值，_p_a_t_t_e_r_n
              的匹配都将被删除，  _p_a_t_t_e_r_n 之后的 // 将被忽略。如果 _p_a_r_a_m_e_t_e_r 是
              @@                           或者是                            **,
              则替换操作将依次施用于每个位置参数，最后扩展为结果的列表。如果
              _p_a_r_a_m_e_t_e_r      是一个数组变量，下标是      @@      或者是      **,
              模式删除将依次施用于数组中的每个成员，最后扩展为结果的列表。

   CCoommmmaanndd SSuubbssttiittuuttiioonn
       命令替换    (_C_o_m_m_a_n_d    _s_u_b_s_t_i_t_u_t_i_o_n)    允许以命令的输出替换命令名。有
       两种形式：

              $$((_c_o_m_m_a_n_d))
       还有
              ``_c_o_m_m_a_n_d``

       BBaasshh                     进行扩展的步骤是执行                      _c_o_m_‐
       _m_a_n_d，以它的标准输出替换它，并且将所有后续的
       新行符删除。内嵌的新行符不会删除，但是它们可能会在词的拆分中被删除。
       命令替换 $$((ccaatt _f_i_l_e)) 可以用等价但是更快的方法 $$((<< _f_i_l_e)) 代替。

       当使用旧式的反引号 ("``") 替换形式时，反斜杠只有其字面意义，除非 后面是
       $$,  ``,  或者是  \\.   第一个前面没有反斜杠的反引号将结束命令替换。当使用
       $(_c_o_m_m_a_n_d) 形式时，括号中所有字符组成了整个命令；没有被特殊处理的字符。

       命令替换可以嵌套。要在使用反引号形式时嵌套，可以用反斜杠来转义内层的
       反引号。

       如果替换发生在双引号之中，结果将不进行词的拆分和路径扩展。

   AArriitthhmmeettiicc EExxppaannssiioonn
       算术扩展允许算术表达式的求值和结果的替换。算术扩展的格式是：

              $$((((_e_x_p_r_e_s_s_i_o_n))))

       表达式                                                       _e_x_p_r_e_s_s_i_o_n
       被视为如同在双引号之中一样，但是括号中的双引号不会被特殊处理。
       表达式中所有词都经过了参数扩展，字符串扩展，命令替换和引用的删除。
       算术替换可以嵌套。

       求值根据下面          算算术术求求值值          ((AARRIITTHHMMEETTIICC         EEVVAALLUUAATTIIOONN))
       章节中列出的规则进行。如果表达式      _e_x_p_r_e_s_s_i_o_n      非法，       bbaasshh
       输出错误提示消息，不会进行替换。

   PPrroocceessss SSuubbssttiittuuttiioonn
       _P_r_o_c_e_s_s    _s_u_b_s_t_i_t_u_t_i_o_n    (进程替换)    只有在支持命名管道   (_F_I_F_O_s)，
       或者支持使用  //ddeevv//ffdd  方式为打开的文件命名的系统中才可用。  它的形式是
       <<((_l_i_s_t))  或者是 >>((_l_i_s_t))。 进程 _l_i_s_t 运行时的输入或输出被连接到一个 _F_I_F_O
       或者                                                            //ddeevv//ffdd
       中的文件。文件的名称作为一个参数被传递到当前命令，作为扩展的结果。
       如果使用  >>((_l_i_s_t))  形式，向文件写入相当于为   _l_i_s_t   提供输入。如果使用
       <<((_l_i_s_t)) 形式，可以读作为参数传递 的文件来获得 _l_i_s_t 的输出。

       如果可能的话，进程替换是与参数和变量扩展，命令替换和算术扩展同时发生的。

   WWoorrdd SSpplliittttiinngg
       shell    检测不在双引号引用中发生的参数扩展，命令替换和算术扩展的结果，
       进行 _w_o_r_d _s_p_l_i_t_t_i_n_g(词的拆分)。

       shell                               将                              IIFFSS
       的每个字符都作为定界符，根据这些字符来将其他扩展的结果分成词。如果  IIFFSS
       没有定义，或者它的值是默认的     <<ssppaaccee>><<ttaabb>><<nneewwlliinnee>>,     那么    IIFFSS
       字符的任何序列都将作为分界之用。如果                                IIFFSS
       的值是默认之外的值，那么词开头和结尾的空白字符     ssppaaccee     和     ttaabb
       都将被忽略，只要空白字符在  IIFFSS  的值之内  (即，  IIFFSS   包含空白字符)。
       任何在    IIFFSS    之中但是不是    IIFFSS   空白的字符，以及任何相邻的   IIFFSS
       空白字符，将字段分隔开来。 IIFFSS  空白字符的序列也被作为分界符。如果  IIFFSS
       的值是空，不会发生词的拆分。

       显式给出的空值参数         (""""         或         '''')        将被保留。
       隐含的空值参数，来自于空值的参数扩展，如果没有引用则将被删除。
       如果空值的参数在双引号引用中扩展，结果是空值的参数，将被保留。

       注意如果没有发生扩展，不会进行词的拆分。

   PPaatthhnnaammee EExxppaannssiioonn
       词的拆分之后，除非设置过  --ff  选项， bbaasshh 搜索每个词，寻找字符 **, ??, 和
       [[.       如果找到了其中之一，那么这个词被当作一个       _p_a_t_t_e_r_n(模式)，
       被替换为匹配这个模式的文件名以字母顺序排列的列表。如果没有找到匹配的文件名，
       并且 shell 禁用了 nnuullllgglloobb  选项，这个词将不发生变化。如果设置了  nnuullll‐‐
       gglloobb     选项并且没有找到匹配，这个词将被删除。如果启用了    nnooccaasseegglloobb
       选项，匹配时将不考虑字母的大小写。当模式用作路径名扩展时，字符    ````..''''
       如果在一个名称的开始或者紧随一个斜杠之后，那么它必须被显式地匹配，除非设置了
       ddoottgglloobb                                                           shell
       选项。当匹配一个路径名时，斜杠符必须被显式地匹配。其他情况下，字符
       ````..''''  不会被特殊对待。参见下面的  sshheellll  内内建建命命令令((SSHHEELLLL  BBUUIILLTTIINN  CCOOMM‐‐
       MMAANNDDSS))  中对  sshhoopptt  的介绍，其中有 shell 选项 nnooccaasseegglloobb, nnuullllgglloobb, 和
       ddoottgglloobb 的描述。

       环境变量 GGLLOOBBIIGGNNOORREE 可以用来限制匹配  _p_a_t_t_e_r_n  的文件名集合。如果设置了
       GGLLOOBBIIGGNNOORREE，，             每个匹配的文件名如果匹配            GGLLOOBBIIGGNNOORREE
       中任何一个模式的话将从匹配的列表中删除。文件名   ````..''''     和    ````....''''
       总是被忽略，即使设置了  GGLLOOBBIIGGNNOORREE。。 但是，设置 GGLLOOBBIIGGNNOORREE 和启用 shell
       选项         ddoottgglloobb         效果是相同的，因此所有其他以         ````..''''
       开头的文件名将被匹配。要得到原来的行为         (忽略所有以        ````..''''
       开头的文件名)，可以将 ````..**''''  添加为 GGLLOOBBIIGGNNOORREE  的模式之一。选项  ddoott‐‐
       gglloobb 被禁用，如果 GGLLOOBBIIGGNNOORREE 没有定义时。

       PPaatttteerrnn MMaattcchhiinngg

       任何模式中出现的字符，除了下面描述的特殊模式字符外，都匹配它本身。
       模式中不能出现 NUL 字符。如果要匹配字面上的特殊模式字符，它必须被引用。

       特殊模式字符有下述意义：

       **      匹配任何字符串包含空串。
       ??      匹配任何单个字符。
       [[......]]  匹配所包含的任何字符之一。用一个连字符                     (`-')
              分隔的一对字符意思是一个    _r_a_n_g_e    _e_x_p_r_e_s_s_i_o_n   (范围表达式)；
              任何排在它们之间的字符，包含它们，都被匹配。
              排序使用当前语言环境的字符顺序和字符集。如果                   [[
              之后的第一个字符是一个          !!           或是一个           ^^
              那么任何不包含在内的字符将被匹配。范围表达式中字符的顺序是由当前语言环境
              和环境变量  LLCC__CCOOLLLLAATTEE  的值  (如果设置了的话)  决定的。一个   --
              只有作为集合中第一个或最后一个字符时才能被匹配。一个           ]]
              只有是集合中第一个字符时才能被匹配。

              在 [[  和  ]]  中，_c_h_a_r_a_c_t_e_r  _c_l_a_s_s_e_s  (字符类)  可以用  [[::_c_l_a_s_s::]]
              这样的语法来指定，这里         _c_l_a_s_s         是在        POSIX.2
              标准中定义的下列类名之一:
              aallnnuumm aallpphhaa aasscciiii bbllaannkk ccnnttrrll  ddiiggiitt  ggrraapphh  lloowweerr  pprriinntt  ppuunncctt
              ssppaaccee uuppppeerr wwoorrdd xxddiiggiitt
              一个字符类匹配任何属于这一类的字符。wwoorrdd
              字符类匹配字母，数字和字符 _。

              在 [[ 和 ]] 中，可以用 [[==_c==]]  这样的语法来指定  _e_q_u_i_v_a_l_e_n_c_e  _c_l_a_s_s
              (等价类)。它匹配与字符      _c      有相同归并权值     (collation
              weight，由当前 语言环境定义) 的字符。

              在 [[ 和 ]] 中，语法 [[.._s_y_m_b_o_l..]]  匹配归并符号  (collating  symbol)
              _s_y_m_b_o_l。

       如果使用内建命令      sshhoopptt     启用了     shell     选项     eexxttgglloobb，
       将识别另外几种模式匹配操作符。下面的描述中，_p_a_t_t_e_r_n_-_l_i_s_t         是一个
       或多个模式以      ||      分隔的列表。复合的模式可以使用一个或多个下列的
       子模式构造出来：

              ??((_p_a_t_t_e_r_n_-_l_i_s_t))
                     匹配所给模式零次或一次出现
              **((_p_a_t_t_e_r_n_-_l_i_s_t))
                     匹配所给模式零次或多次出现
              ++((_p_a_t_t_e_r_n_-_l_i_s_t))
                     匹配所给模式一次或多次出现
              @@((_p_a_t_t_e_r_n_-_l_i_s_t))
                     准确匹配所给模式之一
              !!((_p_a_t_t_e_r_n_-_l_i_s_t))
                     任何除了匹配所给模式之一的字串

   QQuuoottee RReemmoovvaall
       经过前面的扩展之后，所有未引用的字符 \\, '', 以及并非上述扩展结果的字符 ""
       都被删除。

重重定定向向((RREEDDIIRREECCTTIIOONN))
       在命令执行前，它的输入和输出可能被 _r_e_d_i_r_e_c_t_e_d _(_重_定_向_)_， 使用一种 shell
       可以解释的特殊记法。重定向也可以用于为当前        shell        执行环境
       打开和关闭文件。下列重定向操作符可以前置或者放在     _s_i_m_p_l_e     _c_o_m_m_a_n_d
       _(_简_单_命_令_)               之中的任何位置，或者放在               _c_o_m_m_a_n_d
       之后。重定向是以出现的顺序进行处理的，从左到右。

       下列描述中，如果文件描述符被忽略，并且第一个重定向操作符是           <<,
       那么重定向指的是标准输入                                  (文件描述符是
       0)。如果重定向操作符的第一个字符是      >>,     那么重定向指的是标准输出
       (文件描述符是 1)。

       下列描述中，重定向操作符之后的词如果没有特殊说明，都要经过 brace expan‐
       sion,  tilde  expansion,  parameter  expansion,  command  substitution,
       arithmetic expansion, quote  removal,  pathname  expansion,  还有  word
       splitting。如果扩展为多于一个词， bbaasshh 将报错。

       注意重定向的顺序非常重要。例如，命令

              ls >> dirlist 2>>&&1

       将标准输出和标准错误重定向到文件 _d_i_r_l_i_s_t, 而命令

              ls 2>>&&1 >> dirlist

       只会将标准输出重定向到文件     _d_i_r_l_i_s_t,    因为在标准输出被重定向到文件
       _d_i_r_l_i_s_t 中之前，标准错误被复制为标准输出。

       一些文件名在重定向中被 bbaasshh 特殊处理，如下表所示：

              //ddeevv//ffdd//_f_d
                     如果 _f_d 是一个合法的整数，文件描述符 _f_d 将被复制。
              //ddeevv//ssttddiinn
                     文件描述符 0 被复制。
              //ddeevv//ssttddoouutt
                     文件描述符 1 被复制。
              //ddeevv//ssttddeerrrr
                     文件描述符 2 被复制。
              //ddeevv//ttccpp//_h_o_s_t//_p_o_r_t
                     如果 _h_o_s_t 是一个合法的主机名或 Internet  地址，并且  _p_o_r_t
                     是  一个整数端口号或服务名，bbaasshh  试图建立与相应的 socket
                     (套接字) 的 TCP 连接。
              //ddeevv//uuddpp//_h_o_s_t//_p_o_r_t
                     如果 _h_o_s_t 是一个合法的主机名或 Internet  地址，并且  _p_o_r_t
                     是  一个整数端口号或服务名，bbaasshh  试图建立与相应的 socket
                     (套接字) 的 UDP 连接。

       打开或创建文件错误将导致重定向出错。

   RReeddiirreeccttiinngg IInnppuutt
       重定向输入使得以   _w_o_r_d   扩展结果为名的文件被打开并通过文件描述符    _n
       读取，如果没有指定 _n 那么就作为标准输入 (文件描述符为 0) 读取。

       重定向输入的一般形式是：

              [_n]<<_w_o_r_d

   RReeddiirreeccttiinngg OOuuttppuutt
       重定向输出使得以    _w_o_r_d   扩展结果为名的文件被打开并通过文件描述符   _n
       写入，如果没有指定 _n 那么就作为标准输出 (文件描述符为 1) 写入。

       重定向的一般形式是：

              [_n]>>_w_o_r_d

       如果重定向操作符是   >>，   并且启用了内建命令    sseett    的    nnoocclloobbbbeerr
       选项，那么如果     _w_o_r_d    扩展后得到的文件名存在并且是一个普通的文件，
       重定向将失败。如果重定向操作符是     >>||,      或者重定向操作符是      >>
       并且没有启用内建命令    sseett    的    nnoocclloobbbbeerr    选项，那么即使   _w_o_r_d
       得出的文件名存在，也会尝试进行重定向。

   AAppppeennddiinngg RReeddiirreecctteedd OOuuttppuutt ((添添加加到到重重定定向向后后的的输输出出尾尾部部))
       这种方式的输出重定向使得以                                         _w_o_r_d
       扩展结果为名的文件被打开并通过文件描述符  _n  从尾部添加。如果没有指定 _n
       就使用标准输出 (文件描述符 1)。如果文件不存在，它将被创建。

       重定向的一般形式是：

              [_n]>>>>_w_o_r_d

   RReeddiirreeccttiinngg SSttaannddaarrdd OOuuttppuutt aanndd SSttaannddaarrdd EErrrroorr
       BBaasshh   允许使用这种结构将标准输出和标准错误   (文件描述符   1   和   2)
       重定向到以 _w_o_r_d 扩展结果为名的文件中。

       有两种重定向标准输出/标准错误的形式：

              &&>>_w_o_r_d
       还有
              >>&&_w_o_r_d

       两种形式中，推荐使用第一种。它与

              >>_w_o_r_d 2>>&&1
       在语义上等价。

   HHeerree DDooccuummeennttss
       这种重定向使得  shell  从当前源文件读取输入，直到遇到仅包含 _w_o_r_d 的一行
       (并且没有尾部空白，trailing   blanks)    为止。直到这一点的所有行被用作
       命令的标准输入。

       here-document 的格式是：

              <<<<[--]_w_o_r_d
                      _h_e_r_e_-_d_o_c_u_m_e_n_t
              _d_e_l_i_m_i_t_e_r

       不会对  _w_o_r_d 进行 parameter expansion, command substitution, arithmetic
       expansion,  或者  pathname  expansion。如果  _w_o_r_d  中任何字符是引用的，
       _d_e_l_i_m_i_t_e_r       将是对      _w_o_r_d      进行引用删除的结果，here-document
       中的行不会被扩展。如果          _w_o_r_d          没有被引用，here-documnet
       中的所有行都要经过 parameter expansion, command substitution, 和 arith‐
       metic expansion。 在后一种情况下，字符序列 \\<<nneewwlliinnee>> 被忽略；必须用  \\
       来引用字符 \\, $$, 和 ``.

       如果重定向操作符是   <<<<--,   那么所有前导的  tab  字符都被从输入行和包含
       _d_e_l_i_m_i_t_e_r    的行中删除。这样使得    shell    脚本中的    here-document
       可以被更好地缩进。

   HHeerree SSttrriinnggss
       here-document 的变种，形式是

              <<<<<<_w_o_r_d

       _w_o_r_d 被扩展，提供给命令作为标准输入。

   DDuupplliiccaattiinngg FFiillee DDeessccrriippttoorrss ((复复制制文文件件描描述述符符))
       重定向操作符

              [_n]<<&&_w_o_r_d

       用于复制文件描述符。如果       _w_o_r_d       扩展为一个或多个数字，      _n
       代表的文件描述符将成为那个文件描述符的复制。如果                   _w_o_r_d
       中的数字并未指定一个被用于读取的文件描述符，将产生一个重定向错误。如果
       _w_o_r_d 扩展为 --, 文件描述符 _n 将被关闭。如果没有指定  _n_，  将使用标准输入
       (文件描述符 0)。

       类似的，操作符

              [_n]>>&&_w_o_r_d

       用于复制输出文件描述符。如果没有指定   _n_，  将使用标准输出  (文件描述符
       1)。如果                                                           _w_o_r_d
       中的数字并未指定一个被用于输出的文件描述符，将产生一个重定向错误。
       特殊情况下，如果忽略了    _n，并且    _w_o_r_d    并非扩展为一个或多个数字，
       标准输出和标准错误将被重定向，和前面描述的一样。

   MMoovviinngg FFiillee DDeessccrriippttoorrss
       重定向操作符

              [_n]<<&&_d_i_g_i_t--

       将文件描述符   _d_i_g_i_t   移动为文件描述符   _n,   或标准输入   (文件描述符
       0)，如果没有指定 _n 的话。 _d_i_g_i_t 复制为 _n 之后就被关闭了。

       类似的，重定向操作符

              [_n]>>&&_d_i_g_i_t--

       将文件描述符   _d_i_g_i_t   移动为文件描述符   _n,   或标准输出   (文件描述符
       1)，如果没有指定 _n 的话。

   OOppeenniinngg FFiillee DDeessccrriippttoorrss ffoorr RReeaaddiinngg aanndd WWrriittiinngg
       重定向操作符

              [_n]<<>>_w_o_r_d

       使得以       _w_o_r_d       扩展结果为名的文件被打开，通过文件描述符      _n
       进行读写。如果没有指定              _n              那么就使用文件描述符
       0。如果文件不存在，它将被创建。

别别名名((AALLIIAASSEESS))
       _A_l_i_a_s_e_s       (别名机制)       允许将一个词来替换为一个字符串，如果它是
       一个简单命令的第一个词的话。shell 记录着一个别名列表，可以使用 内建命令
       aalliiaass  和 uunnaalliiaass 来定义和取消 (参见下面的 sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN
       CCOOMMMMAANNDDSS))
       章节)。每个命令的第一个词，如果没有引用，都将被检查是否是一个别名。
       如果是，这个词将被它所指代的文本替换。别名和替换的文本可以包含任何有效
       的      shell      输入，包含上面列出的     _m_e_t_a_c_h_a_r_a_c_t_e_r_s     _(_元_字_符_)
       ，特殊情况是别名中不能包含            _=。替换文本的第一个词也被检查是否
       是别名，但是如果它与被替换的别名相同，就不会再替换第二次。这意味着可以用
       llss         作为          llss          --FF          的别名，          bbaasshh
       不会递归地展开替换文本。如果别名的最后一个字符是                 _b_l_a_n_k,
       那么命令中别名之后的下一个词也将被检查是否能进行别名展开。

       别名可以使用 aalliiaass 命令来创建或列举出来，使用 uunnaalliiaass 命令来删除。

       在替换文本中没有参数机制。如果需要参数，应当使用 shell 函数 (参见下面的
       FFUUNNCCTTIIOONNSS ((函函数数)) 段落)。

       如果  shell  不是交互的，别名将不会展开，除非使用内建命令  sshhoopptt 设置了
       eexxppaanndd__aalliiaasseess 选项。

       关于别名的定义和使用中的规则比较混乱。                             BBaasshh
       在执行一行中的任何命令之前，总是读入至少完整一行的输入。
       别名在命令被读取时展开，而不是在执行的时候。因此，别名定义如果
       和另一个命令在同一行，那么不会起作用，除非读入了下一行。
       别名定义之后，同一行中的命令不会受新的别名影响。这种行为
       在函数执行时存在争议，因为别名替换是在函数定义被读取时发生的，
       而不是函数被执行的时候，因为函数定义本身是一个复合命令。结果，
       在函数中定义的别名只有当这个函数执行完才会生效。为了保险起见，
       应当总是将别名定义放在单独的一行，不在复合命令中使用 aalliiaass。。

       不管什么情况下，别名都被 shell 函数超越 (be superseded)。

函函数数((FFUUNNCCTTIIOONNSS))
       一个         shell         函数，以上面          SSHHEELLLL          GGRRAAMMMMAARR
       中描述的方法定义，保存着一系列的命令，等待稍后执行。      当      shell
       函数名作为一个简单命令名使用时，这个函数名关联的命令的序列
       被执行。函数在当前     shell     的上下文环境中执行；不会创建新的进程来
       解释它们    (这与    shell    脚本的执行形成了对比)。当执行函数时，函数
       的参数成为执行过程中的位置参数   (positional   parameters)。特殊参数  ##
       被更新以反映这个变化。位置参数   0   不会改变。函数执行时，    FFUUNNCCNNAAMMEE
       变量被设置为函数的名称。函数和它的调用者在     shell     执行环境的所有
       其他方面都是一样的，特殊情况是  DDEEBBUUGG  陷阱  (参见下面对内建函数   ttrraapp
       的描述，在    sshheellll    内内建建命命令令((SSHHEELLLL    BBUUIILLTTIINN    CCOOMMMMAANNDDSS))   章节中)
       不会被继承，除非函数设置了  ttrraaccee  属性   (参见下面对内建函数   ddeeccllaarree
       的描述)。

       函数中的局部变量可以使用内建命令                                  llooccaall
       来声明。通常情况下，变量和它们的值在函数和它的调用者之间是共享的。

       如果函数中执行了内建命令                                       rreettuurrnn，，
       那么函数结束，执行从函数调用之后的下一个命令开始。
       函数结束后，位置参数的值以及特殊参数 ## 都将重置为它们在函数执行前的值。

       函数名和定义可以使用内建命令    ddeeccllaarree    或    ttyyppeesseett    加上     --ff
       参数来列出。如果在     ddeeccllaarree     或     ttyyppeesseett     命令中使用     --FF
       选项将只列出函数名。函数可以使用内建命令      eexxppoorrtt      加上       --ff
       参数导出，使得子 shell 中它们被自动定义。

       函数可以是递归的。对于递归调用的次数没有硬性限制。

算算术术求求值值((""AARRIITTHHMMEETTIICC EEVVAALLUUAATTIIOONN""))
       在一定的环境下，shell  允许进行算术表达式的求值  (参见内建命令  lleett  和
       AArriitthhmmeettiicc                  EExxppaannssiioonn                   (算术表达式))。
       求值使用固定宽度的整数，不检查是否溢出，但是被零除会被捕获，标记为错误。
       操作数及其优先级和聚合程度与   C   语言中相同。下列操作数的列表按照相同
       优先级的操作数其级别来分组。列出的级别顺序是优先级递减的。

       _i_d++++ _i_d----
              变量自增/自减 (在后)
       ++++_i_d ----_i_d
              变量自增/自减 (在前)
       -- ++    (单目的) 取负/取正
       !! ~~    逻辑和位取反
       ****     乘幂
       ** // %%  乘，除，取余
       ++ --    加，减
       <<<< >>>>  左/右位移
       <<== >>== << >>
              比较
       ==== !!==  相等/不等
       &&      位与 (AND)
       ^^      位异或 (exclusive OR)
       ||      位或 (OR)
       &&&&     逻辑与 (AND)
       ||||     逻辑或 (OR)
       _e_x_p_r??_e_x_p_r::_e_x_p_r
              条件求值
       == **== //== %%== ++== --== <<<<== >>>>== &&== ^^== ||==
              赋值
       _e_x_p_r_1 ,, _e_x_p_r_2
              逗号表达式

       shell              变量可以作为操作数；在表达式求值之前会进行参数扩展。
       在表达式中，可以用名称引用     shell     变量，不必使用参数扩展的语法。
       变量被引用时，其值被作为算术表达式来求值。                        shell
       变量用于表达式中时，不必启用整数属性。

       以 0 为前导的常量被当作八进制数，以 0x 或  0X  作为前导表明是十六进制。
       其他情况下，数字的形式是   [_b_a_s_e_#]n，这里   _b_a_s_e   是一个   2   到   64
       的十进制数值，作为数字的基数，_n   是在这个基数中数字的值。   如果忽略了
       _b_a_s_e_#，将以  10 为基数。大于 10 的数字依次以小写字母， 大写字母，@ 和 _
       表示。如果   _b_a_s_e    小于或等于    36，在表示    10    与    35    之间
       的数字时小写字母和大写字母可以互换。

       操作符根据优先级顺序进行求值。圆括号中的子表达式被最先求值，可能会
       超越上面的优先级规则。

条条件件表表达达式式((""CCOONNDDIITTIIOONNAALL EEXXPPRREESSSSIIOONNSS""))
       条件表达式用于    [[[[    复合命令以及内建命令    tteesstt    和    [[    中，
       用来测试文件属性，进行字符串和算术比较。表达式使用下面的单目或二进制操作构造。
       如果某操作的任何  _f_i_l_e  参数的形式是  _/_d_e_v_/_f_d_/_n，那么将检查  文件描述符
       _n。如果某操作的  _f_i_l_e  参数是 _/_d_e_v_/_s_t_d_i_n， _/_d_e_v_/_s_t_d_o_u_t 或者 _/_d_e_v_/_s_t_d_e_r_r
       之一，将分别检查文件描述符 0，1 和 2。

       --aa _f_i_l_e
              如果 _f_i_l_e 存在则为真。
       --bb _f_i_l_e
              如果 _f_i_l_e 存在且为块设备则为真。
       --cc _f_i_l_e
              如果 _f_i_l_e 存在且为字符设备则为真。
       --dd _f_i_l_e
              如果 _f_i_l_e 存在且是一个目录则为真。
       --ee _f_i_l_e
              如果 _f_i_l_e 存在则为真。
       --ff _f_i_l_e
              如果 _f_i_l_e 存在且为普通文件则为真。
       --gg _f_i_l_e
              如果 _f_i_l_e 存在且是设置组ID的 (sgid) 则为真。
       --hh _f_i_l_e
              如果 _f_i_l_e 存在且为符号链接则为真。
       --kk _f_i_l_e
              如果 _f_i_l_e 存在且设置了 ``sticky'' 位 (粘滞位) 则为真。
       --pp _f_i_l_e
              如果 _f_i_l_e 存在且是一个命名管道 (FIFO) 则为真。
       --rr _f_i_l_e
              如果 _f_i_l_e 存在且可读则为真。
       --ss _f_i_l_e
              如果 _f_i_l_e 存在且大小大于零则为真。
       --tt _f_d  如果文件描述符 _f_d 是打开的且对应一个终端则为真。
       --uu _f_i_l_e
              如果 _f_i_l_e 存在且是设置用户ID的 (suid) 则为真。
       --ww _f_i_l_e
              如果 _f_i_l_e 存在且可写则为真。
       --xx _f_i_l_e
              如果 _f_i_l_e 存在且可执行则为真。
       --OO _f_i_l_e
              如果 _f_i_l_e 存在且为有效用户ID所拥有则为真。
       --GG _f_i_l_e
              如果 _f_i_l_e 存在且为有效组ID所拥有则为真。
       --LL _f_i_l_e
              如果 _f_i_l_e 存在且为符号链接则为真。
       --SS _f_i_l_e
              如果 _f_i_l_e 存在且为套接字则为真。
       --NN _f_i_l_e
              如果 _f_i_l_e 存在且上次读取后被修改过则为真。
       _f_i_l_e_1 -nntt _f_i_l_e_2
              如果 _f_i_l_e_1 比 _f_i_l_e_2 要新 (根据修改日期)，或者 如果 _f_i_l_e_1  存在而
              _f_i_l_e_2 不存在，则为真。
       _f_i_l_e_1 -oott _f_i_l_e_2
              如果  _f_i_l_e_1  比  _f_i_l_e_2  更旧，或者  如果  _f_i_l_e_1  不存在而  _f_i_l_e_2
              存在，则为真。
       _f_i_l_e_1 --eeff _f_i_l_e_2
              如果 _f_i_l_e_1 和 _f_i_l_e_2 指的是相同的设备和 inode 号则为真。
       --oo _o_p_t_n_a_m_e
              如果启用了 shell 选项 _o_p_t_n_a_m_e 则为真。参见下面对内建命令 sseett  的
              --oo 选项的描述中的选项列表。
       --zz _s_t_r_i_n_g
              如果 _s_t_r_i_n_g 的长度为 0 则为真。
       --nn _s_t_r_i_n_g
       _s_t_r_i_n_g 如果 _s_t_r_i_n_g 的长度非 0 则为真。
       _s_t_r_i_n_g_1 ==== _s_t_r_i_n_g_2
              如果字符串相等则为真。==   可以用于使用   ====  的场合来兼容  POSIX
              规范。
       _s_t_r_i_n_g_1 !!== _s_t_r_i_n_g_2
              如果字符串不相等则为真。
       _s_t_r_i_n_g_1 << _s_t_r_i_n_g_2
              如果 _s_t_r_i_n_g_1 在当前语言环境的字典顺序中排在 _s_t_r_i_n_g_2 之前则为真。
       _s_t_r_i_n_g_1 >> _s_t_r_i_n_g_2
              如果 _s_t_r_i_n_g_1 在当前语言环境的字典顺序中排在 _s_t_r_i_n_g_2 之后则为真。
       _a_r_g_1 OOPP _a_r_g_2
              OOPP    是    --eeqq,    --nnee,    --lltt,    --llee,     --ggtt,     或     --ggee
              之一。这些算术二进制操作返回真，如果   _a_r_g_1   与   _a_r_g_2   分别是
              相等，不等，小于，小于或等于，大于，大于或等于关系。   _A_r_g_1   和
              _a_r_g_2 可以是正/负整数。

简简单单命命令令扩扩展展((""SSIIMMPPLLEE CCOOMMMMAANNDD EEXXPPAANNSSIIOONN""))
       当执行一个简单命令时，shell 进行下列扩展，赋值和重定向，从左到右。

       1.     解释器标记为与变量赋值                          (在命令名之前的)
              和重定向有关的词被保存等待随后处理。

       2.     并非变量赋值或重定向的词被扩展。如果扩展后仍然有词保留下来，第一个词被
              作为命令名，其余词是参数。

       3.     重定向按照上面 RREEDDIIRREECCTTIIOONN 中讲到的规则进行。

       4.     每个变量赋值中    ==   之后的文本在赋予变量之前要经过波浪线扩展，
              参数扩展，命令替换，算术扩展和引用删除。

       如果没有得到命令名，变量赋值影响当前    shell    环境。否则，变量被加入
       被执行的命令的环境中，不影响当前    shell    环境。如果任何赋值动作试图
       为只读变量赋值，将导致出错，命令以非零状态值退出。

       如果没有得到命令名，重定向仍会进行，但是不影响当前     shell     环境。
       重定向出错将使命令以非零状态值退出。

       如果扩展后有命令名保留下来，那么执行过程如下所示。否则，命令退出。
       如果在任何扩展中包含命令替换，那么整个命令的退出状态是最后一个命令
       替换的退出状态。如果没有进行命令替换，命令以状态零退出。

命命令令执执行行((CCOOMMMMAANNDD EEXXEECCUUTTIIOONN))
       命令被拆分为词之后，如果结果是一个简单命令和可选的参数列表，将执行
       下面的操作。

       如果命令名中没有斜杠，shell   试图定位命令位置。如果存在同名的    shell
       函数，函数将被执行，像上面                                    FFUUNNCCTTIIOONNSS
       中讲到的一样。如果名称不是一个函数，shell 从 内建命令中搜索它。如果找到
       对应命令，它将被执行。

       如果名称既不是  shell  函数也不是一个内建命令，并且没有包含斜杠，  bbaasshh
       搜索  PPAATTHH  的每个成员，查找含有此文件名  (可执行文件)  的目录。   BBaasshh
       使用散列表来储存可执行文件的全路径   (参见下面的  sshheellll  内内建建命命令令((SSHHEELLLL
       BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 中的 hhaasshh。。  只有在散列表中没有找到此命令，才对  PPAATTHH
       进行完整的搜索。如果搜索不成功，shell 输出错误消息，返回退出状态 127。

       如果搜索成功，或者命令中包含一个或多个斜杠，shell    在单独的执行环境中
       执行这个程序。参数                                                    0
       被设置为所给名称；命令的其他参数被设置为所给的参数， 如果有的话。

       如果执行失败，因为文件不是可执行格式，并且此文件不是目录，就假定它是
       一个 _s_h_e_l_l _s_c_r_i_p_t (脚本)，一个包含 shell 命令的文件。此时将孵化 (spawn)
       出一个子    shell   来执行它。子   shell   重新初始化自身，效果就好像是
       执行了一个新的 shell 来处理脚本一样，但是父 shell  保存的命令位置仍然被
       保留 (参见下面的 sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 中的 hhaasshh))。。

       如果程序是以                                                         ##!!
       开头的文件，那么第一行的其余部分指定了这个程序的解释器。          shell
       执行指定的解释器，如果操作系统不会自行处理这种可执行文件格式的话。
       解释器的参数由下面三部分组成：程序第一行中解释器名称之后的可选的一个参数，
       程序的名称，命令行参数，如果有的话。

命命令令执执行行环环境境((CCOOMMMMAANNDD EEXXEECCUUTTIIOONN EENNVVIIRROONNMMEENNTT))
       shell 有 _e_x_e_c_u_t_i_o_n _e_n_v_i_r_o_n_m_e_n_t (执行环境) 的概念，由下列内容组成：


       ·      shell  启动时继承的打开的文件，例如在内建命令  eexxeecc 中使用重定向
              修改的结果

       ·      当前工作目录，使用  ccdd，ppuusshhdd  或者  ppooppdd   设置，或是由   shell
              在启动时继承得到

       ·      文件创建模式掩码，使用 uummaasskk 设置或是从 shell 的父进程中继承得到

       ·      当前陷阱，用 ttrraapp 设置

       ·      shell                 参数，使用变量赋值或者                 sseett
              设置，或者是从父进程的环境中继承得到

       ·      shell 函数，在执行中定义或者是从父进程的环境中继承得到

       ·      设为允许的选项，在执行时设置
              (要么是默认允许的，要么是命令行给出的) 或者是 用 sseett 设置

       ·      用 sshhoopptt 设为允许的选项

       ·      用 aalliiaass 定义的 shell 别名

       ·      各种进程号，包含后台作业的进程号，$$$$ 的值，以及 $$PPPPIIDD 的值

       当并非  shell  函数或内置命令的简单命令执行时，它在一个由下述内容组成的
       单独的执行环境中启动。除非另外说明，值都是从 shell 中继承的。


       ·      shell 打开的文件，加上对命令使用重定向修改和添加的文件

       ·      当前工作目录

       ·      文件创建模式掩码

       ·      标记为导出             (export)             的             shell
              变量，以及传递到环境中为这个命令导出的变量

       ·      shell   捕捉的陷阱被重置为从   shell   的父进程中继承的值，shell
              忽略的陷阱 也被忽略

       在单独的环境中启动的命令不能影响 shell 的执行环境。

       命令替换和异步命令都在子 shell 环境中执行。子  shell  环境是原有  shell
       环境的赋值，但          shell          捕捉的陷阱被重置为         shell
       启动时从父进程中继承的值。     作为管道一部分来执行的内建命令也在一个子
       shell    环境中执行。对子    shell   环境所作修改不能影响到原有   shell
       的执行环境。

       如果命令后面是   &&   并且没有启用作业控制，命令的默认标准输入将是空文件
       _/_d_e_v_/_n_u_l_l。否则，被执行的命令从调用它的    shell   中继承被重定向修改的
       文件描述符。

环环境境((EENNVVIIRROONNMMEENNTT))
       当一个程序执行时，它被赋予一个字符串数组，成为环境        _e_n_v_i_r_o_n_m_e_n_t。
       它是一个 名称-值对 (_n_a_m_e-_v_a_l_u_e) 的列表，形式是 _n_a_m_e=_v_a_l_u_e.

       shell                           提供了多种操作环境的方法。启动时，shell
       扫描自身的环境，为每个找到 的名字创建一个参数，自动地将它标记为  _e_x_p_o_r_t
       (向子进程导出的)。被执行的命令继承了这个环境。  eexxppoorrtt  和  ddeeccllaarree  --xx
       命令允许参数和函数被加入到环境中或从环境中删除。如果环境中参数的值
       被修改，新值成为环境的一部分，替换了旧值。所有被执行的命令继承的环境
       包含     shell      的初始环境      (可能值被修改过)，减去被      uunnsseett
       命令删除的，加上通过 eexxppoorrtt 和 ddeeccllaarree --xx 命令添加的部分。

       可以在任何                        _s_i_m_p_l_e                        _c_o_m_m_a_n_d
       或函数的环境中设定暂时有效的参数，只要将参数赋值放在命令前面就可以了，
       参见上面 PPAARRAAMMEETTEERRSS 的描述。这些赋值语句只在这个命令的环境中有效。

       如果设置了内建命令       sseett       的       --kk       选项，      _所_有_的
       变量赋值都将放到命令的环境中，不仅是在命令名前面的那些。

       当             bbaasshh             执行一个外部命令时，变量              __
       被设置为命令的文件全名，然后被传递到命令的环境之中。

退退出出状状态态((""EEXXIITT SSTTAATTUUSS""))
       从  shell  的角度看，一个命令退出状态是 0 意味着成功退出。 退出状态是 0
       表明成功。非零状态值表明失败。当命令收到 fatal  signal  _N  退出时，bash
       使用 128+_N 作为它的退出状态。

       如果没有找到命令，为执行它而创建的子进程返回    127。如果找到了命令但是
       文件不可执行，返回状态是 126。

       如果命令由于扩展或重定向错误而失败，退出状态大于零。

       shell  内建命令如果成功返回   0(_t_r_u_e)，执行时出错则返回非零   (_f_a_l_s_e)。
       所有内建命令返回 2 来指示不正确的用法。

       BBaasshh             自身返回最后执行的命令的退出状态，除非发生了语法错误，
       这时它返回非零值。参见下面的内建命令 eexxiitt。

信信号号((SSIIGGNNAALLSS))
       如果  bbaasshh  是交互的，没有设定任何陷阱，它忽略  SSIIGGTTEERRMM  (这样  kkiillll  00
       不会杀掉交互的   shell)。   SSIIGGIINNTT  被捕获并处理  (从而使内建命令  wwaaiitt
       可以中断)。在所有情况下， bbaasshh  忽略  SSIIGGQQUUIITT。  如果正在使用作业控制，
       bbaasshh 忽略 SSIIGGTTTTIINN, SSIIGGTTTTOOUU, 和 SSIIGGTTSSTTPP.

       bbaasshh    开始的并行作业的信号处理句柄都设置为    shell    从父进程中继承
       的值。如果不是正在使用作业控制，异步命令还忽略  SSIIGGIINNTT  和  SSIIGGQQUUIITT  。。
       作为命令替换结果运行的命令忽略键盘产生的作业控制信号  SSIIGGTTTTIINN, SSIIGGTTTTOOUU,
       和 SSIIGGTTSSTTPP.

       如果收到信号   SSIIGGHHUUPP，，    shell    默认退出。在退出前，交互的    shell
       向所有作业，运行的或停止的，发送  SSIIGGHHUUPP  信号。shell  向停止的作业发出
       SSIIGGCCOONNTT      信号来保证它们会收到      SSIIGGHHUUPP.       要阻止       shell
       向特定的作业发送信号，应当使用内建命令    ddiissoowwnn   将作业从作业表中删除
       (参见下面的 sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节) 或者使用  ddiiss‐‐
       oowwnn --hh 来标记为不接受 SSIIGGHHUUPP。。

       如果使用  sshhoopptt 设置了 shell 选项 hhuuppoonneexxiitt，， 在交互的登录 shell 退出时
       bbaasshh 向所有作业发出 SSIIGGHHUUPP 信号。

       当  bbaasshh  等待命令执行结束时，如果收到已设置了陷阱的信号，陷阱   (trap)
       将不会执行，直到命令结束。      当      bbaasshh      通过内建命令     wwaaiitt
       等待异步命令时，如果收到已设置    了陷阱的信号，将使得内建命令     wwaaiitt
       立即以大于 128 的状态值返回。 接着，陷阱将立即被执行。

作作业业控控制制((""JJOOBB CCOONNTTRROOLL""))
       _J_o_b     _c_o_n_t_r_o_l     (作业控制)    指的是可以选择停止    (_s_u_s_p_e_n_d，挂起)
       进程执行，并且              可以在之后继续               (_r_e_s_u_m_e，恢复)
       执行的能力。用户一般在交互的人机界面
       中使用这种功能。界面是由系统的终端驱动和 bbaasshh 共同提供的。

       shell                 将每个管道分配给一个                  _作_业_(_j_o_b_)_。
       它保存一个当前运行的作业表，可以用     jjoobbss     命令来列出。当     bbaasshh
       启动一个异步的作业时 _(_b_a_c_k_g_r_o_u_n_d_，_后_台_执_行_)_， 它输出这样的一行：

              [1] 25647

       表明这个作业的作业号是  1，与作业相关连的管道中最后一个进程的  进程ID是
       15647。管道中所有进程都是同一个作业的成员。    BBaasshh    使用   _作_业_(_j_o_b_)
       概念作为作业控制的基础。

       为简化作业控制的用户界面的实现，操作系统负责管理“当前终端的进程组”
       (_c_u_r_r_e_n_t _t_e_r_m_i_n_a_l _p_r_o_c_e_s_s _g_r_o_u_p _I_D) 的概念。这个进程组的成员 (进程组 ID
       是当前终端进程组  ID   的进程)   可以收到键盘产生的信号，例如   SSIIGGIINNTT.
       这些进程被称为       _f_o_r_e_g_r_o_u_n_d(前台的)。      _B_a_c_k_g_r_o_u_n_d      _(_后_台_的_)
       进程是那些进程组 ID  与终端不同的进程；这些进程不会收到键盘产生的信号。
       只有前台进程可以从终端读或向终端写。后台进程试图读/写终端时，将收到终端驱动程序发送的
       SSIIGGTTTTIINN ((SSIIGGTTTTOOUU)) 信号。这个信号如果没有加以捕捉，将挂起这个进程。

       如果         bbaasshh         运行其上的操作系统支持作业控制，         bbaasshh
       会包含使用它的设施。在一个进程正在运行的时候键入   _s_u_s_p_e_n_d   _挂_起  字符
       (通常是  ^^ZZ,  Control-Z)  将使这个进程暂停，将控制权还给  bbaasshh.    输入
       _d_e_l_a_y_e_d    _s_u_s_p_e_n_d    _,    _延_时_挂_起   字符   (通常是   ^^YY,   Control-Y)
       将使这个进程在试图从终端读取输入时暂停，将控制权还给              bbaasshh.
       用户接下来可以控制此作业的状态，使用   bbgg  命令使它在后台继续运行，  ffgg
       命令使它在前台继续运行，或            kkiillll             命令将它杀死。^^ZZ
       会立即起作用，并且还有使等待中的                              (pending)
       输出和输入被忽略的附加副作用。

       有很多方法来指代  shell  中的作业。字符  %%   可以引入作业名。编号为   _n
       的作业可以用                                                         %%nn
       的形式来指代。作业也可以用启动它的名称的前缀，或者命令行中的子字符串来指代。例如，
       %%ccee    指代一个暂停的    ccee    作业。如果前缀匹配多于一个作业，    bbaasshh
       报错。另一方面，使用    %%??ccee,     可以指代任何命令行中包含字符串     ccee
       的作业。如果子字符串匹配多于一个作业，  bbaasshh  报错。符号  %%%% 和 %%++ 指代
       shell            意义上的            _c_u_r_r_e_n_t            _j_o_b，当前作业，
       也就是前台被暂停的最后一个作业，或者是在后台启动的作业。  _p_r_e_v_i_o_u_s  _j_o_b
       _，_前_一_作_业 可以使用 %%-- 来指代。在有关作业的输出信息中 (例如，命令  jjoobbss
       的输出)，当前作业总是被标记为 ++, 前一作业标记为 --.

       简单地给出作业名，可以用来把它放到前台：     %%11     是     ````ffgg    %%11''''
       的同义词，将作业 1  从后台放到前台。类似的，  ````%%11  &&''''  在后台恢复作业
       1，与 ````bbgg %%11'''' 等价。

       当某个作业改变状态时，shell          立即可以得知。通常，          bbaasshh
       等待直到要输出一个提示符时，才会报告作业的状态变化，从而不会打断其他输出。
       如果启用了内建命令 sseett 的 --bb 选项， bbaasshh 将立即报告这些变化。对 SSIIGGCCHHLLDD
       信号的陷阱将在每个子进程退出时执行。

       如果在作业暂停时试图退出  bbaasshh，，  shell   打印一条警告消息。命令   jjoobbss
       可能被用来检查作业的状态。如果再次试图退出，中间没有其他命令，shell
       不会打印 其他警告，暂停的作业将终止。

提提示示符符((PPRROOMMPPTTIINNGG))
       在交互执行时，    bbaasshh     在准备好读入一条命令时显示主提示符     PPSS11，，
       在需要更多的输入来完成一条命令时显示             PPSS22。。             BBaasshh
       允许通过插入一些反斜杠转义的特殊字符来定制这些提示字符串，这些字符被如下解释：
              \\aa     一个 ASCII 响铃字符 (07)
              \\dd     日期，格式是 "星期 月份 日" (例如，"Tue May 26")
              \\DD{{_f_o_r_m_a_t}}
                     _f_o_r_m_a_t  被传递给  _s_t_r_f_t_i_m_e(3)，结果被插入到提示字符串中；
                     空的 _f_o_r_m_a_t 将使用语言环境特定的时间格式。花括号是必需的
              \\ee     一个 ASCII 转义字符 (033)
              \\hh     主机名，第一个 `.' 之前的部分
              \\HH     主机名
              \\jj     shell 当前管理的作业数量
              \\ll     shell 的终端设备名的基本部分
              \\nn     新行符
              \\rr     回车
              \\ss     shell 的名称， $$00 的基本部分 (最后一个斜杠后面的部分)
              \\tt     当前时间，采用 24小时制的 HH:MM:SS 格式
              \\TT     当前时间，采用 12小时制的 HH:MM:SS 格式
              \\@@     当前时间，采用 12小时制上午/下午 (am/pm) 格式
              \\AA     当前时间，采用 24小时制上午/下午格式
              \\uu     当前用户的用户名 the username of the current user
              \\vv     bbaasshh 的版本 (例如，2.00)
              \\VV     bbaasshh 的发行编号，版本号加补丁级别 (例如，2.00.0)
              \\ww     当前工作目录
              \\WW     当前工作目录的基本部分
              \\!!     此命令的历史编号
              \\##     此命令的命令编号
              \\$$     如果有效 UID 是 0，就是 ##, 其他情况下是 $$
              \\_n_n_n   对应八进制数 _n_n_n 的字符
              \\\\     一个反斜杠
              \\[[     一个不可打印字符序列的开始，可以用于在提示符中嵌入终端控制序列
              \\]]     一个不可打印字符序列的结束

       命令编号和历史编号通常是不同的：历史编号是命令在历史列表中的位置，可能
       包含从历史文件中恢复的命令       (参见下面的        HHIISSTTOORRYY        历历史史
       章节)，而命令编号是当前    shell   会话中执行的命令序列中，命令的位置。
       字符串被解码之后，它将进行扩展，要经过  parameter  expansion,   command
       substitution,  arithmetic  expansion 和 quote removal, 最后要经过 shell
       选项 pprroommppttvvaarrss 处理 (参见下面的 sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS))
       章节中，对命令 sshhoopptt 的描述)。

rreeaaddlliinnee库库((RREEAADDLLIINNEE))
       这是在交互    shell   中处理读取输入的库，除非在   shell   启动时给出了
       ----nnooeeddiittiinngg          选项。默认情况下，行编辑命令类似于           emacs
       中的那些。也可以使用      vi      样式的行编辑界面。     要在     shell
       运行之后关闭行编辑，使用内置命令  sseett  的  ++oo  eemmaaccss  或  ++oo  vvii   选项
       (参见下面的 sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节)。

   RReeaaddlliinnee NNoottaattiioonn
       在这个小节中，将使用  emacs  样式的记法来表述按键。Ctrl  键记为 C-_k_e_y，
       例如，C-n 意思是 Ctrl-N。类似的， _m_e_t_a 键记为  M-_k_e_y，因此  M-x  意味着
       Meta-x。(在没有  _m_e_t_a  键的键盘上，M-_x 意思是 ESC-_x，也就是说，按下 Esc
       键，然后按  _x  键。这使得  Esc  成为  _m_e_t_a  _p_r_e_f_i_x。M-C-_x  的组合意思是
       Esc-Ctrl-_x， 也就是按 Esc 键，然后按住 Ctrl 键，同时按 _x 键。)

       readline               命令可以有数字的               _参_数(arguments)，
       一般作为重复的计数。有些时候，它是重要参数的标记。给向前方进行的命令
       (例如，kkiillll--lliinnee)                传递负数参数，将使得命令向反方向进行。
       下面的命令如果接受参数时的行为与此不同，将另行说明。

       当命令被描述为剪切  (_k_i_l_l_i_n_g)  文本时，被删除的文本被保存，等待将来使用
       (粘贴，_y_a_n_k_i_n_g)。被剪切的文本保存在    _k_i_l_l   _r_i_n_g   中。连续的剪切使得
       文本被依次加入到一个单元中，可以一次被粘贴。不剪切文本的命令将     kill
       ring 中的文本分离。

   RReeaaddlliinnee IInniittiiaalliizzaattiioonn 初初始始化化
       readline    可以通过将命令放入初始化文件    (_i_n_p_u_t_r_c   文件)   来定制。
       文件名从变量 IINNPPUUTTRRCC 的值中获取。如果没有设置这个变量，默认是  _~_/_._i_n_p_u_‐
       _t_r_c.                           当使用                          readline
       库的程序启动时，将读取初始化文件，按键关联和变量将被设置。     readline
       初始化文件中只允许有很少的基本构造。          空行被忽略。以          ##
       开始的行是注释。以            $$            开始的行指示了有条件的构造。
       其他行表示按键关联和变量设置。

       默认的按键关联可以使用                                          _i_n_p_u_t_r_c
       文件改变。其他使用这个库的程序可以添加它们自己的命令和关联。

       例如，将

              M-Control-u: universal-argument
       或
              C-Meta-u: universal-argument
       放入 _i_n_p_u_t_r_c 将使得 M-C-u 执行 readline 命令 _u_n_i_v_e_r_s_a_l_-_a_r_g_u_m_e_n_t.

       可以识别下列字符的符号名称：  _R_U_B_O_U_T,  _D_E_L,  _E_S_C,  _L_F_D,  _N_E_W_L_I_N_E,  _R_E_T,
       _R_E_T_U_R_N, _S_P_C, _S_P_A_C_E, 和 _T_A_B.

       在命令名之外，readline
       允许将按键与一个字符串关联，当按下这个键时，将插入这个字符串
       (一个宏，_m_a_c_r_o)。

   RReeaaddlliinnee KKeeyy BBiinnddiinnggss
       _i_n_p_u_t_r_c
       文件中的控制按键关联的语法非常简单。需要的内容是命令名或宏，以及它应当关联到的按键序列。
       名称可以以两种方式指定：一个按键的符号名称，可能带有  _M_e_t_a_- 或 _C_o_n_t_r_o_l_-
       前缀，或者是一个按键序列。

       当使用    kkeeyynnaammee:_f_u_n_c_t_i_o_n_-_n_a_m_e    或    _m_a_c_r_o     形式时，     _k_e_y_n_a_m_e
       是按键以英文拼写的名称。例如：

              Control-u: universal-argument
              Meta-Rubout: backward-kill-word
              Control-o: "> output"

       在上述例子中，  _C_-_u 被关联到函数 uunniivveerrssaall--aarrgguummeenntt, _M_-_D_E_L 被关联到函数
       bbaacckkwwaarrdd--kkiillll--wwoorrdd,       而        _C_-_o        被关联为运行右边给出的宏
       (意思是，将向行中插入 ``> output'' )。

       在第二种形式中，""kkeeyysseeqq"":_f_u_n_c_t_i_o_n_-_n_a_m_e  或  _m_a_c_r_o， kkeeyysseeqq 不同于上面的
       kkeeyynnaammee，，
       表示整个按键序列的字符串可以通过将按键序列放在双引号引用中来指定。
       可以使用一些                         GNU                          Emacs
       样式的按键序列，如下例所示，但是不会识别按键的符号名称。

              "\C-u": universal-argument
              "\C-x\C-r": re-read-init-file
              "\e[11~": "Function Key 1"

       在上述例子中，  _C_-_u  被又一次关联到函数  uunniivveerrssaall--aarrgguummeenntt.   _C_-_x  _C_-_r
       被关联到函数 rree--rreeaadd--iinniitt--ffiillee, 而 _E_S_C _[ _1 _1 _~ 被关联为插入文本 ``Func‐
       tion Key 1''.

       GNU Emacs 样式的转义序列的全集为：
              \\CC--    Ctrl 前缀
              \\MM--    Meta 前缀
              \\ee     一个 Esc 字符
              \\\\     反斜杠
              \\""     字面上的 "
              \\''     字面上的 '

       除了 GNU Emacs 样式的转义序列，还有一系列反斜杠转义序列可用：
              \\aa     响铃
              \\bb     回退
              \\dd     删除
              \\ff     进纸
              \\nn     新行符
              \\rr     回车
              \\tt     水平跳格
              \\vv     竖直跳格
              \\_n_n_n   一个八比特字符，它的值是八进制值                      _n_n_n
                     (一到三个八进制数字)。
              \\xx_H_H   一个八比特字符，它的值是十六进制值                     _H_H
                     (一到两个十六进制数字)。

       输入宏的文本时，必须使用单引号或双引号引用来表明是宏的定义。
       没有引用的文本被当作函数名。在宏的定义体中，上述反斜杠转义被扩展。
       反斜杠将引用宏文本中所有其他字符，包括 " 和 '。

       BBaasshh      允许使用内建命令      bbiinndd      来显示和修改当前     readline
       按键关联。在交互使用中可以用内建命令  sseett  的   --oo   选项切换到编辑模式
       (参见下面的 sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节)。

   RReeaaddlliinnee VVaarriiaabblleess
       readline       包含额外的可用于定制它的行为的变量。可以在       _i_n_p_u_t_r_c
       文件中设置变量，使用如下形式的语句：

              sseett _v_a_r_i_a_b_l_e_-_n_a_m_e _v_a_l_u_e

       除非另外说明，readline 变量的值总是 OOnn 或 OOffff。。 变量和它们的默认值是：

       bbeellll--ssttyyllee ((aauuddiibbllee))
              控制了当  readline   需要鸣终端响铃时的动作。如果设置为   nnoonnee，
              readline          不会鸣铃。如果设置为         vviissiibbllee，readline
              使用可视的响铃，如果可用的话。   如果设置为    aauuddiibbllee，readline
              试着鸣终端响铃。
       ccoommmmeenntt--bbeeggiinn ((````##''''))
              这个字符串在执行        readline       命令       iinnsseerrtt--ccoommmmeenntt
              时被插入。这个命令在 emacs 模式下被关联为 MM--##，， 在  vi  模式下是
              ##。。
       ccoommpplleettiioonn--iiggnnoorree--ccaassee ((OOffff))
              如果设置为 OOnn，readline 进行大小写不敏感的文件名匹配和补全。
       ccoommpplleettiioonn--qquueerryy--iitteemmss ((110000))
              这个变量决定着何时向用户询问，是否查看由命令    ppoossssiibbllee--ccoommppllee‐‐
              ttiioonnss    产生的可能的补全数量。    它可以设为任何大于或等于    0
              的值。如果可能的补全数量大于或等于这个变量的值，
              用户将被提示是否愿意查看它们；否则将直接在终端上列出它们。
       ccoonnvveerrtt--mmeettaa ((OOnn))
              如果设置为   OOnn，readline   将把设置了最高位的字符转换为   ASCII
              按键序列，方法是  去掉第八位，前缀一个转义字符 (实际上，使用 Esc
              作为转义符 _m_e_t_a _p_r_e_f_i_x)。
       ddiissaabbllee--ccoommpplleettiioonn ((OOffff))
              如果设置为                                          OOnn，readline
              将禁止词的补全。补全字符将被插入到行中，就好像它们被      映射为
              sseellff--iinnsseerrtt。
       eeddiittiinngg--mmooddee ((eemmaaccss))
              控制 readline 的按键关联集合与 _e_m_a_c_s 还是 _v_i 相似。 eeddiittiinngg--mmooddee
              可以设置为 eemmaaccss 或 vvii。。
       eennaabbllee--kkeeyyppaadd ((OOffff))
              如果设置为     OOnn     ，readline    在调用时将试图启用辅助键盘。
              一些系统需要设置这个来启用方向键。
       eexxppaanndd--ttiillddee ((OOffff))
              如果设置为 OOnn，readline 试图进行词的补全时会进行波浪线扩展。
       hhiissttoorryy--pprreesseerrvvee--ppooiinntt
              如果设置为 OOnn，历史代码试着在 pprreevviioouuss--hhiissttoorryy  或  nneexxtt--hhiissttoorryy
              取回的每个历史行的相同位置中加点。
       hhoorriizzoonnttaall--ssccrroollll--mmooddee ((OOffff))
              如果设置为                  OOnn，将使得                  readline
              使用单行来显示，如果它比屏幕宽度要长，就在
              单一的屏幕行上水平滚动输入行，而不是自动回绕到新行。
       iinnppuutt--mmeettaa ((OOffff))
              如果设置为             OOnn，readline             将允许八比特输入
              (也就是说，它不会将它读入的字符中最高位删除)，
              不管它能支持什么样的终端要求。名称 mmeettaa--ffllaagg 与此变量同义。
       iisseeaarrcchh--tteerrmmiinnaattoorrss ((````CC--[[CC--JJ''''))
              用于终止增量的搜索，不再将字符当作命令执行的字符串。
              如果这个变量没有赋值，字符串 _E_s_c 和 _C_-_J 将终止增量的搜索。
       kkeeyymmaapp ((eemmaaccss))
              设置当前    readline    键盘映射。有效的键盘映射名称是    _e_m_a_c_s_,
              _e_m_a_c_s_-_s_t_a_n_d_a_r_d_,  _e_m_a_c_s_-_m_e_t_a_,  _e_m_a_c_s_-_c_t_l_x_,  _v_i_,  _v_i_-_c_o_m_m_a_n_d，还有
              _v_i_-_i_n_s_e_r_t_。  _v_i  等价于  _v_i_-_c_o_m_m_a_n_d;  _e_m_a_c_s  等价于  _e_m_a_c_s_-_s_t_a_n_‐
              _d_a_r_d。默认值是 _e_m_a_c_s; eeddiittiinngg--mmooddee 的值也会影响默认的键盘映射。
       mmaarrkk--ddiirreeccttoorriieess ((OOnn))
              如果设置为 OOnn，补全的目录名会添加一个斜杠。
       mmaarrkk--mmooddiiffiieedd--lliinneess ((OOffff))
              如果设置为 OOnn，已被修改的历史行将显示为前缀一个星号 (**)。
       mmaarrkk--ssyymmlliinnkkeedd--ddiirreeccttoorriieess ((OOffff))
              如果设置为
              OOnn，补全的名称如果是到目录的符号链接，则将添加一个斜杠       (与
              mmaarrkk--ddiirreeccttoorriieess 的值同样处理)。
       mmaattcchh--hhiiddddeenn--ffiilleess ((OOnn))
              这个变量，如果设置为             OOnn，将使得             readline
              在进行文件名补全时，匹配以    `.'    开头的文件     (隐藏文件)，
              除非用户在要补全的文件名中给出了前导的 `.'。
       oouuttppuutt--mmeettaa ((OOffff))
              如果设置为                                          OOnn，readline
              将直接显示设置了第八位的字符，而不是转化为一个带            meta
              前缀的转义序列。
       ppaaggee--ccoommpplleettiioonnss ((OOnn))
              如果设置为   OOnn，readline   将使用内建的类似  _m_o_r_e  的分页程序，
              来每次显示一屏可能的补全。
       pprriinntt--ccoommpplleettiioonnss--hhoorriizzoonnttaallllyy ((OOffff))
              如果设置为                                          OOnn，readline
              将匹配的补全按字母表顺序排序，然后水平排列显示出来，
              而不是在屏幕上竖直排列显示。
       sshhooww--aallll--iiff--aammbbiigguuoouuss ((OOffff))
              这将调整补全函数的默认行为。如果设置为                       oonn,
              拥有多于一个可能的补全的词将立即列出所有匹配，而不是鸣响铃。
       vviissiibbllee--ssttaattss ((OOffff))
              如果设置为
              OOnn，在列出可能的补全时，将在文件名后面添加一个表示文件类型的字符，
              文件类型由 _s_t_a_t(2) 报告。

   RReeaaddlliinnee CCoonnddiittiioonnaall CCoonnssttrruuccttss
       readline  实现了一种功能，本质上与  C  预处理器进行条件编译的功能类似，
       允许根据测试的结果进行键盘关联和变量设置。其中使用了四种解释器指令。

       $$iiff    $$iiff     结构允许根据编辑模式，正在使用的终端，使用      readline
              的应用程序来设定按键关联。
              测试的文本包括一行，直到行尾；不必用字符来隔离它。

              mmooddee   $$iiff 结构的 mmooddee== 形式用于测试 readline 处于 emacs 还是 vi
                     模式。   这可以与命令   sseett  kkeeyymmaapp  结合使用，例如，设置
                     _e_m_a_c_s_-_s_t_a_n_d_a_r_d 和 _e_m_a_c_s_-_c_t_l_x 键盘映射，仅当  readline  以
                     emacs 模式启动。

              tteerrmm   tteerrmm==
                     形式用于包含与终端相关的按键关联，也许是将按键序列输出与终端的功能键相关联。
                     等号     ==     右边的词被同终端的全名和名称中第一个     --
                     前面的一部分相比较。  例如，允许  _s_u_n  同时匹配  _s_u_n   和
                     _s_u_n_-_c_m_d_。

              aapppplliiccaattiioonn
                     aapppplliiccaattiioonn      结构用于包含应用程序相关的设置。每个使用
                     readline      的程序都设置       _a_p_p_l_i_c_a_t_i_o_n       _n_a_m_e，
                     初始化文件可以测试它的值。它可用于将一个按键序列与对特定的程序有用的功能相关联。
                     例如，下列命令添加了一个按键序列，用以引用           bash
                     中当前的词或前一个词

                     $$iiff Bash
                     # Quote the current or previous word
                     "\C-xq": "\eb\"\ef\""
                     $$eennddiiff

       $$eennddiiff 上例中的这个命令，结束了一个 $$iiff 命令。

       $$eellssee  如果测试失败，$$iiff 指令中这个分支的命令将被执行。

       $$iinncclluuddee
              这个指令使用单个文件名作为参数，从文件中读取命令和按键关联。例如，下列指令
              将读取 _/_e_t_c_/_i_n_p_u_t_r_c：

              $$iinncclluuddee  _/_e_t_c_/_i_n_p_u_t_r_c

   SSeeaarrcchhiinngg
       readline   提供了从命令历史中搜索包含给定字符串的行的命令   (参见下面的
       HHIISSTTOORRYY 历历史史 章节)。有两种搜索模式： _i_n_c_r_e_m_e_n_t_a_l 和 _n_o_n_-_i_n_c_r_e_m_e_n_t_a_l.

       增量的搜索在用户结束输入搜索字符串时开始。在搜索字符串的每个字符被输入的同时，
       readline                     显示与已输入的字符串匹配的下一个历史条目。
       增量的搜索只要求输入能找到期望的历史条目所需的那么多字符。 iisseeaarrcchh--tteerr‐‐
       mmiinnaattoorrss                       变量中的字符用来终止一次增量的搜索。如果
       这个变量没有被赋值，Esc  和  Ctrl-J 字符串将结束一次增量的搜索。 Ctrl-G
       将取消一次增量的搜索，恢复初始的行。当搜索终止时，包含搜索字符串
       的历史条目成为当前行。

       要从历史列表中找到其他匹配的条目，适当地键入    Ctrl-S    或   Ctrl-R。
       这样将在历史中向前/向后搜索下一个匹配已输入的搜索字符串的条目。
       其他关联到某个    readline   命令的按键序列将终止搜索并执行关联的命令。
       例如，_n_e_w_l_i_n_e 将终止搜索，接受当前行，从而执行历史列表中的命令。

       readline  可以记住上次增量搜索的字符串。如果键入两次   Ctrl-R，中间没有
       输入任何字符来定义一个新的搜索字符串，那么将使用已记住的搜索字符串。

       非增量的搜索将整个搜索字符串读入，然后才开始搜索匹配的历史条目。
       搜索字符串可以由用户输入，或者是当前行的内容的一部分。

   RReeaaddlliinnee CCoommmmaanndd NNaammeess
       下面列出的是命令的名称以及默认情况下它们关联的按键序列。
       命令名称如果没有对应的按键序列，那么默认是没有关联的。在下列描述中， 点
       (_p_o_i_n_t)      指当前光标位置，标记      (_m_a_r_k)      指命令      sseett--mmaarrkk
       保存的光标位置。point 和 mark 之间的文本被称为范围 (_r_e_g_i_o_n)。

   CCoommmmaannddss ffoorr MMoovviinngg 移移动动
       bbeeggiinnnniinngg--ooff--lliinnee ((CC--aa))
              移动到当前行的开始。
       eenndd--ooff--lliinnee ((CC--ee))
              移动到当前行的结尾。
       ffoorrwwaarrdd--cchhaarr ((CC--ff))
              向前移动一字。
       bbaacckkwwaarrdd--cchhaarr ((CC--bb))
              向后移动一字。
       ffoorrwwaarrdd--wwoorrdd ((MM--ff))
              向前移动到下一词尾。词由字符 (字母和数字) 组成。
       bbaacckkwwaarrdd--wwoorrdd ((MM--bb))
              向后移动到当前或上一词首。
       cclleeaarr--ssccrreeeenn ((CC--ll))
              清除屏幕，保留当前行在屏幕顶端。有参数时，刷新当前行，不清屏。
       rreeddrraaww--ccuurrrreenntt--lliinnee
              刷新当前行。

   CCoommmmaannddss ffoorr MMaanniippuullaattiinngg tthhee HHiissttoorryy 操操纵纵历历史史行行
       aacccceepptt--lliinnee ((NNeewwlliinnee,, RReettuurrnn))
              接受这一行，不管光标在什么位置。如果行非空，将根据变量  HHIISSTTCCOONN‐‐
              TTRROOLL
              的状态加入到历史列表中。如果行是修改过的历史行，将恢复该历史行到初始状态。
       pprreevviioouuss--hhiissttoorryy ((CC--pp))
              从历史列表中取得前一个命令，从列表中向后移动。
       nneexxtt--hhiissttoorryy ((CC--nn))
              从历史列表中取得后一个命令，从列表中向前移动。
       bbeeggiinnnniinngg--ooff--hhiissttoorryy ((MM--<<))
              移动到历史中的第一行。
       eenndd--ooff--hhiissttoorryy ((MM-->>))
              移动到输入历史行的末尾，也就是当前输入的行的末尾。
       rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((CC--rr))
              从当前行开始向后搜索，按照需要在历史中向“上”移动。这是一个增量的搜索。
       ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((CC--ss))
              从当前行开始向前搜索，按照需要在历史中向“下”移动。这是一个增量的搜索。
       nnoonn--iinnccrreemmeennttaall--rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((MM--pp))
              从当前行开始向后，使用非增量搜索来查找用户给出的字符串。
       nnoonn--iinnccrreemmeennttaall--ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((MM--nn))
              从当前行开始向前，使用非增量搜索来查找用户给出的字符串。
       hhiissttoorryy--sseeaarrcchh--ffoorrwwaarrdd
              从当前行开始向前搜索历史，查找从当前行首到 point  之间的字符串。
              这是一个非增量的搜索。
       hhiissttoorryy--sseeaarrcchh--bbaacckkwwaarrdd
              从当前行开始向后搜索历史，查找从当前行首到  point 之间的字符串。
              这是一个非增量的搜索。
       yyaannkk--nntthh--aarrgg ((MM--CC--yy))
              将前一个命令的第一个参数 (通常是上一行的第二个词)  插入到  point
              位置。有参数 _n 时，将前一个命令的第 _n 个词 (前一个命令中的词从 0
              开始计数) 插入到  point  位置。负数参数则插入前一个命令倒数第  _n
              个词。
       yyaannkk--llaasstt--aarrgg ((MM--..,, MM--__))
              插入前一个命令的最后一个参数
              (上一历史条目的最后一个词)。有参数时，                行为类似于
              yyaannkk--nntthh--aarrgg。后继的             yyaannkk--llaasstt--aarrgg            调用将
              从历史列表中向后移动，依次将每行的最后一个参数插入。
       sshheellll--eexxppaanndd--lliinnee ((MM--CC--ee))
              扩展行，像  shell   做的那样。其中包含别名和历史扩展，还有所有的
              shell      词的扩展。      参见下面的      HHIISSTTOORRYY     EEXXPPAANNSSIIOONN
              中关于历史扩展的描述。
       hhiissttoorryy--eexxppaanndd--lliinnee ((MM--^^))
              在当前行进行历史扩展。参见下面的        HHIISSTTOORRYY        EEXXPPAANNSSIIOONN
              中关于历史扩展的描述。
       mmaaggiicc--ssppaaccee
              在当前行进行历史扩展，并插入一个空格。参见下面的  HHIISSTTOORRYY EEXXPPAANN‐‐
              SSIIOONN 中关于历史扩展的描述。
       aalliiaass--eexxppaanndd--lliinnee
              在当前行进行别名扩展，参见上面的 AALLIIAASSEESS 中关于别名扩展的描述。
       hhiissttoorryy--aanndd--aalliiaass--eexxppaanndd--lliinnee
              在当前行进行历史和别名扩展。
       iinnsseerrtt--llaasstt--aarrgguummeenntt ((MM--..,, MM--__))
              与 yyaannkk--llaasstt--aarrgg 同义。
       ooppeerraattee--aanndd--ggeett--nneexxtt ((CC--oo))
              接受当前行，加以执行，从历史中取出相对当前行的下一行进行编辑。
              任何参数都被忽略。
       eeddiitt--aanndd--eexxeeccuuttee--ccoommmmaanndd ((CC--xxCC--ee))
              启动一个编辑器，编辑当前命令行，将结果作为 shell 命令运行。 BBaasshh
              将依次试着运行 $$FFCCEEDDIITT, $$EEDDIITTOORR, 和 _e_m_a_c_s 作为编辑器。

   CCoommmmaannddss ffoorr CChhaannggiinngg TTeexxtt 改改变变文文本本
       ddeelleettee--cchhaarr ((CC--dd))
              删除            point            处的字符。如果            point
              在行首，行中没有字符，最后一次输入的字符            没有被关联到
              ddeelleettee--cchhaarr，将返回 EEOOFF.
       bbaacckkwwaarrdd--ddeelleettee--cchhaarr ((RRuubboouutt))
              删除光标之后的字符。当给出一个数值的参数时，保存删除的文本到
              kill ring 中。
       ffoorrwwaarrdd--bbaacckkwwaarrdd--ddeelleettee--cchhaarr
              删除光标下的字符，除非光标在行尾，此时删除光标后的字符。
       qquuootteedd--iinnsseerrtt ((CC--qq,, CC--vv))
              将输入的下一字符保持原样添加到行中。例如，可以用它来插入类似 CC--qq
              的字符。
       ttaabb--iinnsseerrtt ((CC--vv TTAABB))
              插入一个跳格符号。
       sseellff--iinnsseerrtt ((aa,, bb,, AA,, 11,, !!,, ......))
              插入键入的字符。
       ttrraannssppoossee--cchhaarrss ((CC--tt))
              将  point  之前的字符向前移动，越过  point  处的字符，同时也改变
              point     的位置。     如果     point    在行尾，将调换    point
              之前的两个字符。负数参数没有作用。
       ttrraannssppoossee--wwoorrddss ((MM--tt))
              将 point 之前的词向前移动，越过 point  处的词，同时也改变  point
              的位置。 如果 point 在行尾，将调换行中的最后两个词。
       uuppccaassee--wwoorrdd ((MM--uu))
              将当前                                                (或下一个)
              词变成全大写。有负值的参数时，将前一个词变为大写，    但是不移动
              point。
       ddoowwnnccaassee--wwoorrdd ((MM--ll))
              将当前                                                (或下一个)
              词变成全小写。有负值的参数时，将前一个词变为小写，    但是不移动
              point。
       ccaappiittaalliizzee--wwoorrdd ((MM--cc))
              将当前                                                (或下一个)
              词变为首字大写。有负值的参数时，将前一个词变为首字大写，
              但是不移动 point。
       oovveerrwwrriittee--mmooddee
              控制插入/改写模式。给出一个正整数参数时，切换为改写模式。给出一个非正数
              参数时，切换为插入模式。这个命令只影响   eemmaaccss   模式；vvii   模式
              的改写与此不同。每个对                                _r_e_a_d_l_i_n_e_(_)
              的调用都以插入模式开始。在改写模式下，    关联到     sseellff--iinnsseerrtt
              的字符替换  point  处的字符，而不是将它推到右边。  关联到  bbaacckk‐‐
              wwaarrdd--ddeelleettee--cchhaarr     的字符以空格替换      point      前的字符。
              默认情况下，这个命令没有关联。

   KKiilllliinngg aanndd YYaannkkiinngg 剪剪切切和和粘粘贴贴
       kkiillll--lliinnee ((CC--kk))
              剪切从 point 到行尾的文本。
       bbaacckkwwaarrdd--kkiillll--lliinnee ((CC--xx RRuubboouutt))
              反向剪切到行首。
       uunniixx--lliinnee--ddiissccaarrdd ((CC--uu))
              反向剪切到行首。与       _b_a_c_k_w_a_r_d_-_k_i_l_l_-_l_i_n_e       没有什么区别。
              剪切的文本被保存于 kill-ring 中。
       kkiillll--wwhhoollee--lliinnee
              剪切当前行中所有字符，不管 point 在什么位置。
       kkiillll--wwoorrdd ((MM--dd))
              剪切从         point         到当前词尾，或者如果          point
              在词之间，那么剪切到下一词尾。
       bbaacckkwwaarrdd--kkiillll--wwoorrdd ((MM--RRuubboouutt))
              剪切 point 之后的词。词的边界与 bbaacckkwwaarrdd--wwoorrdd 使用的相同。
       uunniixx--wwoorrdd--rruubboouutt ((CC--ww))
              剪切   point  之后的词，使用空白作为词的边界。剪切的文本被保存于
              kill-ring 中。
       ddeelleettee--hhoorriizzoonnttaall--ssppaaccee ((MM--\\))
              删除 point 两边的所有空格和跳格。
       kkiillll--rreeggiioonn
              剪切当前 region 的文本。
       ccooppyy--rreeggiioonn--aass--kkiillll
              将 region 的文本复制到剪切缓冲区中。
       ccooppyy--bbaacckkwwaarrdd--wwoorrdd
              将 point 前面的词复制到剪切缓冲区中。  词的边界与  bbaacckkwwaarrdd--wwoorrdd
              使用的相同。
       ccooppyy--ffoorrwwaarrdd--wwoorrdd
              将  point  之后的词复制到剪切缓冲区中。 词的边界与 bbaacckkwwaarrdd--wwoorrdd
              使用的相同。
       yyaannkk ((CC--yy))
              将 kill-ring 顶部的内容粘贴到 point 处的缓冲区中
       yyaannkk--ppoopp ((MM--yy))
              轮转  kill-ring，粘贴新的顶部内容。只能在   yyaannkk   或   yyaannkk--ppoopp
              之后使用。

   NNuummeerriicc AArrgguummeennttss 数数值值参参数数
       ddiiggiitt--aarrgguummeenntt ((MM--00,, MM--11,, ......,, MM----))
              将这个数字加入已有的            (already           accumulating)
              参数中，或者开始新的参数。 M-- 开始一个否定的参数。
       uunniivveerrssaall--aarrgguummeenntt
              这是指定参数的另一种方法。如果这个命令后面跟着一个或多个数字，
              可能还包含前导的负号，这些数字定义了参数。如果命令之后跟随着数字，再次执行
              uunniivveerrssaall--aarrgguummeenntt
              将结束数字参数，但是其他情况下被忽略。有一种特殊情况，如果命令之后紧接着
              一个并非数字或负号的字符，下一命令的参数计数将乘以           4。
              参数计数初始是   1，因此第一次执行这个函数，使得参数计数为   4，
              第二次执行使得参数计数为 16，以此类推。

   CCoommpplleettiinngg 补补全全
       ccoommpplleettee ((TTAABB))
              试着对         point          之前的文本进行补全。          BBaasshh
              依次试着将文本作为一个变量   (如果文本以   $$   开始)，一个用户名
              (如果文本以  ~~  开始)，主机名  (如果文本以   @@   开始)，或者命令
              (以及别名和函数) 来补全。如果这些都没有匹配，将尝试文件名补全。
       ppoossssiibbllee--ccoommpplleettiioonnss ((MM--??))
              列出 point 之前的文本可能的补全。
       iinnsseerrtt--ccoommpplleettiioonnss ((MM--**))
              插入 ppoossssiibbllee--ccoommpplleettiioonnss 已产生的 point 之前的文本所有的补全。
       mmeennuu--ccoommpplleettee
              与                                                      ccoommpplleettee
              相似，但是使用可能的补全列表中的某个匹配替换要补全的词。
              重复执行    mmeennuu--ccoommpplleettee   将遍历可能的补全列表，插入每个匹配。
              到达补全列表的结尾时，鸣终端响铃  (按照  bbeellll--ssttyyllee  的设置来做)
              并恢复初始的文本。     参数     _n    将在匹配列表中向前移动    _n
              步；负数参数可以用于在列表中向后移动。    这个命令应当与     TTAABB
              键关联，但是默认情况下是没有关联的。
       ddeelleettee--cchhaarr--oorr--lliisstt
              删除光标下的字符，如果不是在行首或行尾    (类似   ddeelleettee--cchhaarr)。
              如果在行尾，行为与          ppoossssiibbllee--ccoommpplleettiioonnss          一致。
              这个命令默认没有关联。
       ccoommpplleettee--ffiilleennaammee ((MM--//))
              尝试对 point 之前的文本进行文件名补全。
       ppoossssiibbllee--ffiilleennaammee--ccoommpplleettiioonnss ((CC--xx //))
              列出 point 之前的文本可能的补全，将它视为文件名。
       ccoommpplleettee--uusseerrnnaammee ((MM--~~))
              尝试对 point 之前的文本进行补全，将它视为用户名。
       ppoossssiibbllee--uusseerrnnaammee--ccoommpplleettiioonnss ((CC--xx ~~))
              列出 point 之前的文本可能的补全，将它视为用户名。
       ccoommpplleettee--vvaarriiaabbllee ((MM--$$))
              尝试对 point 之前的文本进行补全，将它视为 shell 变量。
       ppoossssiibbllee--vvaarriiaabbllee--ccoommpplleettiioonnss ((CC--xx $$))
              列出 point 之前的文本可能的补全，将它视为 shell 变量。
       ccoommpplleettee--hhoossttnnaammee ((MM--@@))
              尝试对 point 之前的文本进行补全，将它视为主机名。
       ppoossssiibbllee--hhoossttnnaammee--ccoommpplleettiioonnss ((CC--xx @@))
              列出 point 之前的文本可能的补全，将它视为主机名。
       ccoommpplleettee--ccoommmmaanndd ((MM--!!))
              尝试对                                                     point
              之前的文本进行补全，将它视为命令名。命令补全尝试着将此文本
              依次与别名，保留字，shell                            函数，shell
              内建命令，最后是可执行文件名进行匹配。
       ppoossssiibbllee--ccoommmmaanndd--ccoommpplleettiioonnss ((CC--xx !!))
              列出 point 之前的文本可能的补全，将它视为命令名。
       ddyynnaammiicc--ccoommpplleettee--hhiissttoorryy ((MM--TTAABB))
              尝试对                                                     point
              之前的文本进行补全，将此文本与历史列表中的行相比较来查找可能的补全匹配。
       ccoommpplleettee--iinnttoo--bbrraacceess ((MM--{{))
              进行文件名补全，将可能的补全列表放在花括号中插入，使得列表可以被
              shell 使用 (参见上面的 BBrraaccee EExxppaannssiioonn 花括号扩展)。

   KKeeyybbooaarrdd MMaaccrrooss 宏宏
       ssttaarrtt--kkbbdd--mmaaccrroo ((CC--xx (())
              开始保存输入字符为当前键盘宏。
       eenndd--kkbbdd--mmaaccrroo ((CC--xx ))))
              停止保存输入字符为当前键盘宏，保存宏定义。
       ccaallll--llaasstt--kkbbdd--mmaaccrroo ((CC--xx ee))
              重新执行上次定义的键盘宏，即显示出宏中的字符，好像它们是从键盘输入的一样。

   MMiisscceellllaanneeoouuss
       rree--rreeaadd--iinniitt--ffiillee ((CC--xx CC--rr))
              读入 _i_n_p_u_t_r_c 文件的内容，合并其中的按键关联和变量赋值。
       aabboorrtt ((CC--gg))
              取消当前编辑命令，鸣终端响铃 (按照 bbeellll--ssttyyllee 的设置来做)。
       ddoo--uuppppeerrccaassee--vveerrssiioonn ((MM--aa,, MM--bb,, MM--_x,, ......))
              如果有              Meta              前缀的字符               _x
              是小写的，那么与命令相关连的是对应的大写字符。
       pprreeffiixx--mmeettaa ((EESSCC))
              将输入的下一个字符加上 Meta 前缀。 EESSCC ff 等价于 MMeettaa--ff.
       uunnddoo ((CC--__,, CC--xx CC--uu))
              增量的撤销，分别记住每一行。
       rreevveerrtt--lliinnee ((MM--rr))
              撤销这一行的所有修改。这与执行命令                          uunnddoo
              足够多次的效果相同，将这一行恢复到初始状态。
       ttiillddee--eexxppaanndd ((MM--&&))
              对当前词进行波浪线扩展。
       sseett--mmaarrkk ((CC--@@,, MM--<<ssppaaccee>>))
              在                         point                          处设置
              mark。如果给出了数值的参数，标记被设置到那个位置。
       eexxcchhaannggee--ppooiinntt--aanndd--mmaarrkk ((CC--xx CC--xx))
              交换                           point                          和
              mark。当前光标位置被设置为保存的位置，旧光标位置被保存为 mark。
       cchhaarraacctteerr--sseeaarrcchh ((CC--]]))
              读入一个字符，point
              移动到这个字符下一次出现的地方。负数将搜索上一个出现。
       cchhaarraacctteerr--sseeaarrcchh--bbaacckkwwaarrdd ((MM--CC--]]))
              读入一个字符，point
              移动到这个字符上一次出现的地方。负数将搜索下面的出现。
       iinnsseerrtt--ccoommmmeenntt ((MM--##))
              没有数值的参数时，readline          变量           ccoommmmeenntt--bbeeggiinn
              的值将被插入到当前行首。如果给出一个数值的参数，命令的行为类似于一个开关：
              如果行首字符不匹配 ccoommmmeenntt--bbeeggiinn  的值，将插入这个值，否则  匹配
              ccoommmmeenntt--bbeeggiinn
              的字符将被从行首删除。在两种情况下，这一行都被接受，
              好像输入了新行符一样。ccoommmmeenntt--bbeeggiinn
              的默认值使得这个命令将当前行变成           一条            shell
              注释。如果数值参数使得注释字符被删除，这一行将被 shell 执行。
       gglloobb--ccoommpplleettee--wwoorrdd ((MM--gg))
              point
              之前的词被当作路径扩展的一个模式，尾部暗含了一个星号。这个模式被用来
              为可能的补全产生匹配的文件名列表。
       gglloobb--eexxppaanndd--wwoorrdd ((CC--xx **))
              point
              之前的词被当作路径扩展的一个模式，匹配的文件名的列表被插入，替换这个词。
              如果给出一个数值参数，在路径扩展之前将添加一个星号。
       gglloobb--lliisstt--eexxppaannssiioonnss ((CC--xx gg))
              显示                                            gglloobb--eexxppaanndd--wwoorrdd
              可能产生的扩展的列表，重绘当前行。如果给出一个数值参数，在路径扩展之前将添加一个星号。
       dduummpp--ffuunnccttiioonnss
              向                                                      readline
              输出流打印所有的函数和它们的按键关联。如果给出一个数值参数，
              输出将被格式化，可以用作 _i_n_p_u_t_r_c 文件一部分。
       dduummpp--vvaarriiaabblleess
              向        readline        输出流打印所有可设置的        readline
              函数。如果给出一个数值参数，  输出将被格式化，可以用作   _i_n_p_u_t_r_c
              文件一部分。
       dduummpp--mmaaccrrooss
              向        readline       输出流打印所有关联到宏的       readline
              按键序列以及它们输出的字符串。
              如果给出一个数值参数，输出将被格式化，可以用作           _i_n_p_u_t_r_c
              文件一部分。
       ddiissppllaayy--sshheellll--vveerrssiioonn ((CC--xx CC--vv))
              显示当前 bbaasshh 实例的版本信息。

   PPrrooggrraammmmaabbllee CCoommpplleettiioonn 可可编编程程补补全全
       当试图对一个命令的参数进行词的补全时，如果已经使用内建命令     ccoommpplleettee
       定义了这个命令的补全规则  ( ccoommppssppeecc)，将启动可编程补全功能 (参见下面的
       sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节)。

       首先，命令名被确认。如果针对这个命令有补全规则的定义，那么将使用
       规则来产生可能的词的补全的列表。如果命令词是一个路径全名，将首先搜索
       针对这个路径全名的规则。如果针对这个路径全名没有找到规则，将尝试查找
       针对最后一个斜杠后面的部分的规则。

       一旦找到了一个规则，它将用作产生匹配的词。如果没有找到，将进行上面 CCoomm‐‐
       pplleettiinngg 中描述的 bbaasshh 默认的补全。

       首先，将执行规则指定的动作。只有以被补全的词开始的匹配词才会被返回。
       当在文件或目录名补全中使用   --ff   或   --dd  选项时，shell  变量  FFIIGGNNOORREE
       将用于对匹配进行过滤。

       接下来，将产生所有由--GG             选项给出的文件名扩展模式指定的补全。
       模式产生的词不必匹配要补全的词。shell          变量          GGLLOOBBIIGGNNOORREE
       不会用于过滤匹配结果，但是变量 FFIIGGNNOORREE 会被使用。

       接下来，将考虑       --WW        选项的参数指定的字符串。这个字符串首先被
       划分，用特殊变量   IIFFSS   中的字符作为分隔符。shell   引用被当作一个词。
       接下来，每个词被扩展，使用上面  EEXXPPAANNSSIIOONN  中描述的  brace   expansion,
       tilde expansion, parameter 和 variable expansion, command substitution,
       arithmetic       expansion,       以及        pathname        expansion
       规则处理。对于结果，再使用上面  WWoorrdd  SSpplliittttiinngg  中描述的规则划分成词。
       扩展的结果与要补全的词进行前部一致的比较，匹配的词成为可能的补全。

       在这些匹配被产生后，任何由    --FF     和     --CC     选项指定的     shell
       函数和命令将被执行。当命令或函数被执行时，变量  CCOOMMPP__LLIINNEE 和 CCOOMMPP__PPOOIINNTT
       被赋值，使用上面   SShheellll   VVaarriiaabblleess   中的规则。   如果要执行    shell
       函数，还将设置变量           CCOOMMPP__WWOORRDDSS          和          CCOOMMPP__CCWWOORRDD
       当函数或命令被执行时，第一个参数是等待参数被补全的命令的名称，
       第二个参数是要补全的词，第三个参数是当前命令行中，要补全的词前面的词。
       对要补全的词产生的补全不会进行任何过滤；函数或命令在产生匹配时有完全的自由。

       任何    --FF    指定的函数将被首先执行。函数可以使用任何   shell   功能，
       包含内建命令  _c_o_m_p_g_e_n，来产生匹配。它必须将可能的补全放到数组变量  CCOOMM‐‐
       PPRREEPPLLYY 中。

       接下来，任何       --CC      选项指定的命令将被执行，其执行环境与命令替换
       的环境相同。它应当向标准输出打印一个补全的列表，每行一个。
       反斜杠可以用来转义一个新行符，如果需要的话。

       所有可能的补全都产生之后，将对列表进行      --XX     选项指定的任何过滤。
       过滤器是一个模式，和路径名扩展中的一样；模式中的        &&        替换为
       要补全的词。字面上的   &&   可以用反斜杠转义；反斜杠在进行匹配时被删除。
       任何匹配这个模式的补全将从列表中删除。前导的    !!    将使模式含义相反；
       这种情况下，任何不匹配这个模式的补全将被删除。

       最后，B-P      和     --SS     指定的任何前缀和后缀被添加到补全列表的每个
       成员后面，结果返回给 readline 补全代码，作为可能的补全列表。

       如果先前执行的动作没有产生任何匹配，并且在定义 compspec 规则时，为 ccoomm‐‐
       pplleettee 命令提供了 --oo ddiirrnnaammee 选项，将尝试目录名补全。

       默认情况下，如果找到了一个规则，它产生的任何东西都被返回给补全代码，
       作为可能的补全的全集。不再尝试默认的   bbaasshh    补全，readline    默认的
       文件名补全也会禁止。如果定义规则时，为  ccoommpplleettee  命令提供了 --oo ddeeffaauulltt
       选项，在规则没有产生匹配时将进行 readline 默认的补全处理。

       当一个规则指出期望目录名补全时，可编程补全函数强制             readline
       在补全的名称
       后面添加一个斜杠，如果它是一个到目录的符号连接。然后还要经过   readline
       变量    mmaarrkk--ddiirreeccttoorriieess   的值处理，不管   readline   变量   mmaarrkk--ssyymm‐‐
       lliinnkkeedd--ddiirreeccttoorriieess 的值是什么。

历历史史((HHIISSTTOORRYY))
       当启用内建命令 sseett 的 --oo hhiissttoorryy 选项时，shell  允许访问  _c_o_m_m_a_n_d  _h_i_s_‐
       _t_o_r_y，以前输入的命令的列表。                                   HHIISSTTSSIIZZEE
       的值用作命令列表中保存的命令数量。   过去   HHIISSTTSSIIZZEE   个   (默认为500)
       命令将被保存。shell 将每条命令在进行参数和变量扩展之前 保存到历史列表中
       (参见上面的 EEXXPPAANNSSIIOONN 段落)，但是是在历史扩展进行之后，并且要经过 shell
       变量 HHIISSTTIIGGNNOORREE 和 HHIISSTTCCOONNTTRROOLL 处理。

       在启动时，历史根据以变量  HHIISSTTFFIILLEE  的值为名的文件 (默认是 _~_/_._b_a_s_h___h_i_s_‐
       _t_o_r_y)          进行初始化。          如果需要的话，以          HHIISSTTFFIILLEE
       为名的文件将被截断，来包含不超过变量                       HHIISSTTFFIILLEESSIIZZEE
       的值指定的行数。当交互       shell        退出时，最后        $$HHIISSTTSSIIZZEE
       行被从历史列表中复制到  $$HHIISSTTFFIILLEE 文件中。如果启用了 shell 选项 hhiissttaapp‐‐
       ppeenndd    (参见下面的    sshheellll    内内建建命命令令((SSHHEELLLL    BBUUIILLTTIINN     CCOOMMMMAANNDDSS))
       章节中对内建命令                                                  sshhoopptt
       的描述)，这些行被追加到历史文件中，否则历史文件被覆盖。如果    HHIISSTTFFIILLEE
       被取消定义，或者如果历史文件不可写，历史将不会保存。保存历史之后，
       历史文件被截断，以包含不超过   HHIISSTTFFIILLEESSIIZZEE    行。如果    HHIISSTTFFIILLEESSIIZZEE
       被取消定义，不会进行截断操作。

       内建命令  ffcc  (参见下面的  sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS)) 章节)
       可以用来列出或修改并重新执行历史列表中的一部分。内建命令        hhiissttoorryy
       可以用来显示或修改历史列表，操作历史文件。当使用命令行编辑时，每种
       编辑模式都有搜索命令，提供对历史列表的访问。

       shell   允许控制哪些命令被保存到历史列表中。可以设置   HHIISSTTCCOONNTTRROOLL   和
       HHIISSTTIIGGNNOORREE 变量，来使得 shell 只保存输入命令的一个子集。shell 选项 ccmmdd‐‐
       hhiisstt                      如果被启用，将使得                      shell
       将多行的命令的每一行保存到同一个历史条目中，
       在需要的地方添加分号来保证语义的正确性。shell 选项 lliitthhiisstt  使得  shell
       保存命令时，保留嵌入的新行而不是用分号代替。参见下面              sshheellll
       内内建建命命令令((SSHHEELLLL      BBUUIILLTTIINN      CCOOMMMMAANNDDSS))      中，内建命令      sshhoopptt
       的描述，有关设置和取消 shell 选项的信息。

历历史史扩扩展展((""HHIISSTTOORRYY EEXXPPAANNSSIIOONN""))
       shell                    支持历史扩展机制，类似于                   ccsshh
       中历史扩展。这一节描述了可用的语法特征。在交互的                  shell
       中这一机制被默认启用，   可以使用内建命令   sseett   的   --HH  选项来禁用它
       (参见下面的  sshheellll  内内建建命命令令((SSHHEELLLL  BBUUIILLTTIINN  CCOOMMMMAANNDDSS))  章节)。非交互的
       shell 默认不进行历史扩展。

       历史扩展将历史列表中的词引入输入流中，使得可以方便地重复已执行命令，
       在当前输入行中为前一个命令插入新的参数，
       或者快速修正前一个命令中的错误。

       历史扩展在读入一整行后，在      shell      将它拆分成词之前立即进行。它
       由两部分组成。首先是判断替换中使用历史列表中哪一行。其次是选择那一行中要包含到当前行中的部分。
       从历史中选择的行称为        _e_v_e_n_t，从那一行中选择的部分是       _w_o_r_d_s。
       可以用多种多样的                                              _m_o_d_i_f_i_e_r_s
       来操纵所选的词。在读入输入时，行被按照同样方式分解成词，     因此多个以
       _m_e_t_a_c_h_a_r_a_c_t_e_r                分隔的词，如果被引号包含，就被当成一个词。
       历史扩展由历史扩展字符引入，默认是           !!。只有反斜杠          (\\)
       和单引号可以引用历史扩展字符。

       内建命令  sshhoopptt  可以设定多个选项值，来调整历史扩展的行为。如果   shell
       选项  hhiissttvveerriiffyy 被启用 (参见内建命令 sshhoopptt 的描述)，并且正在使用 rreeaadd‐‐
       lliinnee，，                   历史替换不会被立即传给                   shell
       解释器。与此相对，扩展后的行被重新载入                         rreeaaddlliinnee
       编辑缓冲区，进行进一步的修改。如果正在使用 rreeaaddlliinnee，， 并且启用了  shell
       选项       hhiissttrreeeeddiitt，，      失败的历史替换将被重新载入到      rreeaaddlliinnee
       编辑缓冲区，进行改正。内建命令          hhiissttoorryy          的          --pp
       选项可以用来在执行之前查看历史扩展将如何进行。内建命令  hhiissttoorryy  的  --ss
       选项可以用来在历史列表末尾添加命令，而不真正执行它们，从而
       在接下来的调用中可以使用它们。

       shell 允许控制历史扩展机制使用的多种字符 (参见上面的 SShheellll VVaarriiaabblleess 中
       hhiissttcchhaarrss 的描述)。

   EEvveenntt DDeessiiggnnaattoorrss
       事件指示器 (event designator) 是一个对历史列表中某个命令行条目的引用。

       !!      开始一个命令替换，除非后面跟随的是 bbllaannkk, newline, = 或是 (.
       !!_n     引用命令行 _n.
       !!--_n    引用当前命令行减去 _n.
       !!!!     引用上一条命令。这是 `!-1' 的同义词。
       !!_s_t_r_i_n_g
              引用最近的以 _s_t_r_i_n_g 开始的命令。
       !!??_s_t_r_i_n_g[[??]]
              引用最近的包含 _s_t_r_i_n_g 的命令。尾部的 ??  可以被忽略，如果  _s_t_r_i_n_g
              之后紧接着一个新行符。
       ^^_s_t_r_i_n_g_1^^_s_t_r_i_n_g_2^^
              快速替换。重复上一条命令，将   _s_t_r_i_n_g_1   替换为   _s_t_r_i_n_g_2.    与
              ``!!:s/_s_t_r_i_n_g_1/_s_t_r_i_n_g_2/'' 等价 (参见下面的 修修饰饰符符 ((MMooddiiffiieerrss)))。
       !!##     到此为止输入的整个命令行。

   WWoorrdd DDeessiiggnnaattoorrss
       词指示器 (word designator) 用于从 event 中选择期望的词。 ::  分隔  event
       规则与  word  指示器。它可以忽略，如果词指示器以  ^^,  $$,  **,  --,  或  %%
       开始。词被从行首开始编号，第一个词被表示为
       0。插入当前行中的词以单个空格分隔。

       00 ((zzeerroo))
              第 0 个词。对 shell 来将，这是命令名。
       _n      第 _n 个词。
       ^^      第一个参数。也就是，第 1 个词。
       $$      最后的参数。
       %%      最近一次搜索 `?_s_t_r_i_n_g?' 匹配的词。
       _x--_y    一组词；`-_y' 是 `0-_y' 的简写。
       **      所有词，除了第    0    个。这是   `_1_-_$'   的同义词。如果   event
              中只有一个词，使用 ** 也不是错误；这种情况下将返回空字符串。
       xx**     _x_-_$ 的简写。
       xx--     _-_$ 的简写，就像 xx** 一样，但是忽略最后一个词。

       如果给出了一个  word  指示器，没有给出   event   规则，前一个命令将用作
       event。

   修修饰饰符符 ((MMooddiiffiieerrss))
       可选的      word      指示器之后，可以出现一个或多个下述      modifiers
       的序列，每一个都前缀有 `:'。

       hh      删除文件名组成的尾部，只保留头部。
       tt      删除文件名组成中前面的成分，保留尾部。
       rr      删除 _._x_x_x 形式中尾部的后缀成分，保留基本名称部分。
       ee      删除所有内容，保留尾部的后缀。
       pp      打印新的命令，但是不执行它。
       qq      引用替换所得的词，使它不再进行替换。
       xx      引用替换所得的词，类似与     qq,     但是会根据      bbllaannkkss，，空空白白
              和新行符分解为词。
       ss//_o_l_d//_n_e_w//
              将事件行中出现的第一个 _o_l_d 替换为 _n_e_w_。 任何分隔符都可以用来代替
              /，最后一个分隔符是可选的，如果它是事件行的最后一个字符。 _o_l_d 和
              _n_e_w    中的分隔符可以用一个反斜杠来引用。如果   &   出现在   _n_e_w
              中，它将替换为   _o_l_d_。   可以用单个反斜杠来引用   &。如果    _o_l_d
              为空，它将设置为最后替换的                                 _o_l_d_，
              或者，如果前面没有发生过历史替换，就是               !!??_s_t_r_i_n_g[[??]]
              搜索中的最后一个 _s_t_r_i_n_g_。
       &&      重复上一次替换。
       gg      使得改变被整个事件行所接受。用于与    `::ss'    或    `::&&'    结合
              (例如，`::ggss//_o_l_d//_n_e_w//')。               如果与               `::ss'
              结合使用，任何分隔符都可以用来代替                           /，
              最后一个分隔符是可选的，如果它是事件行的最后一个字符。

sshheellll 内内建建命命令令((SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS))
       除非另外说明，这一章介绍的内建命令如果接受  --  引导的选项，那么它也接受
       ---- 作为参数，来指示选项的结束
       :: [_a_r_g_u_m_e_n_t_s]
              没有效果；这个命令除了扩展                             _a_r_g_u_m_e_n_t_s
              并且作任何指定的重定向之外，不做任何事。 退出时返回0。

        ..  _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
       ssoouurrccee _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
              读取并在当前 shell 环境中执行 _f_i_l_e_n_a_m_e  中的命令，返回  _f_i_l_e_n_a_m_e
              中最后一个命令的返回状态。如果       _f_i_l_e_n_a_m_e       中不包含斜杠
              (slash)，系统将在  PPAATTHH  中查找包含  _f_i_l_e_n_a_m_e  的目录。在   PPAATTHH
              中搜索的文件不必是可执行的。 如果 bbaasshh 不是运行于 _p_o_s_i_x _m_o_d_e，当
              PPAATTHH 中找不到文件时会在当前目录搜索。如果 sshhoopptt 内建命令的 ssoouurr‐‐
              cceeppaatthh   选项被关闭，  PPAATTHH  将不会被搜索。如果有任何  _a_r_g_u_m_e_n_t_s
              ，它们成为  _f_i_l_e_n_a_m_e  的位置参数  (positional  parameters)，否则
              位置参数不发生变化。  返回状态是脚本中最后一个命令退出时的状态。
              没有执行命令则返回0，没有找到或不能读取 _f_i_l_e_n_a_m_e 时返回false。

       aalliiaass [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
              AAlliiaass 不带参数或者带 --pp 参数运行时将在标准输出以这样的格式 aalliiaass
              _n_a_m_e=_v_a_l_u_e 给出别名列表。 如果有参数，将创建提供了 _v_a_l_u_e 的 _n_a_m_e
              的别名。                                                   _v_a_l_u_e
              中尾部的空格使得别名被扩展时，下一个词做别名替换。
              对于参数列表中的每一个       _n_a_m_e，如果        _v_a_l_u_e        没有
              给出，这个别名的名称和值会被打印出来。 AAlliiaass 返回 true 除非 _n_a_m_e
              没有定义为别名。

       bbgg [_j_o_b_s_p_e_c]
              使挂起的程序     _j_o_b_s_p_e_c     在后台继续执行，就好像它是用      &&
              启动的一样。如果没有指定  _j_o_b_s_p_e_c，shell  意义上的  _c_u_r_r_e_n_t  _j_o_b
              _当_前_作_业            将被使用。            bbgg             _j_o_b_s_p_e_c
              返回0，除非当前禁止了作业控制，或者在允许作业控制，但 是没有找到
              _j_o_b_s_p_e_c ，或者它不是在作业控制下启动的时候。

       bbiinndd [--mm _k_e_y_m_a_p] [--llppssvvPPSSVV]
       bbiinndd [--mm _k_e_y_m_a_p] [--qq _f_u_n_c_t_i_o_n] [--uu _f_u_n_c_t_i_o_n] [--rr _k_e_y_s_e_q]
       bbiinndd [--mm _k_e_y_m_a_p] --ff _f_i_l_e_n_a_m_e
       bbiinndd [--mm _k_e_y_m_a_p] --xx _k_e_y_s_e_q:_s_h_e_l_l_-_c_o_m_m_a_n_d
       bbiinndd [--mm _k_e_y_m_a_p] _k_e_y_s_e_q:_f_u_n_c_t_i_o_n_-_n_a_m_e
       bbiinndd _r_e_a_d_l_i_n_e_-_c_o_m_m_a_n_d
              显示当前  rreeaaddlliinnee   键和功能的，将一个按键序列和一个   rreeaaddlliinnee
              功能或宏进行关联，或者设置一个                          rreeaaddlliinnee
              变量。每一个在非选项的参数都是一个命令，好像它是在      _._i_n_p_u_t_r_c
              中出现的一样。但是每个关联或者命令必须作为单独的参数传递；
              也就是这样           '"\C-x\C-r":           re-read-init-file'。
              如果有参数，它们有如下的意义：
              --mm _k_e_y_m_a_p
                     使用  _k_e_y_m_a_p 作为随后的关联的keymap。可选的 _k_e_y_m_a_p 名称是
                     _e_m_a_c_s_,  _e_m_a_c_s_-_s_t_a_n_d_a_r_d_,   _e_m_a_c_s_-_m_e_t_a_,   _e_m_a_c_s_-_c_t_l_x_,   _v_i_,
                     _v_i_-_m_o_v_e_,  _v_i_-_c_o_m_m_a_n_d，还有  _v_i_-_i_n_s_e_r_t。  _v_i 和 _v_i_-_c_o_m_m_a_n_d
                     等价; _e_m_a_c_s 和 _e_m_a_c_s_-_s_t_a_n_d_a_r_d 等价。
              --ll     列出所有的 rreeaaddlliinnee 功能。
              --pp     以程序可读的方式显示 rreeaaddlliinnee 功能名称和关联
              --PP     列出当前 rreeaaddlliinnee 功能名称和关联。
              --vv     以程序可读的方式显示 rreeaaddlliinnee 变量名称和值
              --VV     列出当前 rreeaaddlliinnee 变量和值。
              --ss     以程序可读的方式显示 rreeaaddlliinnee 键序列和对应的宏
              --SS     显示 rreeaaddlliinnee 宏对应的键序列和他们输出的字符串
              --ff _f_i_l_e_n_a_m_e
                     从 _f_i_l_e_n_a_m_e 中读取键序列
              --qq _f_u_n_c_t_i_o_n
                     查询那些键将执行_f_u_n_c_t_i_o_n。
              --uu _f_u_n_c_t_i_o_n
                     取消所有关联到 _f_u_n_c_t_i_o_n 的键。
              --rr _k_e_y_s_e_q
                     取消当前任何 _k_e_y_s_e_q 的关联。
              --xx _k_e_y_s_e_q::_s_h_e_l_l_-_c_o_m_m_a_n_d
                     使 _s_h_e_l_l_-_c_o_m_m_a_n_d 在 _k_e_y_s_e_q 按下时被执行。

              返回值是0，除非给出了一个不能识别的选项或是产生了一个错误。

       bbrreeaakk [_n]
              从一个 ffoorr, wwhhiillee, uunnttiill, 或者 sseelleecctt  循环退出。  如果指定了  _n
              ，就跳出     _n     层循环。     _n     必须     ≥    1。如果    _n
              比当前循环层数还要大，将跳出所有循环。 返回值是0，除非执行 bbrreeaakk
              的时候 shell 不是在执行一个循环。

       bbuuiillttiinn _s_h_e_l_l_-_b_u_i_l_t_i_n [_a_r_g_u_m_e_n_t_s]
              执行指定的  shell  内建命令，传递 _a_r_g_u_m_e_n_t_s ，返回命令的返回值。
              这在定义了一个和       shell        内建命令同名的函数时很有用，
              在那个函数中使用它来执行相应的功能。ccdd
              命令常以这种方式重新定义。     返回状态是      false，如果指定的
              _s_h_e_l_l_-_b_u_i_l_t_i_n 并不是一个 shell 内建命令。

       ccdd [--LL||--PP] [_d_i_r]
              改变当前路径到   _d_i_r。这个变量的默认值是   HHOOMMEE   目录。环境变量
              CCDDPPAATTHH      定义了包含      _d_i_r      的搜索路径。在       CCDDPPAATTHH
              中可选的路径名以冒号(:)               分隔。              CCDDPPAATTHH
              中的空路径名与当前路径相同，就是  ``..''.   如果  _目_录_名   以斜杠
              (/,slash)       起始，那么      CCDDPPAATTHH      不会被使用。      --PP
              选项是说使用物理路径结构而不是跟随符号链接，(参见  sseett  命令中的
              --PP  选项);  --LL  选项强制跟随符号链接。另外，选项  --  与  $$OOLLDDPPWWDD
              是相同的。 返回值是 true ，如果成功地改变了目录；否则是 false。

       ccoommmmaanndd [--ppVVvv] _c_o_m_m_a_n_d [_a_r_g ...]
              运行  _c_o_m_m_a_n_d   ，使用   _a_r_g_s   作为参数，禁止通常的查找   shell
              函数的过程。只有内建命令或者 PPAATTHH 中包含的命令可以执行。如果给出
              --pp        参数，         _c_o_m_m_a_n_d         的查找是以         PPAATTHH
              的默认值进行的。这样可以保证找到所有的标准工具。如果给出 --VV 或者
              --vv     选项，关于      _c_o_m_m_a_n_d      的说明将被打印出来。      --vv
              选项使得表述这个命令的词，或者要执行                     _c_o_m_m_a_n_d
              需要执行的文件显示出来；  --VV  选项给出更详细的描述。如果给出  --VV
              或者  --vv 选项，退出状态在找到了 _c_o_m_m_a_n_d 的情况下0，没找到就是1。
              如果没有提供选项，并且产生了错误或者                     _c_o_m_m_a_n_d
              没有找到，退出状态就是127。否则，  ccoommmmaanndd  内建命令的退出状态是
              _c_o_m_m_a_n_d 的退出状态。

       ccoommppggeenn [_o_p_t_i_o_n] [_w_o_r_d]
              根据 _o_p_t_i_o_n 为 _w_o_r_d 产生可能的补全。_o_p_t_i_o_n 是 内建命令  ccoommpplleettee
              接受的任何选项，除了  --pp  和 --rr，将匹配结果写到标准输出。 当使用
              --FF    或     --CC     选项时，可编程补全功能所设置的多数     shell
              变量如果存在，其值将不再有用。

              产生的匹配与可编程补全代码根据补全规则加上相同的标志直接产生的结果相同。
              如果指定了 _w_o_r_d，只有匹配 _w_o_r_d 的补全结果将被显示出来。

              返回值为真，除非提供了非法的选项，或者没有产生匹配。

       ccoommpplleettee [--aabbccddeeffggjjkkssuuvv] [--oo _c_o_m_p_-_o_p_t_i_o_n] [--AA _a_c_t_i_o_n] [--GG _g_l_o_b_p_a_t]  [--WW
       _w_o_r_d_l_i_s_t] [--PP _p_r_e_f_i_x] [--SS _s_u_f_f_i_x]
              [--XX _f_i_l_t_e_r_p_a_t] [--FF _f_u_n_c_t_i_o_n] [--CC _c_o_m_m_a_n_d] _n_a_m_e [_n_a_m_e _._._.]
       ccoommpplleettee --pprr [_n_a_m_e ...]
              指定每个   _n_a_m_e   的参数应当如何被补全。如果给出了   --pp   选项，
              或者没有选项给出，现有的补全规则将被显示出来，以一种可以重用为输入
              的格式显示。--rr    选项将一个针对每个    _n_a_m_e    的补全规则删除。
              或者，如果没有给出 _n_a_m_e，将删除所有补全规则。

              尝试词的补全时，应用这些补全规则的过程在上面  PPrrooggrraammmmaabbllee  CCoomm‐‐
              pplleettiioonn(可编程补全) 中详述。

              其他选项，如果给出的话，具有下列意义。--GG,  --WW,  和 --XX 选项的参数
              (如果需要的话，还包括        --PP        和        --SS        选项)
              应当被引用，避免在执行内建命令 ccoommpplleettee 之前被扩展。
              --oo _c_o_m_p_-_o_p_t_i_o_n
                      _c_o_m_p_-_o_p_t_i_o_n                控制着               compspec
                      除了简单地产生补全之外的多种行为。           _c_o_m_p_-_o_p_t_i_o_n
                      可以是如下之一：
                      ddeeffaauulltt 使用  readline  的默认文件名补全，如果  compspec
                              没有得到匹配。
                      ddiirrnnaammeess
                              进行目录名补全，如果 compspec 没有得到匹配。
                      ffiilleennaammeess
                              告诉                          readline，compspec
                              产生了文件名，使它可以进行任何文件名专用的处理
                              (例如，给目录名加上斜杠或消除尾部空白)。主要用于
                              shell 函数。
                      nnoossppaaccee 告诉                                    readline
                              不要向补全的词在行的最后添加一个空格
                              (这是默认行为)。
              --AA _a_c_t_i_o_n
                      _a_c_t_i_o_n 可以是下列之一，来产生一系列可能的补全结果：
                      aalliiaass   起别名。也可以用 --aa 指定。
                      aarrrraayyvvaarr
                              数组变量名。
                      bbiinnddiinngg RReeaaddlliinnee 按键关联。
                      bbuuiillttiinn shell 内建命令的名称。也可以用 --bb 指定。
                      ccoommmmaanndd 命令名。也可以用 --cc 指定。
                      ddiirreeccttoorryy
                              目录名。也可以用 --dd 指定。
                      ddiissaabblleedd
                              被禁用的内建命令名称。
                      eennaabblleedd 启用的内建命令名称。
                      eexxppoorrtt  被导出的 shell 变量名称。也可以用 --ee 指定。
                      ffiillee    文件名。也可以用 --ff 指定。
                      ffuunnccttiioonn
                              shell 函数的名称。
                      ggrroouupp   组名。也可以用 --gg 指定。
                      hheellppttooppiicc
                              内建命令 hheellpp 接受的帮助主题。
                      hhoossttnnaammee
                              主机名，从环境变量 HHOOSSTTFFIILLEE 指定的文件中得到。
                      jjoobb     作业名，如果作业控制被激活的话。也可以用      --jj
                              指定。
                      kkeeyywwoorrdd shell 保留字。也可以用 --kk 指定。
                      rruunnnniinngg 正在运行的作业名，如果作业控制被激活的话。
                      sseerrvviiccee 服务名。也可以用 --ss 指定。
                      sseettoopptt  内建命令 sseett 的 --oo 选项的有效参数。
                      sshhoopptt   内建命令 sshhoopptt 接受的 shell 选项名。
                      ssiiggnnaall  信号名。
                      ssttooppppeedd 停止的作业名，如果作业控制被激活的话。
                      uusseerr    用户名。也可以用 --uu 指定。
                      vvaarriiaabbllee
                              shell 变量的名称。也可以用 --vv 指定。
              --GG _g_l_o_b_p_a_t
                      文件名扩展模式 _g_l_o_b_p_a_t 被扩展，产生可能的补全。
              --WW _w_o_r_d_l_i_s_t
                      _w_o_r_d_l_i_s_t                   被使用                    IIFFSS
                      特殊变量中的字符作为定界符来拆分，每个结果的词被扩展。可能的补全是结果列表
                      中匹配要补全的词的那一些。
              --CC _c_o_m_m_a_n_d
                      _c_o_m_m_a_n_d                 将在一个子                 shell
                      环境中执行，它的结果用作可能的补全。
              --FF _f_u_n_c_t_i_o_n
                      shell       函数       _f_u_n_c_t_i_o_n      将在当前      shell
                      环境中执行。当它结束时，可能  的补全可以从数组元素  CCOOMM‐‐
                      PPRREEPPLLYY 中得到。
              --XX _f_i_l_t_e_r_p_a_t
                      _f_i_l_t_e_r_p_a_t
                      是一个模式，用于文件名扩展。所有前面的选项和参数产生
                      的可能的补全都要经过这一步处理，每一个匹配     _f_i_l_t_e_r_p_a_t
                      的补全都   被从列表中删除。为   _f_i_l_t_e_r_p_a_t   加上前导   !!
                      使模式意义相反；     这种情况下，所有不匹配    _f_i_l_t_e_r_p_a_t
                      的模式被删除。
              --PP _p_r_e_f_i_x
                      在所有其他选项都处理过之后，_p_r_e_f_i_x
                      被加到每个可能的补全前面。
              --SS _s_u_f_f_i_x
                      在所有其他选项都处理过之后，_s_u_f_f_i_x
                      被加到每个可能的补全后面。

              返回值为真，除非给出了非法的选项，给出除   --pp   和    --rr    之外
              的某个选项时没有给出   _n_a_m_e   参数，试图删除一条   _n_a_m_e   的补全
              规则但是规则不存在，或者添加补全规则时出错。

       ccoonnttiinnuuee [_n]
              复位到外层      ffoorr,      wwhhiillee,      uunnttiill,      或      sseelleecctt
              循环的下一次开始。如果指定了 _n_， 复位到向外第 _n 层循环的开始。 _n
              必须  ≥  1。如果  _n   比外部循环的层数要多，将复位到最外层的循环
              (``top-level''  loop，顶层循环)。  返回值是 0，除非执行 ccoonnttiinnuuee
              时，shell 不是在循环之中。

       ddeeccllaarree [--aaffFFiirrttxx] [--pp] [_n_a_m_e[=_v_a_l_u_e]]
       ttyyppeesseett [--aaffFFiirrttxx] [--pp] [_n_a_m_e[=_v_a_l_u_e]]
              声明变量且/或设置它们的属性。如果没有给出 _n_a_m_e  则显示变量的值。
              选项    --pp    将显示每个名称    _n_a_m_e    的属性和值。当使用    --pp
              时，其他选项被忽略。选项                                      --FF
              禁止显示函数定义；只有函数名和属性会被显示。   --FF  选项暗含  --ff.
              下列选项可用来限制只输出具有指定属性的变量，或者为变量设置属性：
              --aa     每个 _n_a_m_e 都是数组变量 (参见上面的 AArrrraayyss 段落)。
              --ff     只使用函数名。
              --ii     变量被当作一个整数；当变量被赋值时将进行算术运算    (参见
                     算算术术求求值值 ((AARRIITTHHMMEETTIICC EEVVAALLUUAATTIIOONN)) 章节)。
              --rr     使得                                                 _n_a_m_e
                     只读。这些名称不能再被后续的赋值语句赋值或取消定义。
              --tt     设置每个  _n_a_m_e  的  _t_r_a_c_e(跟踪)  属性。被跟踪的函数继承了
                     调用者       shell       的       DDEEBBUUGG       陷阱。trace
                     属性对变量没有特殊意义。
              --xx     标记 _n_a_m_e 为可以通过环境导出给后续命令。

              使用 `+' 代替  `-'  将关闭属性，特殊情况是  ++aa  不能用于销毁一个
              数组变量。当用于函数中时，它使得每个    _n_a_m_e    成为局部的，就像
              使用了  llooccaall  命令。返回值是  0，除非遇到了非法的选项，试图使用
              ``-f                                                   foo=bar''
              定义函数，试图向只读变量赋值，试图向数组变量赋值但没有使用复合的赋值
              语法   (参见上面的   AArrrraayyss   段落)，_n_a_m_e  之一不是有效的  shell
              变量名，试图将数组变量的数组     状态关闭，或者是试图使用     --ff
              显示一个不存在的函数。

       ddiirrss [[--ccllppvv]] [[++_n]] [[--_n]]
              没有选项时显示当前保存的目录。默认输出为一行，目录名用空格分开。
              可以使用        ppuusshhdd        命令将目录添加到列表，         ppooppdd
              命令将列表中的条目删除。
              ++_n     显示  ddiirrss  在不带选项执行时显示的列表的第 _n 个条目，从 0
                     开始自左算起。
              --_n     显示 ddiirrss 在不带选项执行时显示的列表的第 _n  个条目，从  0
                     开始自右算起。
              --cc     删除所有条目，清空目录栈。
              --ll     产生长列表；默认列表格式使用波浪线来表示个人目录。
              --pp     输出目录栈，一行一个。
              --vv     输出目录栈，一行一个，每个条目前面加上它在栈中的位置索引。

              返回值是             0，除非给出了非法的参数，或者             _n
              索引超出了目录栈的范围。

       ddiissoowwnn [--aarr] [--hh] [_j_o_b_s_p_e_c ...]
              没有选项时，每个  _j_o_b_s_p_e_c 被从正在运行的作业表中删除。如果给出了
              -- 选项，每个  _j_o_b_s_p_e_c  并不从表中删除，而是被标记，使得在  shell
              接到  SSIIGGHHUUPP  信号时，不会向作业发出  SSIIGGHHUUPP  信号。如果没有给出
              _j_o_b_s_p_e_c_， 也没有给出 --aa 或者  --rr  选项，将使用当前作业  (_c_u_r_r_e_n_t
              _j_o_b)。如果没有给出           _j_o_b_s_p_e_c_，          选项          --aa
              意味着删除或标记所有作业；选项       --rr       不带       _j_o_b_s_p_e_c
              参数时限制操作只对正在运行的作业进行。返回值是  0，除非  _j_o_b_s_p_e_c
              不指定有效的作业。

       eecchhoo [--nneeEE] [_a_r_g ...]
              输出      _a_r_g，以空格分开，最后加一个新行符。返回值总是      0。
              如果指定了    --nn，将不在尾部添加新行符。如果给出了   --ee   选项，
              将允许解释下列反斜杠转义的字符。                              --EE
              选项禁止这些转义字符的解释，即使在默认解释它们的系统中也是如此。
              shell   选项   xxppgg__eecchhoo   可以用来在运行时判断   eecchhoo   是否默认
              展开这些转义字符。    eecchhoo   不将   ----   作为选项的结束。   eecchhoo
              解释下列转义序列：
              \\aa     alert (bell) 响铃
              \\bb     backspace 回退
              \\cc     suppress trailing newline 删除尾部新行符
              \\ee     an escape character 字符 Esc
              \\ff     form feed 进纸
              \\nn     new line 新行符
              \\rr     carriage return 回车
              \\tt     horizontal tab 水平跳格
              \\vv     vertical tab 竖直跳格
              \\\\     backslash 反斜杠
              \\00_n_n_n  一个八比特字符，它的值是八进制值                      _n_n_n
                     (零到三个八进制数字)。
              \\_n_n_n   一个八比特字符，它的值是八进制值                      _n_n_n
                     (一到三个八进制数字)。
              \\xx_H_H   一个八比特字符，它的值是十六进制值                     _H_H
                     (一到两个十六进制数字)。

       eennaabbllee [--aaddnnppss] [--ff _f_i_l_e_n_a_m_e] [_n_a_m_e ...]
              允许或禁止                                                 shell
              内建命令。禁止一个内建命令使得磁盘上的与内建命令同名
              的文件得以运行，不必使用它的全路径，即使                   shell
              一般在搜索磁盘上的命令之前      搜索内建命令。如果使用了      --nn
              选项，每个  _n_a_m_e 都被禁止；否则， _n_a_m_e 被允许。例如，要使用 PPAATTHH
              中搜索到的 tteesstt 命令而不是 shell 内建的那一个，可以运行 ``enable
              -n  test''.   选项 --ff 意味着从共享库 _f_i_l_e_n_a_m_e 中加载新的内建命令
              _n_a_m_e_，   如果系统支持动态加载的话。选项   --dd   将删除曾经用   --ff
              加载的内建命令。如果没有给出     _n_a_m_e     参数，或者给出了    --pp
              选项，将显示    shell     内建命令的列表。如果没有其他选项参数，
              这个列表只包含所有被允许的       shell      内建命令；如果给出了
              --nn，将只显示被禁止的内建命令；如果给出了
              --aa，显示的列表中包含所有内建命令，还有命令是否被允许的指示；
              如果给出了 --ss，输出被限制为 POSIX  _s_p_e_c_i_a_l  内建命令。  返回值是
              0，除非               _n_a_m_e               不是              shell
              内建命令，或者从共享库中加载新的内建命令时出错。

       eevvaall [_a_r_g ...]
              _a_r_g 被读取并连结为单一的命令。这个命令然后被 shell  读取并执行，
              它的退出状态被作为      eevvaall      的值返回。如果没有      _a_r_g_s，
              或仅仅包含空参数， eevvaall 返回 0。

       eexxeecc [--ccll] [--aa _n_a_m_e] [_c_o_m_m_a_n_d [_a_r_g_u_m_e_n_t_s]]
              如果指定了 _c_o_m_m_a_n_d_，  它将替换  shell。不会产生新的进程。  _a_r_g_u_‐
              _m_e_n_t_s  成为 _c_o_m_m_a_n_d 的参数。如果给出了 --ll 选项，shell 将在传递给
              _c_o_m_m_a_n_d  的第  0  个参数前面加上一个连字符  (dash,`-')。这样做和
              _l_o_g_i_n(1)        相同。选项       --cc       使得命令       _c_o_m_m_a_n_d
              在一个空环境中执行。如果给出了 --aa，， shell  会将  _n_a_m_e  作为第  0
              个参数传递给要执行的命令。如果由于某种原因  as  the zeroth argu‐
              ment to the executed command.  If  _c_o_m_m_a_n_d  不能被执行，非交互的
              shell        将退出，除非        shell       选项       eexxeeccffaaiill
              被设置为允许，这种情况下它返回失败。如果命令不能执行，交互的
              shell  返回失败。  如果没有指定  _c_o_m_m_a_n_d  任何重定向对当前 shell
              发生作用，返回值是 0。如果发生重定向错误，返回状态是 1。

       eexxiitt [_n]
              使得     shell     以状态值     _n      退出。如果忽略了      _n_，
              退出状态是最后执行的命令的退出状态。在   shell  终止前，对  EEXXIITT
              的陷阱将被执行。

       eexxppoorrtt [--ffnn] [_n_a_m_e[=_w_o_r_d]] ...
       eexxppoorrtt --pp
              给出的名称                                                 _n_a_m_e_s
              被标记为自动地导出到后续执行的命令的环境中。如果给出了        --ff
              选项，名称 _n_a_m_e_s 指的是函数。如果没有给出 _n_a_m_e_s_， 或者如果给出了
              --pp  选项，将打印在这个  shell  中被导出的所有名字的列表。选项 --nn
              使得以此为名的变量的导出属性被删除。         eexxppoorrtt         返回
              0，除非遇到了非法的选项，_n_a_m_e   之一不是有效的   shell  变量名，
              或者给出了 --ff 选项，而 _n_a_m_e 不是一个函数。

       ffcc [--ee _e_n_a_m_e] [--nnllrr] [_f_i_r_s_t] [_l_a_s_t]
       ffcc --ss [_p_a_t=_r_e_p] [_c_m_d]
              命令修复。第一种形式中，历史列表中从     _f_i_r_s_t      到      _l_a_s_t
              范围内的命令都被选取。    _F_i_r_s_t    和    _l_a_s_t   可以指定为字符串
              (可以定位最后一个以此字符串开始的命令)   或者数字    (历史列表中
              的索引，负数被当作相对当前命令号的偏移)。如果没有指定     _l_a_s_t_，
              它在列举时被设为当前命令  (因此  ``fc  -l  -10''  将输出最后  10
              条命令)，其他情况下被设为     _f_i_r_s_t_。    如果没有指定    _f_i_r_s_t_，
              它在编辑时被设为前一个命令，列举是设为 -16。

              选项        --nn         使得列举时不显示命令号码。选项         --rr
              将命令顺序进行掉换。如果给出了                                --ll
              选项，命令将列举在标准输出上。否则，将启动                 _e_n_a_m_e
              给出的编辑器，编辑包含这些命令的文件。如果没有给出       _e_n_a_m_e_，
              将使用变量  FFCCEEDDIITT  的值，如果  FFCCEEDDIITT   没有定义就使用   EEDDIITTOORR
              的值。如果仍然没有定义，将使用                              _v_i_。
              编辑结束后，被编辑的命令将回显并执行。

              第二种形式中，_c_o_m_m_a_n_d   在每个   _p_a_t   的实例被    _r_e_p    替换后
              都被重新执行。使用这种特性时可以起一个有用的别名：  ``r=fc -s'',
              这样输入 ``r cc'' 将运行最后的以 ``cc''  开头的命令，输入  ``r''
              将重新执行上一个命令。

              如果使用第一种形式，返回值是  0，除非遇到了非法的选项，或  _f_i_r_s_t
              或      _l_a_s_t       指定的历史行数超出了范围。如果给出了       --ee
              选项，返回值是最后执行的命令的返回值，或着是失败，如果临时文件中的命令
              执行出错。如果使用第二种形式，返回状态是重新执行的命令，除非 _c_m_d
              没有指定一个有效的历史行，这种情况下 ffcc 返回失败。

       ffgg [_j_o_b_s_p_e_c]
              将     _j_o_b_s_p_e_c     恢复至前台，使它成为当前作业。如果    _j_o_b_s_p_e_c
              不存在，将使用  shell  意义上的当前作业  _c_u_r_r_e_n_t   _j_o_b。返回值是
              被放到前台的命令的状态，或者是失败，如果在禁用作业控制时运行，或者
              在启用作业控制时运行，但 _j_o_b_s_p_e_c 没有指定有效的作业，或  _j_o_b_s_p_e_c
              指定了没有使用作业控制的作业。

       ggeettooppttss _o_p_t_s_t_r_i_n_g _n_a_m_e [_a_r_g_s]
              ggeettooppttss     由     shell     程序用来处理位置参数。    _o_p_t_s_t_r_i_n_g
              包含要识别的选项字符；如果某个字符跟随着冒号，那么这个选项需要一个参数，
              需要用空白和它隔离开。冒号和问号字符不能用作选项字符。每次它执行时，
              ggeettooppttss  将下一个选项放在  shell   变量   _n_a_m_e   中，如果   _n_a_m_e
              不存在就初始化它；下一个要处理的参数的索引放在变量        OOPPTTIINNDD
              中。每次  shell  或  shell  脚本被执行的时候  OOPPTTIINNDD  被初始化为
              1。当某个选项需要参数时，   ggeettooppttss   将那个参数放到变量  OOPPTTAARRGG
              中。shell     不会自动重置     OOPPTTIINNDD；；      在相同的      shell
              中，如果要使用新的参数集合而需要多次调用                 ggeettooppttss
              时，必须手动重置它。

              当遇到选项结束的时候，ggeettooppttss   以大于   0   的值退出。   OOPPTTIINNDD
              被设置为第一个非选项的参数的索引，_n_a_m_e 被设置为 ?。

              ggeettooppttss   通常解释位置参数，但是如果   _a_r_g_s   中给出了更多参数，
              ggeettooppttss 将解释它们。

              ggeettooppttss           能以两种方式报告错误。如果           _o_p_t_s_t_r_i_n_g
              的第一个字符是冒号，将使用                                _s_i_l_e_n_t
              安静的错误报告。通常的操作中，遇到非法选项或缺少选项的参数时将打印出
              诊断信息。如果变量   OOPPTTEERRRR  被设置为  0，不会显示错误消息，即使
              _o_p_t_s_t_r_i_n_g 的第一个字符不是冒号。

              如果发现了一个非法的选项，    ggeettooppttss     向     _n_a_m_e     中置入
              ?，并且如果不是安静模式的话，打印错误消息并取消           OOPPTTAARRGG
              的定义。如果 ggeettooppttss  是安静模式，找到的选项字符将置入  OOPPTTAARRGG，，
              不会打印诊断消息。

              如果没有找到需要的参数，并且   ggeettooppttss  不是安静模式，将向  _n_a_m_e
              置入一个问号   (??)，取消   OOPPTTAARRGG   的定义，打印出诊断消息。如果
              ggeettooppttss  是安静模式，那么将向  _n_a_m_e 置入一个冒号 (::) 并且 OOPPTTAARRGG
              将设置为找到的选项字符。

              ggeettooppttss
              返回真，如果找到了指定的/未被指定的选项。它返回假，如果遇到了选项结束
              或者发生了错误。

       hhaasshh [--llrr] [--pp _f_i_l_e_n_a_m_e] [--ddtt] [_n_a_m_e]
              对于每个            _n_a_m_e,             通过搜索             $$PPAATTHH
              中的目录，找到命令的全路径名并记录它。如果给出了              --pp
              选项，不会进行路径搜索，直接将 _f_i_l_e_n_a_m_e 作为命令的全路径名。选项
              --rr   使得   shell   忘记所有已记录的位置。选项   --dd  使得  shell
              忘记已记录的  _n_a_m_e   的位置。如果给出了   --tt   选项，每个   _n_a_m_e
              对应的全路径名被打印出来。如果给出多个 _n_a_m_e 作为 --tt 的参数，_n_a_m_e
              将在已记录的全路径名           之前被打印出来。选项           --ll
              使得输出以一种可以重用为输入的格式显示。如果没有给出参数，
              或者只给出了      --ll      选项，已记录的命令的信息将被打印出来。
              返回真，除非 _n_a_m_e 没有找到或给出了非法的选项。

       hheellpp [--ss] [_p_a_t_t_e_r_n]
              显示关于内建命令的有用的信息。如果指定了  _p_a_t_t_e_r_n  _(_模_式_)_， hheellpp
              给出关于所有匹配                                         _p_a_t_t_e_r_n
              的命令的详细帮助；否则所有内建命令的帮助和                 shell
              控制结构将被打印出来。  选项  --ss  限制信息显示为简短的用法概要。
              返回 0，除非没有匹配 _p_a_t_t_e_r_n 的命令。

       hhiissttoorryy [[_n]]
       hhiissttoorryy --cc
       hhiissttoorryy --dd _o_f_f_s_e_t
       hhiissttoorryy --aannrrww [_f_i_l_e_n_a_m_e]
       hhiissttoorryy --pp _a_r_g [_a_r_g _._._.]
       hhiissttoorryy --ss _a_r_g [_a_r_g _._._.]
              不带选项的话，显示带行号的命令历史列表。列出的行中含有         **
              的已经被修改过。参数 _n  使得只显示最后  _n  行。如果给出了  _f_i_l_e_‐
              _n_a_m_e，它被用做历史文件名；没有的话，将使用              HHIISSTTFFIILLEE
              的值作为历史文件名。选项如果给出，则具有下列意义：
              --cc     清空历史列表，删除所有条目。
              --dd _o_f_f_s_e_t
                     删除 _o_f_f_s_e_t 位置的历史条目。
              --aa     将 ``新'' 的历史条目 (自当前 bbaasshh 会话开始输入的历史命令)
                     追加到历史文件中。
              --nn     将尚未从历史文件中读取的历史条目读入当前历史列表。这些行是当前
                     bbaasshh 会话开始之后，才追加到历史文件中的行。
              --rr     读取历史文件的内容，使用它们作为当前历史。
              --ww     将当前历史列表写入历史文件，覆盖历史文件的原有内容。
              --pp     对后续的    _a_r_g_s     进行历史替换，在标准输出上显示结果。
                     不会将结果存入历史列表。每个   _a_r_g_s  都必须被引用，来禁止
                     普通的命令扩展。
              --ss     将                                                   _a_r_g_s
                     保存到历史列表中，作为单独的条目。历史列表中的最后一个命令在添加
                     _a_r_g_s 之前被删除。

              返回  0，除非遇到了非法的选项，读/写历史文件发生错误，在  --dd  的
              参数中给出了无效的               _o_f_f_s_e_t，或者对               --pp
              的后续参数进行历史扩展失败。

       jjoobbss [--llnnpprrss] [ _j_o_b_s_p_e_c ... ]
       jjoobbss --xx _c_o_m_m_a_n_d [ _a_r_g_s ... ]
              第一种形式列出正在运行的作业。选项具有下列意义：
              --ll     普通信息之外，列出进程ID。
              --pp     只列出作业的进程组 leader 的进程ID。
              --nn     只显示从上次用户得知它们的状态之后，状态发生改变的作业的信息。
              --rr     限制只输出正在运行的作业。
              --ss     限制只输出停止的作业。

              如果给出了     _j_o_b_s_p_e_c     输出被限制为仅此作业的信息。     返回
              0，除非遇到了非法的选项或给出了非法的 _j_o_b_s_p_e_c_。

              如果给出了 --xx 选项，作业 jjoobbss 将 _c_o_m_m_a_n_d 或 _a_r_g_s  中的任何  _j_o_b_‐
              _s_p_e_c    替换为相应的进程组ID，执行   _c_o_m_m_a_n_d_，   传递参数   _a_r_g_s
              给它并返回它的退出状态。

       kkiillll [--ss _s_i_g_s_p_e_c | --nn _s_i_g_n_u_m | --_s_i_g_s_p_e_c] [_p_i_d | _j_o_b_s_p_e_c] ...
       kkiillll --ll [_s_i_g_s_p_e_c | _e_x_i_t___s_t_a_t_u_s]
              向以  _p_i_d  或  _j_o_b_s_p_e_c  为名的进程发送名为  _s_i_g_s_p_e_c  或   _s_i_g_n_u_m
              的信号。  _s_i_g_s_p_e_c  可以是一个信号名称，类似 SSIIGGKKIILLLL 或信号编号；
              _s_i_g_n_u_m               是一个信号编号。如果                _s_i_g_s_p_e_c
              是一个信号名称，那么可以有，也可以没有   SSIIGG  前缀。如果没有给出
              _s_i_g_s_p_e_c_，       那么假设是       SSIIGGTTEERRMM。。        参数        --ll
              将列出所有信号的名称。如果给出                                --ll
              时还有任何参数，将列出参数对应的信号名称，返回状态  0。  --ll   的
              _e_x_i_t___s_t_a_t_u_s           参数是一个数字，指定了一个信号编号或被信号
              终止的进程的退出状态值。                                    kkiillll
              返回真，如果至少成功发送了一个信号，或者返回假，如果发生了错误或遇到了
              非法的选项。

       lleett _a_r_g [_a_r_g ...]
              每个 _a_r_g 都是要求值的算术表达式 (参见 算算术术求求值值 ((AARRIITTHHMMEETTIICC EEVVAALL‐‐
              UUAATTIIOONN))  章节)。如果最后一个参数  _a_r_g  求值结果是  0，  lleett 返回
              1；否则返回 0。

       llooccaall [_o_p_t_i_o_n] [_n_a_m_e[=_v_a_l_u_e] ...]
              对每个参数将创建一个名为 _n_a_m_e 的局部变量并赋予值 _v_a_l_u_e_。  _o_p_t_i_o_n
              可以是任何 ddeeccllaarree 接受的值。当 llooccaall 用于函数内部时，它使得变量
              _n_a_m_e     作用域局限于函数和它的子进程。没有操作数时，      llooccaall
              将局部变量的列表写到标准输出。不在函数内部使用             llooccaall
              会导致出错。返回  0，除非在函数之外使用了  llooccaall，，  给出了非法的
              _n_a_m_e_， 或者 _n_a_m_e 是一个只读的变量。

       llooggoouutt 退出登录 shell。

       ppooppdd [-nn] [+_n] [-_n]
              从目录栈中删除条目。没有参数的话，从栈中删除顶层目录，执行    ccdd
              切换到新的顶层目录。如果给出了参数，有下列的含义：
              ++_n     删除   ddiirrss   给出的列表中从左数第   _n   个条目   (从   0
                     算起)。例如：  ``popd  +0''  删除第一个目录， ``popd +1''
                     第二个。
              --_n     删除   ddiirrss   给出的列表中从右数第   _n   个条目   (从   0
                     算起)。例如：  ``popd -0'' 删除最后一个目录， ``popd -1''
                     删除倒数第二个。
              --nn     阻止从栈中删除目录之后改变目录，这时只对栈进行操作。

              如果命令  ppooppdd   成功，还要执行一个   ddiirrss，，   返回   0。   ppooppdd
              返回假，如果遇到了非法的选项，目录栈为空，指定了目录栈中不存在的条目，
              或者改变目录失败。

       pprriinnttff _f_o_r_m_a_t [_a_r_g_u_m_e_n_t_s]
              在  _f_o_r_m_a_t  控制下将格式化的  _a_r_g_u_m_e_n_t_s  写到标准输出。   _f_o_r_m_a_t
              是一个字符串，包含三种类型的对象：普通字符，被简单地
              复制到标准输出，转义字符，被转换并复制到标准输出，格式说明，每一个
              都使得相邻的下一个   _a_r_g_u_m_e_n_t  被打印出来。  在标准的  _p_r_i_n_t_f(1)
              格式之外，%%bb      使得      pprriinnttff      展开相应       _a_r_g_u_m_e_n_t_s
              中的反斜杠转义序列，%%qq    使得   pprriinnttff   将   相应的   _a_r_g_u_m_e_n_t
              以一种可以重用为 shell 输入的格式输出。

              _f_o_r_m_a_t  在需要时被重用，以处理所有的  _a_r_g_u_m_e_n_t_s。  如果   _f_o_r_m_a_t
              需要比所提供的更多的                                 _a_r_g_u_m_e_n_t_s，
              多出的格式说明视为已经提供了相应的       0        值或空字符串。
              成功的话返回值是 0，失败则是非 0 值。

       ppuusshhdd [--nn] [_d_i_r]
       ppuusshhdd [--nn] [+_n] [-_n]
              将目录推入目录栈，或者轮换栈中的内容，使栈的顶部成为当前工作目录。
              没有参数时，交换顶部两个目录，返回
              0，除非目录栈为空。如果给出了参数， 它们有如下含义：
              ++_n     轮换栈中内容，使得 ddiirrss 给出的列表中从左数第 _n 个目录 (从
                     0 数起) 成为目录栈的顶部。
              --_n     轮换栈中内容，使得 ddiirrss 给出的列表中从右数第 _n 个目录 (从
                     0 数起) 成为目录栈的顶部。
              --nn     阻止向栈中添加目录之后改变目录，这时只对栈进行操作。
              _d_i_r    添加 _d_i_r 到栈顶，使得它成为新的当前工作目录。

              如果命令  ppuusshhdd  成功，还要执行一个  ddiirrss。。 如果使用第一种形式，
              ppuusshhdd 返回 0，除非 cd  切换到目录  _d_i_r  失败。使用第二中形式时，
              ppuusshhdd  返回  0，除非目录栈为空，指定了目录栈中不存在的元素，或者
              切换到指定的新的当前目录失败。

       ppwwdd [--LLPP]
              打印当前工作目录的绝对路径名。如果给出了                      --PP
              选项，或者设置了内建命令       sseett      的      --oo      pphhyyssiiccaall
              选项，打印出的路径名中不会包含符号链接。如果使用了            --LL
              选项，打印出的路径中可能包含符号链接。                      返回
              0，除非在读取当前目录名时出错或给出了非法的选项。

       rreeaadd [--eerrss] [--uu _f_d] [--tt _t_i_m_e_o_u_t] [--aa _a_n_a_m_e] [--pp _p_r_o_m_p_t] [--nn _n_c_h_a_r_s] [--dd
       _d_e_l_i_m] [_n_a_m_e ...]
              从标准输入读入一行，或从  --uu  选项的参数中给出的文件描述符 _f_d 中
              读取，第一个词被赋予第一个  _n_a_m_e,   第二个词被赋予第二个   _n_a_m_e,
              以此类推，多余的词和其间的分隔符被赋予最后一个             _n_a_m_e.
              如果从输入流读入的词数比名称数少，剩余的名称被赋予空值。     IIFFSS
              中的字符被用来将行拆分成词。            反斜杠字符           (\\)
              被用于删除读取的下一字符的特殊含义，以及续行。
              如果给出了选项，将包含下列含义：
              --aa _a_n_a_m_e
                     词被赋以数组变量       _a_n_a_m_e      的连续的下标，从      0
                     开始。在赋新值之前，    _a_n_a_m_e    被取消定义。其他    _n_a_m_e
                     参数被忽略。
              --dd _d_e_l_i_m
                     _d_e_l_i_m 的第一个字符被用于结束输入行，而不是新行符。
              --ee     如果标准输入来自终端，将使用  rreeaaddlliinnee  (参见上面的 RREEAADD‐‐
                     LLIINNEE 章节) 来获得输入行。
              --nn _n_c_h_a_r_s
                     rreeaadd 读入 _n_c_h_a_r_s 个字符后返回，而不是等待一整行输入。
              --pp _p_r_o_m_p_t
                     读取任何输入之前，在标准错误显示提示
                     _p_r_o_m_p_t，末尾没有新行符。
                     提示只有在输入来自终端时才会显示。
              --rr     反斜杠不作为转义字符。反斜杠被认为行的一部分。特殊地，一对反斜杠-新行符不作为续行。
              --ss     安静模式。如果输入来自终端，字符将不会回显。
              --tt _t_i_m_e_o_u_t
                     使得       rreeaadd       超时并返回失败，如果在      _t_i_m_e_o_u_t
                     秒内没有读入完整的一行输入。          如果           rreeaadd
                     不是从终端或管道读取输入，那么这个选项无效。
              --uu _f_d  从文件描述符 _f_d 中读取输入。

              如果没有给出   _n_a_m_e_s_，   读取的一行将赋予变量  RREEPPLLYY。  返回值是
              0，除非遇到了 EOF，rreeaaddPP  超超时时，，或或给给出出了了非非法法的的文文件件描描述述符符作作为为  --uu
              的的参参数数。。

       rreeaaddoonnllyy [[--aappff]] [[_n_a_m_e ......]]
              给出的           _n_a_m_e          将被标记为只读的；          _n_a_m_e_s
              的值不能被后来的赋值语句改变。如果给出了     --ff      选项，_n_a_m_e_s
              对应的函数也被标记。选项 --aa 限制变量只能是数组类型。如果没有给出
              _n_a_m_e 参数，或者如果给出了 --pp 选项，将打印所有只读的名称。选项 --pp
              使得输出以一种可以被重新用作输入的格式显示。            返回值是
              0，除非遇到了非法的选项，     _n_a_m_e_s     之一不是有效的     shell
              变量名，或选项 --ff 中给出的 _n_a_m_e 不是一个函数。

       rreettuurrnn [_n]
              使得一个函数以指定值        _n        退出。如果忽略了        _n_，
              返回状态是函数体中执行的最后一个命令的退出状态。如果在函数外使用，但是是在一个以
              ..   (ssoouurrccee) 命令执行的脚本内，它使得 shell 中止执行脚本，返回 _n
              或脚本中执行的最后一个命令的退出状态。如果在函数外使用，并且不是在以
              .. 执行的脚本内，返回状态是假。

       sseett [----aabbeeffhhkkmmnnppttuuvvxxBBCCHHPP] [--oo _o_p_t_i_o_n] [_a_r_g ...]
              不带选项时，shell
              变量的名称和值将以一种可以重用为输入的格式显示。
              输出根据当前语言环境进行排序。指定了选项的时候，它们设置或取消了
              shell                                                   的属性。
              处理完选项之后剩余的任何参数都被作为位置参数的值被赋值，分别赋予
              $$11, $$22, ......  $$_n.  如果给出了选项，那么具有以下含义：
              --aa      自动将被修改或创建的变量和函数标志为导出至后续命令的环境中。
              --bb      后台作业结束时立即报告状态，而不是在下次显示主提示符前报告。只有在启用作业控制时才有效。
              --ee      立即退出，如果  _s_i_m_p_l_e   _c_o_m_m_a_n_d   (简单命令，参见上面的
                      SSHHEELLLL       GGRRAAMMMMAARR       语语法法))      以非零值退出。shell
                      不会退出，如果失败的命令是 _u_n_t_i_l 或 _w_h_i_l_e 循环的一部分，
                      _i_f         语句的一部分，         &&&&        或        ⎪⎪⎪⎪
                      序列的一部分，或者命令的返回值是由 !!  翻转得到。针对 EERRRR
                      的陷阱，如果设置的话，将在 shell 退出前执行。
              --ff      禁止路径扩展。
              --hh      在查找并执行命令时，记住它们的位置。这是默认启用的。
              --kk      所有以赋值语句形式出现的参数都被加入到命令执行的环境中，不仅是命令名前面那些。
              --mm      监视模式。作业控制被启用。在支持这个选项的系统中，它在交互
                      shell 中是默认启用的 (参见上面的 JJOOBB CCOONNTTRROOLL 作作业业控控制制))。。
                      后台进程在单独的进程组中运行，结束时将打印出包含它们退出状态的一行信息。
              --nn      读取命令，但不执行。这可以用在检查                 shell
                      脚本中的语法错误。交互 shell 中它被忽略。
              --oo _o_p_t_i_o_n_-_n_a_m_e
                      _o_p_t_i_o_n_-_n_a_m_e 可以是如下之一：
                      aalllleexxppoorrtt
                              与 --aa 相同。
                      bbrraacceeeexxppaanndd
                              与 --BB 相同。
                      eemmaaccss   使用 emacs  样式的命令行编辑界面。这个选项在交互
                              shell   中默认启用，除非  shell  以  ----nnooeeddiittiinngg
                              选项启动。
                      eerrrreexxiitt 与 --ee 相同。
                      hhaasshhaallll 与 --hh 相同。
                      hhiisstteexxppaanndd
                              与 --HH 相同。
                      hhiissttoorryy 允许记录命令历史，如上述                 HHIISSTTOORRYY
                              中的描述。这个选项在交互 shell 中默认启用。
                      iiggnnoorreeeeooff
                              它的效果是好像已经执行了        shell       命令
                              ``IGNOREEOF=10'' 一样  (参见上面的  SShheellll  VVaarrii‐‐
                              aabblleess 变变量量))。。
                      kkeeyywwoorrdd 与 --kk 相同。
                      mmoonniittoorr 与 --mm 相同。
                      nnoocclloobbbbeerr
                              与 --CC 相同。
                      nnooeexxeecc  与 --nn 相同。
                      nnoogglloobb  与 --ff 相同。 nnoolloogg 当前被忽略。
                      nnoottiiffyy  与 --bb 相同。
                      nnoouunnsseett 与 --uu 相同。
                      oonneeccmmdd  与 --tt 相同。
                      pphhyyssiiccaall
                              与 --PP 相同。
                      ppoossiixx   如果默认操作与  POSIX 1003.2 不同的话，改变 bbaasshh
                              的行为，来满足标准 (_p_o_s_i_x _m_o_d_e)。
                      pprriivviilleeggeedd
                              与 --pp 相同。
                      vveerrbboossee 与 --vv 相同。
                      vvii      使用 vi 样式的命令行编辑界面。
                      xxttrraaccee  与 --xx 相同。
                      如果给出了不带         _o_p_t_i_o_n_-_n_a_m_e         的         --oo
                      选项，当前选项的值将被打印出来。如果给出了不带
                      _o_p_t_i_o_n_-_n_a_m_e                    的                     ++oo
                      选项，将在标准输出显示一系列可以重建当前选项设定的   sseett
                      命令。
              --pp      打开 _p_r_i_v_i_l_e_g_e_d _m_o_d_e _(_特_权_模_式_)_。 在这个模式中，不会处理
                      $$EENNVV          和          $$BBAASSHH__EENNVV          文件，shell
                      函数不会从环境中继承，环境中如果有变量       SSHHEELLLLOOPPTTSS，，
                      也将被忽略。如果     shell    启动时的有效用户(组)    ID
                      与真实用户(组)   ID   不同，并且没有给出    --pp    选项，
                      将执行这些操作，有效用户       ID       将设置为真实用户
                      ID。如果启动是给出了   --pp   选项，有效用户    ID    不会
                      被重置。将这个选项关闭使得有效用户和组                ID
                      被设置为真实用户和组 ID。
              --tt      读取并执行一个命令之后退出。
              --uu      在进行参数扩展时，将未定义的变量作为错误。如果试图扩展未定义的变量，shell
                      将输出一条错误消息;      如果是非交互的     shell，shell
                      将以非零值退出。
              --vv      在读取输入的同时打印出来。
              --xx      扩展每个简单命令之后，显示                           PPSS44
                      的值，接着显示命令和它扩展后的参数。
              --BB      shell   执行花括号扩展  (参见上面的  BBrraaccee  EExxppaannssiioonn))。。
                      这是默认允许的。
              --CC      如果设置的话，  bbaasshh  使用重定向操作符  >>,  >>&&,  和   <<>>
                      时，不会覆盖已存在的文件。可以使用重定向操作符 >>|| 代替 >>
                      来创建输出文件，从而绕过这个限制。
              --HH      允许    Enable    !!     样式的历史替换。在交互     shell
                      中这个选项是默认启用的。
              --PP      如果设置的话，shell             在执行类似            ccdd
                      的，改变当前工作目录的命令时，不会跟随符号连接。它将使用物理的目录结构来代替。默认情况下，
                      bbaasshh 在执行改变当前目录的命令时跟随路径的逻辑链。
              ----      如果这个选项没有参数，将取消位置参数的定义。否则，位置参数将设置为
                      _a_r_g，即使它们以 -- 开始。
              --       通知信号的结束，使得所有剩余的 _a_r_g  被赋予位置参数。  --xx
                      和 --vv 选项被关闭。如果没有 _a_r_g，位置参数将不会改变。

              这个选项默认是关闭的，除非另外说明。使用      +     而不是     -
              使得这些选项被关闭。选项都可以作为参数，        在         shell
              启动时指定。当前的选项集合可以从                              $$--
              找到。返回值总是真，除非遇到了非法的选项。

       sshhiifftt [_n]
              从 _n+1 ... 开始的选项被重命名为 $$11 ........  从 $$##  向下直到  $$##-_n+1
              的选项被取消定义。  _n  必须是非负整数，小于或等于  $$##。如果 _n 是
              0，不会改变参数。如果没有给出 _n_， 就假定它是  1。如果  _n  比  $$##
              大，位置参数不会改变。返回值大于   0，如果   _n  比  $$##  大或小于
              0；否则返回 0。

       sshhoopptt [--ppqqssuu] [--oo] [_o_p_t_n_a_m_e ...]
              对于控制可选的 shell 行为的变量，改变它们的值。没有选项或者有 --pp
              选项时，将显示所有可设置的选项列表，以及它们是否已经设置的指示。
              --pp                    使得输出以一种可以被重用为输入的形式显示。
              其他选项有如下含义：
              --ss     允许(设置) 每个 _o_p_t_n_a_m_e。
              --uu     禁止(取消) 每个 _o_p_t_n_a_m_e。
              --qq     禁止通常的输出     (安静模式)；返回状态指示了     _o_p_t_n_a_m_e
                     是否被设置。 如果对 --qq 给出了多个 _o_p_t_n_a_m_e  参数，如果所有
                     _o_p_t_n_a_m_e 都被允许，返回值就是 0； 否则返回非零值。
              --oo     限制 _o_p_t_n_a_m_e 的值为内建命令 sseett 的 --oo 选项定义的值。

              如果使用       --ss       或       --uu      时没有给出      _o_p_t_n_a_m_e
              参数，显示将分别限于被设置或被取消的选项。   除非另外说明，sshhoopptt
              选项默认被禁止(取消)。

              返回值在列出选项时是             0，如果所有             _o_p_t_n_a_m_e
              都被允许的话，否则是非零值。        当设置或取消选项时，返回值是
              0，除非 _o_p_t_n_a_m_e 是非法的 shell 选项。

              sshhoopptt 选项的列表是：

              ccddaabbllee__vvaarrss
                      如果设置的话，内建命令                                ccdd
                      的参数如果不是目录，就假定是一个变量，它的值是要切换到的目录名。
              ccddssppeellll 如果设置的话，                                        ccdd
                      命令中目录的细微拼写错误能够得以纠正。检查的错误包括字符错位，缺字符，
                      重复输入同一字符。如果找到了正确的值，将打印正确的文件名，命令将继续。
                      这个选项只能在交互 shell 中使用。
              cchheecckkhhaasshh
                      如果设置的话，bbaasshh
                      在执行命令前检测散列表中的命令是否存在。
                      如果一个被散列的命令不再存在，将进行正常的路径搜索。
              cchheecckkwwiinnssiizzee
                      如果设置的话，bbaasshh
                      在每条命令执行后检测窗口大小，如果需要的话就更新   LLIINNEESS
                      和 CCOOLLUUMMNNSS 的值。
              ccmmddhhiisstt 如果设置的话，                                      bbaasshh
                      试着将一个多行命令的所有行放到同一个历史条目中。这样使得
                      多行命令可以容易地重新修改。
              ddoottgglloobb 如果设置的话，         bbaasshh          会把以          `.'
                      开始的文件名包含在路径名扩展的结果中。
              eexxeeccffaaiill
                      如果设置的话，非交互的                             shell
                      如果不能执行作为参数提供给内建命令                  eexxeecc
                      的文件时将不会退出。交互的       shell      在      eexxeecc
                      失败时不会退出。
              eexxppaanndd__aalliiaasseess
                      如果设置的话，别名被扩展，就像上面               AALLIIAASSEESS
                      中讲到的一样。这个选项在交互 shell 中是默认启用的。
              eexxttgglloobb 如果设置的话，将允许上面        PPaatthhnnaammee       EExxppaannssiioonn
                      中提到的扩展模式匹配特性。
              hhiissttaappppeenndd
                      如果设置的话，在 shell 退出时，历史列表将追加到以  HHIISSTT‐‐
                      FFIILLEE 的值为名的文件之后，而不是覆盖文件。
              hhiissttrreeeeddiitt
                      如果设置的话，并且正在使用                    rreeaaddlliinnee，，
                      用户可以重新修改失败的历史替换。
              hhiissttvveerriiffyy
                      如果设置的话，并且正在使用                    rreeaaddlliinnee，，
                      历史替换的结果不会立即传给  shell 解释器。结果行被加载到
                      rreeaaddlliinnee 编辑缓冲区，允许进行进一步的修改。
              hhoossttccoommpplleettee
                      如果设置的话，并且正在使用        rreeaaddlliinnee，，        bbaasshh
                      将试着对正在进行补全的包含            的词进行主机名补全
                      (参见上面的       RREEAADDLLIINNEE        中的        CCoommpplleettiinngg
                      段落)。这是默认允许的。
              hhuuppoonneexxiitt
                      如果设置的话，在交互的登录     shell     退出时     bbaasshh
                      将向所有作业发出 SSIIGGHHUUPP 信号。
              iinntteerraaccttiivvee__ccoommmmeennttss
                      如果设置的话，将允许在交互     shell     中遇到以      ##
                      开头的词时忽略这个词和一行中所有剩余的字符   (参见上面的
                      CCOOMMMMEENNTTSS 注注释释))。。 这个选项是默认允许的。
              lliitthhiisstt 如果设置的话，并且允许了                         ccmmddhhiisstt
                      选项，多行的命令在保存到历史中时将包含新行符，而不是在可能的地方使用分号。
              llooggiinn__sshheellll
                      如果   shell   作为登录    shell    启动，将设置这个选项
                      (参见上面的 启启动动((IINNVVOOCCAATTIIOONN)) ))。。 这个值不可修改。
              mmaaiillwwaarrnn
                      如果设置的话，并且                                  bbaasshh
                      正在检测上次检测以来被存取过的邮件， 将显示  ``The  mail
                      in _m_a_i_l_f_i_l_e has been read''(_m_a_i_l_f_i_l_e 中的邮件已被读取)。
              nnoo__eemmppttyy__ccmmdd__ccoommpplleettiioonn
                      如果设置的话，并且正在使用                    rreeaaddlliinnee，，
                      试图在空行上执行补全时，     bbaasshh     不会搜索      PPAATTHH
                      来查找可能的补全。
              nnooccaasseegglloobb
                      如果设置的话，                                      bbaasshh
                      进行路径扩展时使用大小写不敏感方式匹配文件名(参见上面的
                      PPaatthhnnaammee EExxppaannssiioonn 路路径径扩扩展展))。。
              nnuullllgglloobb
                      如果设置的话，                                      bbaasshh
                      将允许不匹配任何文件的模式扩展为空字符串而不是它们自身(参见上面的
                      PPaatthhnnaammee EExxppaannssiioonn 路路径径扩扩展展))。。
              pprrooggccoommpp
                      如果设置的话，将启用可编程补全功能  (参见上面的 PPrrooggrraamm‐‐
                      mmaabbllee CCoommpplleettiioonn)。 这个选项是默认启用的。
              pprroommppttvvaarrss
                      如果设置的话，提示字符串要经过上面             PPRROOMMPPTTIINNGG
                      中描述的扩展，然后还要经过变量和参数扩展。这个选项是默认启用的。
              rreessttrriicctteedd__sshheellll
                      shell 设置这个选项，如果它是以受限模式启用的 (参见下面的
                      受受限限的的sshheellll((RREESSTTRRIICCTTEEDD                            SSHHEELLLL))
                      章节)。这个值不能修改。在执行启动文件时，它不会被重置，使得启动文件可以
                      得知 shell 是否是受限的。
              sshhiifftt__vveerrbboossee
                      如果设置的话，内建命令                             sshhiifftt
                      在偏移量超过位置参数的个数时打印一条错误消息。
              ssoouurrcceeppaatthh
                      如果设置的话，内建命令    ssoouurrccee    (..)    使用     PPAATTHH
                      中的值来查找包含作为参数给出的文件。这个选项默认是启用的。
              xxppgg__eecchhoo
                      如果设置的话，内建命令 eecchhoo 默认扩展反斜杠转义序列。
       ssuussppeenndd [--ff]
              挂起   shell   的执行，直到收到一个   SSIIGGCCOONNTT   信号。选项    --ff
              表示如果这是一个登录     shell，那么不要提示，直接挂起。返回值是
              0，除非     shell     是登录     shell     并且没有指定     --ff，，
              或者没有启用作业控制。
       tteesstt _e_x_p_r
       [[ _e_x_p_r ]]
              返回状态值        0        或       1，根据条件表达式       _e_x_p_r
              的求值而定。每个操作符和操作数都必须是一个单独的参数。表达式使用上面
              条条件件表表达达式式 ((CCOONNDDIITTIIOONNAALL EEXXPPRREESSSSIIOONNSS)) 中的操作构造。

              表达式可以用下列操作符结合，以优先级的降序列出。
              !! _e_x_p_r 值为真，如果 _e_x_p_r 为假。
              (( _e_x_p_r ))
                     返回 _e_x_p_r 的值。括号可以用来超越操作符的一般优先级。
              _e_x_p_r_1 -aa _e_x_p_r_2
                     值为真，如果 _e_x_p_r_1 和 _e_x_p_r_2 都为真。
              _e_x_p_r_1 -oo _e_x_p_r_2
                     值为真，如果 _e_x_p_r_1 或 _e_x_p_r_2 为真。

              tteesstt 和 [[ 使用基于参数个数的一系列规则，对条件表达式进行求值。

              0 arguments
                     表达式为假。
              1 argument
                     表达式为真，当且仅当参数非空。
              2 arguments
                     如果第一个参数是  !!，表达式为真，当且仅当第二个参数为空。
                     如果第一个参数是上面 条条件件表表达达式式 ((CCOONNDDIITTIIOONNAALL EEXXPPRREESSSSIIOONNSS))
                     中列出的单目条件运算符之一，表达式为真，当且仅当单目测试为真。
                     如果第一个参数不是合法的单目条件运算符，表达式为假。
              3 arguments
                     如果第二个参数是上面 条条件件表表达达式式 ((CCOONNDDIITTIIOONNAALL EEXXPPRREESSSSIIOONNSS))
                     中列出的二进制条件操作符之一，表达式的结果是使用第一和第三个参数作为操作数的二进制测试的结果。
                     如果第一个参数是
                     !!，表达式值是使用第二和第三个参数进行双参数测试的结果取反。
                     如果第一个参数是                          ((，第三个参数是
                     ))，结果是对第二个参数进行单参数测试的结果。
                     否则，表达式为假。这种情况下       --aa        和        --oo
                     操作符被认为二进制操作符。
              4 arguments
                     如果第一个参数是
                     !!，结果是由剩余参数组成的三参数表达式结果取反。
                     否则，表达式被根据上面列出的优先级规则解释并执行。
              5 或更多 arguments
                     表达式被根据上面列出的优先级规则解释并执行。

       ttiimmeess  对   shell   以及  shell  运行的进程，打印累计的用户和系统时间。
              返回状态是 0。

       ttrraapp [--llpp] [_a_r_g] [_s_i_g_s_p_e_c ...]
              当      shell      收到信号      _s_i_g_s_p_e_c      时，命令       _a_r_g
              将被读取并执行。如果没有给出       _a_r_g      或者给出的是      --,
              所有指定的信号被设置为它们的初始值 (进入 shell 时它们的值)。如果
              _a_r_g       是空字符串，      _s_i_g_s_p_e_c      指定的信号被      shell
              和它启动的命令忽略。如果 _a_r_g  不存在，并且给出了  --pp  那么与每个
              _s_i_g_s_p_e_c
              相关联的陷阱命令将被显示出来。如果没有给出任何参数，或只给出了
              --pp，，   ttrraapp  将打印出与每个信号编号相关的命令列表。每个  _s_i_g_s_p_e_c
              可以是 <_s_i_g_n_a_l_._h> 定义的信号名，或是一个信号编号。 如果  _s_i_g_s_p_e_c
              是  EEXXIITT  (0)，命令  _a_r_g  将在 shell 退出时执行。如果 _s_i_g_s_p_e_c 是
              DDEEBBUUGG, 命令  _a_r_g  将在每个简单命令  (_s_i_m_p_l_e  _c_o_m_m_a_n_d，参见上面的
              SSHHEELLLL   GGRRAAMMMMAARR))   之后执行。如果   _s_i_g_s_p_e_c  是  EERRRR,  命令  _a_r_g
              将在任何命令以非零值退出时执行。如果失败的命令是 _u_n_t_i_l 或  _w_h_i_l_e
              循环的一部分，      _i_f      语句的一部分，      &&&&     或     ⎪⎪⎪⎪
              序列的一部分，或者命令的返回值是通过    !!     转化而来，     EERRRR
              陷阱将不会执行。选项  --ll 使得 shell 打印信号名和对应编号的列表。
              shell
              忽略的信号不能被捕捉或重置。在子进程中，被捕捉的信号在进程创建时被重置为初始值。
              返回值为假，如果 _s_i_g_s_p_e_c 非法；否则 ttrraapp 返回真。

       ttyyppee [--aaffttppPP] _n_a_m_e [_n_a_m_e ...]
              没有选项时，指示每个                                        _n_a_m_e
              将如何被解释，如果用作一个命令名。如果使用了   --tt   选项，  ttyyppee
              打印一个字符串，内容是如下之一：   _a_l_i_a_s,   _k_e_y_w_o_r_d,   _f_u_n_c_t_i_o_n,
              _b_u_i_l_t_i_n,    或   _f_i_l_e   _，   如果   _n_a_m_e   分别是一个别名，shell
              保留字，函数，内建命令或磁盘文件。如果没有找到            _n_a_m_e_，
              那么不会打印任何东西，返回退出状态假。如果使用了  --pp 选项， ttyyppee
              返回如果 _n_a_m_e 作为命令名，将被执行的磁盘文件名；或者返回空，如果
              ``type  -t  name''  不会返回  _f_i_l_e.  选项 --PP 选项强制对每个 _n_a_m_e
              搜索   PPAATTHH，，   即使   ``type   -t   name''    不会返回    _f_i_l_e.
              如果命令在散列中，   --pp   和   --PP   将打印散列的值，而不是  PPAATTHH
              中首先出现的那一个文件。如果使用了      --aa      选项，      ttyyppee
              打印所有包含可执行的名称                                    _n_a_m_e
              的场合。结果包括别名和函数，当且仅当没有同时使用  --pp  选项。使用
              --aa      时不会查找散列中的命令表。选项     --ff     阻止     shell
              进行查找，就像在内建命令       ccoommmmaanndd       中一样。       ttyyppee
              返回真，如果找到了任何参数。什么都没找到则返回假。

       uulliimmiitt [--SSHHaaccddffllmmnnppssttuuvv [_l_i_m_i_t]]
              在支持它的系统上，对                                       shell
              和它启动的进程，提供对可用资源的控制。    选项    --HH    和    --SS
              指定为所给资源设定的硬性和柔性限额。
              硬性限额在设置后不能增加；柔性限额可以增加，直到与硬性限额相等。
              如果没有给出  --HH  或  --SS  选项，将同时设置硬性和柔性限额。 _l_i_m_i_t
              的值可以是一个数字，单位是指定资源的单元值，或者是特殊值   hhaarrdd,
              ssoofftt,                        或                        uunnlliimmiitteedd
              之一，意思分别是当前硬性限额，当前柔性限额和没有限额。如果忽略了
              _l_i_m_i_t_，       将打印出当前对资源的柔性限额值，除非给出了      --HH
              选项。当指定多于一个
              资源时，限额名称和单位将在值之前打印出来。其他选项按照如下意义解释：
              --aa     报告所有当前限额
              --cc     core 文件的最大值
              --dd     进程数据段的最大值
              --ff     shell 创建的文件的最大值
              --ll     内存中可以锁定的最大值
              --mm     常驻内存的最大值
              --nn     打开的文件描述符最大个数 (大多数系统不允许设置这个值)
              --pp     管道大小，以 512 字节的块为单位 (这个值可能不能设置)
              --ss     栈的最大值
              --tt     cpu 时间总数的最大值，以秒计
              --uu     用户可以运行的最大进程数
              --vv     shell 可用的虚拟内存总量的最大值

              如果给出了    _l_i_m_i_t_，    它将是指定资源的新限额     (选项     --aa
              只显示它们)。如果没有给出选项，则假设有 --ff。。 值的递增间隔是 1024
              字节，除了 --tt 单位是 秒， --pp 单位是 512 字节的块个数， --nn 和  --uu
              是不可调节的值。返回
              0，除非给出了非法的选项或参数，或者在设置新的限额时发生了错误。

       uummaasskk [--pp] [--SS] [_m_o_d_e]
              用户创建文件的掩码被设置为        _m_o_d_e.         如果        _m_o_d_e
              以数字开始，它被解释为一个八进制数；否则被解释为类似于  _c_h_m_o_d(1)
              接受的符号形式的模式掩码。如果忽略了                      _m_o_d_e_，
              将打印当前掩码值。选项                                        --SS
              使得掩码以符号形式打印；默认输出是八进制数。如果给出了        --pp
              选项，并且忽略了                                          _m_o_d_e_，
              输出将是一种可以重用为输入的形式。返回值是
              0，如果成功改变了模式，或者没有给出 _m_o_d_e。 其他情况返回假。

       uunnaalliiaass [-aa] [_n_a_m_e ...]
              从已定义的别名列表中删除           _n_a_m_e。如果给出了           --aa
              将删除所有别名定义。返回值是真，除非给出的                  _n_a_m_e
              不是已定义的别名。

       uunnsseett [-ffvv] [_n_a_m_e ...]
              将每个  _n_a_m_e  对应的变量或函数删除。如果没有给出选项，或者给出了
              --vv          选项，          _n_a_m_e          仅包括           shell
              变量。只读的变量不能被取消定义。如果给出了 --ff 选项， _n_a_m_e 仅包括
              shell
              函数，函数的定义将被删除。每个被取消定义的变量或函数都被从后续命令的环境中删除。
              如果 RRAANNDDOOMM, SSEECCOONNDDSS, LLIINNEENNOO, HHIISSTTCCMMDD,  FFUUNNCCNNAAMMEE,  GGRROOUUPPSS,  或者
              DDIIRRSSTTAACCKK
              中的任何一个被取消定义，它们将丧失特殊的属性，即使它们后来被重新定义。
              退出状态是真，除非 _n_a_m_e 不存在或是只读的。

       wwaaiitt [_n]
              等待指定的进程，返回它的终止状态。      _n      可以是进程     ID
              或一个作业号；如果给出的是作业号，将等待作业的管道中所有进程。如果没有给出
              _n_，   将等待所有当前处于激活状态的子进程，返回状态是  0。如果  _n
              指定了不存在的进程或作业，返回状态是
              127。否则，返回状态是所等待的最后一个进程或作业的退出状态。

受受限限的的sshheellll((RREESSTTRRIICCTTEEDD SSHHEELLLL))
       如果 bbaasshh 以 rrbbaasshh 名称启动，或者启动时使用了 --rr 选项，那么它成为受限的
       shell。      受限的      shell      一般用来建立一个比标准的      shell
       受到更多控制的环境。 它的行为与 bbaasshh 一致，除了下列行为是不允许的 (dis‐
       allowed) 或不会运行的 (not performed)。

       ·      使用 ccdd 来改变路径；

       ·      设置或取消 SSHHEELLLL, PPAATTHH, EENNVV, 或 BBAASSHH__EENNVV 变量的值；

       ·      指定的命令名中包含 // ；

       ·      指定包含 // 的文件名作为传递给内建命令 ..  的参数；

       ·      指定包含斜杠 (slash)  的文件名作为  --pp  选项的参数，传递给  hhaasshh
              内建命令；

       ·      启动时从 shell 环境中导入 (import) 函数定义；

       ·      启动时解释 shell 环境中 SSHHEELLLLOOPPTTSS 的值；

       ·      使用 >, >|, <>, >&, &>, 和 >> 等重定向操作符重定向输出；

       ·      使用 eexxeecc 内建命令来以另一个命令替换 shell；

       ·      使用 eennaabbllee 内建命令的 --ff 和 --dd 选项来增加和删除内建命令；

       ·      使用 eennaabbllee 内建命令来允许和禁止 shell 内建命令；

       ·      指定 ccoommmmaanndd 内建命令的 --pp 选项；

       ·      使用 sseett ++rr 或 sseett ++oo rreessttrriicctteedd 来关闭受限模式。

       这些限制在所有启动文件读取之后才会生效。

       当一个 shell 脚本作为一个命令执行时 (参见上面的 命命令令执执行行((CCOOMMMMAANNDD EEXXEECCUU‐‐
       TTIIOONN)) 章节)， rrbbaasshh 关闭为执行脚本而孵化 (spawn) 的 shell 的所有限制。

参参见见((""SSEEEE AALLSSOO""))
       _B_a_s_h _R_e_f_e_r_e_n_c_e _M_a_n_u_a_l, Brian Fox and Chet Ramey
       _T_h_e _G_n_u _R_e_a_d_l_i_n_e _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
       _T_h_e _G_n_u _H_i_s_t_o_r_y _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
       _P_o_r_t_a_b_l_e _O_p_e_r_a_t_i_n_g _S_y_s_t_e_m _I_n_t_e_r_f_a_c_e _(_P_O_S_I_X_) _P_a_r_t _2_:  _S_h_e_l_l  _a_n_d  _U_t_i_l_i_‐
       _t_i_e_s, IEEE
       _s_h(1), _k_s_h(1), _c_s_h(1)
       _e_m_a_c_s(1), _v_i(1)
       _r_e_a_d_l_i_n_e(3)

文文件件((FFIILLEESS))
       _/_b_i_n_/_b_a_s_h
              bbaasshh 可执行文件
       _/_e_t_c_/_p_r_o_f_i_l_e
              系统范围的初始化文件，登录 shell 会执行它
       _~_/_._b_a_s_h___p_r_o_f_i_l_e
              个人初始化文件，登录 shell 会执行它
       _~_/_._b_a_s_h_r_c
              个人的每个交互式 shell 启动时执行的文件
       _~_/_._b_a_s_h___l_o_g_o_u_t
              个人的登录 shell 清理文件，当一个登录 shell 退出时会执行它
       _~_/_._i_n_p_u_t_r_c
              个人的 _r_e_a_d_l_i_n_e 初始化文件

作作者者((AAUUTTHHOORRSS))
       Brian Fox, Free Software Foundation
       bfox@gnu.org

       Chet Ramey, Case Western Reserve University
       chet@ins.CWRU.Edu

报报告告BBUUGGSS ((BBUUGG RREEPPOORRTTSS))
       如果你发现一个       bbaasshh       中的      bug，你应当报告它。但是首先，
       你应当确定它真的是一个 bug，并且它在你使用的最新版本的 bbaasshh 中存在。

       一旦你认定存在那样一个   bug，使用   _b_a_s_h_b_u_g   命令来提交一个错误报告。
       如果你有固定住址，鼓励你用邮政的方式提交一份！  建议和有关  bbaasshh “哲学”
       (`philosophical')  的  “错误报告”  可以寄给  _b_u_g_-_b_a_s_h_@_g_n_u_._o_r_g  或者贴到
       Usenet 新闻组 ggnnuu..bbaasshh..bbuugg 之上。

       所有错误报告应当包括：

       bbaasshh 的版本号
       硬件信息和操作系统
       用来编译的编译器
       对 bug 行为的描述
       可以激活这个 bug 的一个短小的脚本或者什么 “秘诀” (recipe)

       _b_a_s_h_b_u_g 会自动在它提供的错误报告模板中插入前三项。

       关于这份手册页的评论和错误报告请直接提交到 _c_h_e_t_@_i_n_s_._C_W_R_U_._E_d_u.

BBUUGGSS
       它太大了，并且有点慢。

       bbaasshh    和传统版本的    sshh   之间有一些细微的差别，大部分是因为   PPOOSSIIXX
       规约的要求。

       别名机制在一些应用中会混淆。

       Shell 内建命令和函数不可终止/重新开始。

       组合的命令和使用         `a         ;          b          ;          c'
       形式的命令序列在进程试图暂停时不能很好处理。      当一个进程中止，shell
       会立即执行序列中的下一条命令。
       也可以将命令的序列放在圆括号中，来强制启动子
       shell，这样就可以将它们作为一个单元中止了。

       在       $$((...))        命令替换中的注释不会被解释，直到执行替换的时候。
       这将延迟报错，直到命令开始执行之后的一段时间。

       数组变量还不能导出 (export)。

[[中中文文版版维维护护人人]]
       袁袁乙乙钧钧 <<bbbbbbuusshh@@116633..ccoomm>>

[[中中文文版版最最新新更更新新]]
       22000044..0033..0055

《《中中国国lliinnuuxx论论坛坛mmaann手手册册页页翻翻译译计计划划》》::
       hhttttpp::////ccmmpppp..lliinnuuxxffoorruumm..nneett

跋跋
       本页面中文版由中文 man 手册页计划提供。
       中文 man 手册页计划：hhttttppss::////ggiitthhuubb..ccoomm//mmaann--ppaaggeess--zzhh//mmaannppaaggeess--zzhh



GNU Bash-2.05b                   2002 July 15                          BASH(1)
